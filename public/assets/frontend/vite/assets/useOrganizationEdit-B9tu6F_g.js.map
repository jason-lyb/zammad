{"version":3,"file":"useOrganizationEdit-B9tu6F_g.js","sources":["../../../../../app/frontend/apps/mobile/components/Organization/OrganizationMembersList.vue","../../../../../app/frontend/apps/mobile/entities/organization/graphql/mutations/update.api.ts","../../../../../app/frontend/apps/mobile/entities/organization/composables/useOrganizationEdit.ts"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport type { OrganizationQuery } from '#shared/graphql/types.ts'\nimport type { ConfidentTake } from '#shared/types/utils.ts'\n\nimport CommonSectionMenu from '../CommonSectionMenu/CommonSectionMenu.vue'\nimport CommonShowMoreButton from '../CommonShowMoreButton/CommonShowMoreButton.vue'\nimport CommonUsersList from '../CommonUsersList/CommonUsersList.vue'\n\ninterface Props {\n  organization: ConfidentTake<OrganizationQuery, 'organization'>\n  disableShowMore?: boolean\n}\n\nconst props = defineProps<Props>()\nconst emit = defineEmits<{\n  'load-more': []\n}>()\n\nconst members = computed(() => {\n  return props.organization.allMembers?.edges.map(({ node }) => node) || []\n})\n</script>\n\n<template>\n  <CommonSectionMenu v-if=\"members.length\" :header-label=\"__('Members')\">\n    <CommonUsersList :users=\"members\" />\n    <CommonShowMoreButton\n      :entities=\"members\"\n      :total-count=\"organization.allMembers?.totalCount || 0\"\n      :disabled=\"disableShowMore\"\n      @click=\"emit('load-more')\"\n    />\n  </CommonSectionMenu>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { OrganizationAttributesFragmentDoc } from '../../../../../../shared/entities/organization/graphql/fragments/organizationAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const OrganizationUpdateDocument = gql`\n    mutation organizationUpdate($id: ID!, $input: OrganizationInput!) {\n  organizationUpdate(id: $id, input: $input) {\n    organization {\n      ...organizationAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${OrganizationAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useOrganizationUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.OrganizationUpdateMutation, Types.OrganizationUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.OrganizationUpdateMutation, Types.OrganizationUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.OrganizationUpdateMutation, Types.OrganizationUpdateMutationVariables>(OrganizationUpdateDocument, options);\n}\nexport type OrganizationUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.OrganizationUpdateMutation, Types.OrganizationUpdateMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { reactive } from 'vue'\n\nimport type { FormSchemaField } from '#shared/components/Form/types.ts'\nimport { defineFormSchema } from '#shared/form/defineFormSchema.ts'\nimport type { OrganizationQuery } from '#shared/graphql/types.ts'\nimport {\n  EnumFormUpdaterId,\n  EnumObjectManagerObjects,\n} from '#shared/graphql/types.ts'\nimport type { ConfidentTake } from '#shared/types/utils.ts'\n\nimport { useDialogObjectForm } from '#mobile/components/CommonDialogObjectForm/useDialogObjectForm.ts'\n\nimport { useOrganizationUpdateMutation } from '../graphql/mutations/update.api.ts'\n\nexport const useOrganizationEdit = () => {\n  const dialog = useDialogObjectForm(\n    'organization-edit',\n    EnumObjectManagerObjects.Organization,\n  )\n\n  const schema = defineFormSchema(\n    [\n      {\n        name: 'name',\n        required: true,\n        screen: 'edit',\n        object: EnumObjectManagerObjects.Organization,\n      },\n      {\n        screen: 'edit',\n        object: EnumObjectManagerObjects.Organization,\n      },\n      {\n        name: 'active',\n        required: true,\n        screen: 'edit',\n        object: EnumObjectManagerObjects.Organization,\n      },\n    ],\n    { showDirtyMark: true },\n  )\n\n  const openEditOrganizationDialog = async (\n    organization: ConfidentTake<OrganizationQuery, 'organization'>,\n  ) => {\n    const formChangeFields = reactive<Record<string, Partial<FormSchemaField>>>(\n      {\n        domain: {\n          required: !!organization.domainAssignment,\n        },\n        note: {\n          props: {\n            meta: {\n              mentionText: {\n                disabled: true,\n              },\n              mentionKnowledgeBase: {\n                disabled: true,\n              },\n              mentionUser: {\n                disabled: true,\n              },\n            },\n          },\n        },\n      },\n    )\n\n    dialog.openDialog({\n      object: organization,\n      schema,\n      mutation: useOrganizationUpdateMutation,\n      formChangeFields,\n      onChangedField: (fieldName, newValue) => {\n        if (fieldName === 'domain_assignment') {\n          // TODO: Can be changed when we have the new toggle field (currently the value can also be a string).\n          formChangeFields.domain.required =\n            (typeof newValue === 'boolean' && newValue) || newValue === 'true'\n        }\n      },\n      formUpdaterId: EnumFormUpdaterId.FormUpdaterUpdaterOrganizationEdit,\n      errorNotificationMessage: __('Organization could not be updated.'),\n    })\n  }\n\n  return { openEditOrganizationDialog }\n}\n"],"names":["props","__props","emit","__emit","members","computed","_a","node","OrganizationUpdateDocument","gql","OrganizationAttributesFragmentDoc","ErrorsFragmentDoc","useOrganizationUpdateMutation","options","VueApolloComposable.useMutation","useOrganizationEdit","dialog","useDialogObjectForm","EnumObjectManagerObjects","schema","defineFormSchema","organization","formChangeFields","reactive","fieldName","newValue","EnumFormUpdaterId"],"mappings":"2oBAiBA,MAAMA,EAAQC,EACRC,EAAOC,EAIPC,EAAUC,EAAS,IAAM,OACtB,QAAAC,EAAAN,EAAM,aAAa,aAAnB,YAAAM,EAA+B,MAAM,IAAI,CAAC,CAAE,KAAAC,CAAK,IAAMA,KAAS,EAAC,CACzE,4YCfYC,EAA6BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWpCC,CAAiC;AAAA,EACrCC,CAAiB,GACH,SAAAC,EAA8BC,EAAuQ,GAAI,CAChT,OAAAC,EAA6GN,EAA4BK,CAAO,CACzJ,CCPO,MAAME,EAAsB,IAAM,CACvC,MAAMC,EAASC,EACb,oBACAC,EAAyB,YAAA,EAGrBC,EAASC,EACb,CACE,CACE,KAAM,OACN,SAAU,GACV,OAAQ,OACR,OAAQF,EAAyB,YACnC,EACA,CACE,OAAQ,OACR,OAAQA,EAAyB,YACnC,EACA,CACE,KAAM,SACN,SAAU,GACV,OAAQ,OACR,OAAQA,EAAyB,YACnC,CACF,EACA,CAAE,cAAe,EAAK,CAAA,EA8CxB,MAAO,CAAE,2BA3C0B,MACjCG,GACG,CACH,MAAMC,EAAmBC,EACvB,CACE,OAAQ,CACN,SAAU,CAAC,CAACF,EAAa,gBAC3B,EACA,KAAM,CACJ,MAAO,CACL,KAAM,CACJ,YAAa,CACX,SAAU,EACZ,EACA,qBAAsB,CACpB,SAAU,EACZ,EACA,YAAa,CACX,SAAU,EACZ,CACF,CACF,CACF,CACF,CAAA,EAGFL,EAAO,WAAW,CAChB,OAAQK,EACR,OAAAF,EACA,SAAUP,EACV,iBAAAU,EACA,eAAgB,CAACE,EAAWC,IAAa,CACnCD,IAAc,sBAEhBF,EAAiB,OAAO,SACrB,OAAOG,GAAa,WAAaA,GAAaA,IAAa,OAElE,EACA,cAAeC,EAAkB,mCACjC,yBAA0B,GAAG,oCAAoC,CAAA,CAClE,CAAA,CAGiC,CACtC"}