{"version":3,"file":"useDisplayObjectAttributes-sspS-pHp.js","sources":["../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeBoolean/AttributeBoolean.vue","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeBoolean/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeDate/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeInput/AttributeInput.vue","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeInput/index.ts","../../../../../app/frontend/shared/entities/group/entity.ts","../../../../../app/frontend/shared/entities/organization/entity.ts","../../../../../app/frontend/shared/entities/ticket-priority/entity.ts","../../../../../app/frontend/shared/entities/ticket-state/entity.ts","../../../../../app/frontend/shared/entities/user/entity.ts","../../../../../app/frontend/shared/entities/useEntity.ts","../../../../../app/frontend/shared/components/ObjectAttributes/utils.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeMultiSelect/AttributeMultiSelect.vue","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeMultiSelect/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeRichtext/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeSingleSelect/AttributeSingleSelect.vue","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeSingleSelect/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeTextarea/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/attributes/AttributeTimeUnit/index.ts","../../../../../app/frontend/shared/components/ObjectAttributes/useDisplayObjectAttributes.ts"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport type { ObjectAttributeBoolean } from './attributeBooleanTypes.ts'\nimport type { ObjectAttributeProps } from '../../types.ts'\n\nconst props =\n  defineProps<ObjectAttributeProps<ObjectAttributeBoolean, boolean>>()\n\nconst body = computed(() => {\n  const { true: yes, false: no } = props.attribute.dataOption?.options || {}\n  return props.value ? yes || __('yes') : no || __('no')\n})\n\nconst translate = computed(() => {\n  const { translate = true } = props.attribute.dataOption || {}\n  return translate\n})\n</script>\n\n<template>\n  {{ translate ? $t(body) : body }}\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeBoolean from './AttributeBoolean.vue'\n\nexport default {\n  dataTypes: ['boolean', 'active'],\n  component: AttributeBoolean,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeDate from './AttributeDate.vue'\n\nexport default {\n  dataTypes: ['date', 'datetime'],\n  component: AttributeDate,\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\n// TODO: check external data input output\nimport { computed } from 'vue'\n\nimport { phoneify } from '#shared/utils/formatter.ts'\n\nimport type { ObjectAttributeInput } from './attributeInputTypes.ts'\nimport type { ObjectAttributeProps } from '../../types.ts'\n\nconst props =\n  defineProps<\n    ObjectAttributeProps<\n      ObjectAttributeInput,\n      string | number | { value: string | number; label: string }\n    >\n  >()\n\nconst primitiveValue = computed(() => {\n  if (typeof props.value === 'object' && props.value) return props.value.value\n  return props.value\n})\n\nconst title = computed(() => {\n  if (typeof props.value === 'object' && props.value) return props.value.label\n  return props.value\n})\n\nconst link = computed(() => {\n  const { linktemplate, type } = props.attribute.dataOption || {}\n\n  // link is processed in common component\n  if (linktemplate) return null\n\n  const value = String(primitiveValue.value)\n\n  // app/assets/javascripts/app/index.coffee:135\n  if (type === 'tel') return `tel:${phoneify(value)}`\n  if (type === 'url') return value\n  if (type === 'email') return `mailto:${value}`\n  return ''\n})\n</script>\n\n<template>\n  <template v-if=\"!link\">{{ title }}</template>\n  <CommonLink\n    v-else\n    :class=\"config?.classes?.link\"\n    :external=\"attribute.dataOption.type !== 'url'\"\n    open-in-new-tab\n    :link=\"link\"\n  >\n    {{ title }}\n  </CommonLink>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeInput from './AttributeInput.vue'\n\nexport default {\n  dataTypes: [\n    'input',\n    'integer',\n    'autocompletion_ajax_external_data_source',\n    'autocompletion_ajax',\n    'autocompletion_ajax_customer_organization',\n    'user_autocompletion',\n  ], // TODO maybe have own modules for every type, but with shared code, to have an better understanding\n  component: AttributeInput,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { EnumObjectManagerObjects, type Group } from '#shared/graphql/types.ts'\n\nimport type { EntityPlugin } from '../useEntity.ts'\n\n// TODO: add Entity-Data types instead of direct usage from GQL\n\nconst groupEntity: EntityPlugin<Group> = {\n  name: EnumObjectManagerObjects.Group,\n  display: (object) => (object.name || '').replace(/::/g, ' â€º '),\n}\n\nexport default groupEntity\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  EnumObjectManagerObjects,\n  type Organization,\n} from '#shared/graphql/types.ts'\n\nimport type { EntityPlugin } from '../useEntity.ts'\n\n// TODO: add Entity-Data types instead of direct usage from GQL\n\nconst organizationEntity: EntityPlugin<Organization> = {\n  name: EnumObjectManagerObjects.Organization,\n  display: (object) => object.name || '',\n}\n\nexport default organizationEntity\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { type TicketPriority } from '#shared/graphql/types.ts'\n\nimport type { EntityPlugin } from '../useEntity.ts'\n\n// TODO: add Entity-Data types instead of direct usage from GQL\n\nconst ticketPriorityEntity: EntityPlugin<TicketPriority> = {\n  name: 'TicketPriority',\n  display: (object) => object.name || '',\n}\n\nexport default ticketPriorityEntity\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { type TicketState } from '#shared/graphql/types.ts'\n\nimport type { EntityPlugin } from '../useEntity.ts'\n\n// TODO: add Entity-Data types instead of direct usage from GQL\n\nconst ticketStateEntity: EntityPlugin<TicketState> = {\n  name: 'TicketState',\n  display: (object) => object.name || '',\n}\n\nexport default ticketStateEntity\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { EnumObjectManagerObjects, type User } from '#shared/graphql/types.ts'\n\nimport type { EntityPlugin } from '../useEntity.ts'\n\n// TODO: add Entity-Data types instead of direct usage from GQL\n\nconst userEntity: EntityPlugin<User> = {\n  name: EnumObjectManagerObjects.User,\n  display: (object) => object.fullname || '',\n}\n\nexport default userEntity\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { keyBy } from 'lodash-es'\n\nimport type { EnumObjectManagerObjects } from '#shared/graphql/types.ts'\nimport type { EntityObject } from '#shared/types/entity.ts'\n\nexport type EntityName = string | EnumObjectManagerObjects\n\nexport interface EntityPlugin<T = EntityObject> {\n  name: EntityName\n  display: (object: T) => string\n}\n\nconst entityModules: Record<string, EntityPlugin> = import.meta.glob(\n  ['./*/entity.ts'],\n  {\n    eager: true,\n    import: 'default',\n  },\n)\n\nexport const entities = Object.values(entityModules)\nexport const entitiesByName = keyBy(entities, 'name')\n\nexport const useEntity = (entity: EntityName) => {\n  // TODO: only log or really an error?\n  if (!entitiesByName[entity]) {\n    throw new Error(`Entity \"${entity}\" not found`)\n  }\n\n  return entitiesByName[entity]\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\nimport { useEntity } from '#shared/entities/useEntity.ts'\nimport type { ObjectAttributeValue } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport type { EntityObject } from '#shared/types/entity.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\nimport { camelize } from '#shared/utils/formatter.ts'\nimport { edgesToArray } from '#shared/utils/helpers.ts'\n\nimport type { Dictionary } from 'ts-essentials'\n\nexport const getValue = (\n  key: string,\n  object: ObjectLike,\n  attributesObject: Dictionary<ObjectAttributeValue>,\n  attribute: ObjectAttribute,\n) => {\n  if (attribute.dataOption?.relation) {\n    const entityName = attribute.dataOption.relation\n    const belongsTo = attribute.dataOption.belongs_to || camelize(entityName)\n\n    const entity = useEntity(entityName)\n    const entityObject = object[belongsTo]\n\n    if (entity && entityObject) {\n      // Special handling for array relations (e.g. secondary organizations)\n      if ('edges' in entityObject) {\n        return edgesToArray(entityObject)\n          .map((item) => entity.display(item as EntityObject))\n          .join(', ')\n      }\n\n      return entity.display(entityObject)\n    }\n  }\n\n  if (key in attributesObject) {\n    return attributesObject[key].value\n  }\n  if (key in object) {\n    return object[key]\n  }\n  return object[camelize(key)]\n}\n\nexport const isEmpty = (value: unknown) => {\n  if (Array.isArray(value)) {\n    return value.length === 0\n  }\n  if (value && typeof value === 'object') {\n    return Object.keys(value).length === 0\n  }\n\n  return value === null || value === undefined || value === ''\n}\n\nexport const getLink = (\n  name: string,\n  attributesObject: Dictionary<ObjectAttributeValue>,\n) => {\n  const attribute = attributesObject[name]\n  return attribute?.renderedLink || null\n}\n\nexport const translateOption = (attribute: ObjectAttribute, str?: string) => {\n  if (!str) return ''\n\n  if (attribute.dataOption?.translate) {\n    return i18n.t(str)\n  }\n  return str\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { translateOption } from '../../utils.ts'\n\nimport type { ObjectAttributeMultiSelect } from './attributeMultiSelectTypes.ts'\nimport type { ObjectAttributeProps } from '../../types.ts'\n\nconst props =\n  defineProps<ObjectAttributeProps<ObjectAttributeMultiSelect, string[]>>()\n\nconst body = computed(() => {\n  if (props.attribute.dataType === 'multi_tree_select') {\n    return props.value\n      .map((value) =>\n        value\n          .split('::')\n          .map((option) => translateOption(props.attribute, option))\n          .join('::'),\n      )\n      .join(', ')\n  }\n  return props.value\n    .map((key) => {\n      const option = props.attribute.dataOption.historical_options?.[key] ?? key\n      return translateOption(props.attribute, option)\n    })\n    .join(', ')\n})\n</script>\n\n<template>\n  {{ body }}\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeMultiSelect from './AttributeMultiSelect.vue'\n\nexport default {\n  dataTypes: ['multiselect', 'multi_tree_select'],\n  component: AttributeMultiSelect,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeRichtext from './AttributeRichtext.vue'\n\nexport default {\n  dataTypes: ['richtext'],\n  component: AttributeRichtext,\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { translateOption } from '../../utils.ts'\n\nimport type { ObjectAttributeSingleSelect } from './attributeSingleSelectTypes.ts'\nimport type { ObjectAttributeProps } from '../../types.ts'\n\nconst props =\n  defineProps<ObjectAttributeProps<ObjectAttributeSingleSelect, string>>()\n\nconst body = computed(() => {\n  if (props.attribute.dataType === 'tree_select') {\n    return props.value\n      .split('::')\n      .map((field) => translateOption(props.attribute, field))\n      .join('::')\n  }\n  const value =\n    props.attribute.dataOption.historical_options?.[props.value] ?? props.value\n  return translateOption(props.attribute, value)\n})\n</script>\n\n<template>\n  {{ body }}\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeSingleSelect from './AttributeSingleSelect.vue'\n\nexport default {\n  dataTypes: ['tree_select', 'select'],\n  component: AttributeSingleSelect,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeTextarea from './AttributeTextarea.vue'\n\nexport default {\n  dataTypes: ['textarea'],\n  component: AttributeTextarea,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport AttributeTimeUnit from './AttributeTimeUnit.vue'\n\nexport default {\n  dataTypes: ['time_unit'],\n  component: AttributeTimeUnit,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { keyBy } from 'lodash-es'\nimport { computed } from 'vue'\n\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\nimport type { ObjectAttributeValue } from '#shared/graphql/types.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport { getLink, getValue, isEmpty } from './utils.ts'\n\nimport type { AttributeDeclaration } from './types.ts'\nimport type { Dictionary } from 'ts-essentials'\nimport type { Component } from 'vue'\n\ninterface BaseObjectAttributeDisplayOptions {\n  object: ObjectLike\n}\n\nexport interface ObjectAttributeDisplayOptions\n  extends BaseObjectAttributeDisplayOptions {\n  attribute: ObjectAttribute\n}\n\nexport interface ObjectAttributesDisplayOptions\n  extends BaseObjectAttributeDisplayOptions {\n  skipAttributes?: string[]\n  attributes: ObjectAttribute[]\n}\n\nexport interface AttributeField {\n  attribute: ObjectAttribute\n  component: Component\n  value: unknown\n  link: Maybe<string>\n}\n\nconst attributesDeclarations = import.meta.glob<AttributeDeclaration>(\n  './attributes/Attribute*/index.ts',\n  { eager: true, import: 'default' },\n)\n\nconst definitionsByType = Object.values(attributesDeclarations).reduce(\n  (acc, declaration) => {\n    declaration.dataTypes.forEach((type) => {\n      acc[type] = declaration.component\n    })\n    return acc\n  },\n  {} as Record<string, Component>,\n)\n\nexport const useDisplayObjectAttribute = (\n  options: ObjectAttributeDisplayOptions,\n) => {\n  const attributesObject = computed<Dictionary<ObjectAttributeValue>>(() => {\n    return keyBy(options.object.objectAttributeValues || {}, 'attribute.name')\n  })\n\n  const field = computed<AttributeField>(() => {\n    const { attribute, object } = options\n\n    return {\n      attribute,\n      component: definitionsByType[attribute.dataType],\n      value: getValue(\n        attribute.name,\n        object,\n        attributesObject.value,\n        attribute,\n      ),\n      link: getLink(attribute.name, attributesObject.value),\n    }\n  })\n  return { field }\n}\n\nexport const useDisplayObjectAttributes = (\n  options: ObjectAttributesDisplayOptions,\n) => {\n  const attributesObject = computed<Dictionary<ObjectAttributeValue>>(() => {\n    return keyBy(options.object.objectAttributeValues || {}, 'attribute.name')\n  })\n\n  const fields = computed<AttributeField[]>(() => {\n    return options.attributes\n      .filter((attribute) => !attribute.isStatic)\n      .map((attribute) => ({\n        attribute,\n        component: definitionsByType[attribute.dataType],\n        value: getValue(\n          attribute.name,\n          options.object,\n          attributesObject.value,\n          attribute,\n        ),\n        link: getLink(attribute.name, attributesObject.value),\n      }))\n      .filter(({ attribute, value, component }) => {\n        if (!component) return false\n\n        if (isEmpty(value)) {\n          return false\n        }\n\n        return !options.skipAttributes?.includes(attribute.name)\n      })\n  })\n\n  return {\n    fields,\n  }\n}\n"],"names":["props","__props","body","computed","yes","no","_a","translate","__vite_glob_0_0","AttributeBoolean","__vite_glob_0_1","AttributeDate","primitiveValue","title","link","linktemplate","type","value","phoneify","__vite_glob_0_2","AttributeInput","groupEntity","EnumObjectManagerObjects","object","organizationEntity","ticketPriorityEntity","ticketStateEntity","userEntity","entityModules","__vite_glob_0_3","__vite_glob_0_4","entities","entitiesByName","keyBy","useEntity","entity","getValue","key","attributesObject","attribute","entityName","belongsTo","camelize","entityObject","edgesToArray","item","isEmpty","getLink","name","translateOption","str","i18n","option","AttributeMultiSelect","AttributeRichtext","field","__vite_glob_0_5","AttributeSingleSelect","__vite_glob_0_6","AttributeTextarea","__vite_glob_0_7","AttributeTimeUnit","attributesDeclarations","definitionsByType","acc","declaration","useDisplayObjectAttribute","options","useDisplayObjectAttributes","component"],"mappings":"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"}