{"version":3,"file":"PasswordReset-Crd4Q103.js","sources":["../../../../../app/frontend/apps/desktop/pages/authentication/graphql/mutations/userPasswordResetSend.api.ts","../../../../../app/frontend/apps/desktop/pages/authentication/views/PasswordReset.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserPasswordResetSendDocument = gql`\n    mutation userPasswordResetSend($username: String!) {\n  userPasswordResetSend(username: $username) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserPasswordResetSendMutation(options: VueApolloComposable.UseMutationOptions<Types.UserPasswordResetSendMutation, Types.UserPasswordResetSendMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserPasswordResetSendMutation, Types.UserPasswordResetSendMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserPasswordResetSendMutation, Types.UserPasswordResetSendMutationVariables>(UserPasswordResetSendDocument, options);\n}\nexport type UserPasswordResetSendMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserPasswordResetSendMutation, Types.UserPasswordResetSendMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSchemaNode,\n  FormSubmitData,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport { EnumPublicLinksScreen } from '#shared/graphql/types.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonPublicLinks from '#desktop/components/CommonPublicLinks/CommonPublicLinks.vue'\nimport LayoutPublicPage from '#desktop/components/layout/LayoutPublicPage/LayoutPublicPage.vue'\n\nimport { useUserPasswordResetSendMutation } from '../graphql/mutations/userPasswordResetSend.api.ts'\n\ndefineOptions({\n  beforeRouteEnter(to) {\n    const application = useApplicationStore()\n    if (!application.config.user_lost_password) {\n      return to.redirectedFrom ? false : '/'\n    }\n    return true\n  },\n})\n\nconst router = useRouter()\n\ninterface FormValues {\n  login: string\n}\n\nconst formSchema: FormSchemaNode[] = [\n  {\n    type: 'text',\n    label: __('Username / Email'),\n    name: 'login',\n    required: true,\n  },\n]\n\nconst { form, isDisabled } = useForm()\n\nconst showSuccessScreen = ref(false)\nconst resetHandler = new MutationHandler(useUserPasswordResetSendMutation())\nconst { notify } = useNotifications()\n\nconst resetPassword = async (form: FormSubmitData<FormValues>) => {\n  try {\n    const result = await resetHandler.send({ username: form.login })\n    if (result?.userPasswordResetSend?.success) {\n      showSuccessScreen.value = true\n    }\n  } catch (error) {\n    if (error instanceof UserError) {\n      notify({\n        id: 'password-reset',\n        type: NotificationTypes.Error,\n        message: error.generalErrors[0],\n      })\n    }\n  }\n}\n\nconst resetForm = () => {\n  showSuccessScreen.value = false\n}\n\nconst goToLogin = () => {\n  router.replace('/login')\n}\n</script>\n\n<template>\n  <LayoutPublicPage\n    box-size=\"small\"\n    :title=\"\n      showSuccessScreen\n        ? __('The password reset request was successful.')\n        : __('Forgot your password?')\n    \"\n  >\n    <Form\n      v-if=\"!showSuccessScreen\"\n      id=\"password-reset\"\n      ref=\"form\"\n      form-class=\"mb-2.5\"\n      :schema=\"formSchema\"\n      @submit=\"resetPassword($event as FormSubmitData<FormValues>)\"\n    />\n    <section v-else>\n      <CommonLabel class=\"mb-5 text-center\">\n        {{ $t('Password reset instructions were sent to your email address.') }}\n      </CommonLabel>\n      <CommonLabel class=\"text-center\">\n        {{\n          $t(\n            \"If you don't receive instructions within a minute or two, check your email's spam and junk filters, or try resending your request.\",\n          )\n        }}\n      </CommonLabel>\n    </section>\n    <template #boxActions>\n      <CommonButton\n        variant=\"secondary\"\n        size=\"medium\"\n        :disabled=\"isDisabled\"\n        @click=\"goToLogin()\"\n      >\n        {{ $t('Cancel & Go Back') }}\n      </CommonButton>\n      <CommonButton\n        v-if=\"!showSuccessScreen\"\n        type=\"submit\"\n        variant=\"submit\"\n        size=\"medium\"\n        form=\"password-reset\"\n        :disabled=\"isDisabled\"\n      >\n        {{ $t('Submit') }}\n      </CommonButton>\n      <CommonButton v-else variant=\"submit\" size=\"medium\" @click=\"resetForm\">\n        {{ $t('Try again') }}\n      </CommonButton>\n    </template>\n    <template #bottomContent>\n      <CommonPublicLinks :screen=\"EnumPublicLinksScreen.PasswordReset\" />\n    </template>\n  </LayoutPublicPage>\n</template>\n"],"names":["UserPasswordResetSendDocument","gql","ErrorsFragmentDoc","useUserPasswordResetSendMutation","options","VueApolloComposable.useMutation","router","useRouter","formSchema","form","isDisabled","useForm","showSuccessScreen","ref","resetHandler","MutationHandler","notify","useNotifications","resetPassword","result","_a","error","UserError","NotificationTypes","resetForm","goToLogin"],"mappings":"+7CAQO,MAAMA,EAAgCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvCC,CAAiB,GACP,SAAAC,EAAiCC,EAAmR,GAAI,CAC/T,OAAAC,EAAmHL,EAA+BI,CAAO,CAClK,4ICeA,MAAME,EAASC,IAMTC,EAA+B,CACnC,CACE,KAAM,OACN,MAAO,GAAG,kBAAkB,EAC5B,KAAM,QACN,SAAU,EACZ,CAAA,EAGI,CAAE,KAAAC,EAAM,WAAAC,CAAW,EAAIC,EAAQ,EAE/BC,EAAoBC,EAAI,EAAK,EAC7BC,EAAe,IAAIC,EAAgBZ,EAAkC,CAAA,EACrE,CAAE,OAAAa,GAAWC,IAEbC,EAAgB,MAAOT,GAAqC,OAC5D,GAAA,CACI,MAAAU,EAAS,MAAML,EAAa,KAAK,CAAE,SAAUL,EAAK,MAAO,GAC3DW,EAAAD,GAAA,YAAAA,EAAQ,wBAAR,MAAAC,EAA+B,UACjCR,EAAkB,MAAQ,UAErBS,EAAO,CACVA,aAAiBC,GACZN,EAAA,CACL,GAAI,iBACJ,KAAMO,EAAkB,MACxB,QAASF,EAAM,cAAc,CAAC,CAAA,CAC/B,CAEL,CAAA,EAGIG,EAAY,IAAM,CACtBZ,EAAkB,MAAQ,EAAA,EAGtBa,EAAY,IAAM,CACtBnB,EAAO,QAAQ,QAAQ,CAAA"}