{"version":3,"file":"CommonTableSkeleton.vue_vue_type_script_setup_true_lang-DxqYsGJE.js","sources":["../../../../../app/frontend/apps/desktop/components/CommonTable/types.ts","../../../../../app/frontend/apps/desktop/components/CommonTable/HeaderResizeLine.vue","../../../../../app/frontend/apps/desktop/components/CommonTable/TableRowGroupBy.vue","../../../../../app/frontend/apps/desktop/components/CommonTable/CommonAdvancedTable.vue","../../../../../app/frontend/apps/desktop/components/CommonTable/Skeleton/CommonTableSkeleton.vue"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { Props as CommonLinkProps } from '#shared/components/CommonLink/CommonLink.vue'\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\nimport type {\n  EnumObjectManagerObjects,\n  EnumOrderDirection,\n} from '#shared/graphql/types.ts'\n\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\n\nimport type { Awaitable } from '@vueuse/shared'\n\nexport const MINIMUM_COLUMN_WIDTH = 50\nexport const MINIMUM_TABLE_WIDTH = 600\n\ntype TableColumnType = 'timestamp' | 'timestamp_absolute' | 'link'\n\ntype TableHeaderPreference = {\n  headerClass?: string\n  labelClass?: string\n  hideLabel?: boolean\n  truncate?: boolean\n  noResize?: boolean\n  displayWidth?: number\n  noSorting?: boolean\n}\n\ntype TableColumnPreference = {\n  /**\n   * @default 'left'\n   * */\n  alignContent?: 'center' | 'right' | 'left'\n}\n\nexport interface TableSimpleHeader<K = string>\n  extends TableHeaderPreference,\n    TableColumnPreference {\n  key: K\n  label: string\n  labelPlaceholder?: string[]\n  type?: TableColumnType\n  columnSeparator?: boolean\n  [key: string]: unknown\n}\n\nexport type TableItemLinkValue = Partial<CommonLinkProps> & { label: string }\n\nexport interface TableItem {\n  [key: string]: unknown | TableItemLinkValue\n  id: ID | number\n}\n\nexport interface TableAdvancedItem {\n  [key: string]: unknown\n  id: ID\n}\n\ninterface BaseTableProps {\n  actions?: MenuItem[]\n  caption: string\n  showCaption?: boolean\n}\n\nexport interface SimpleTableProps extends BaseTableProps {\n  items: TableItem[]\n  headers: TableSimpleHeader[]\n  onClickRow?: (tableItem: TableItem) => void\n  /**\n   * Used to set a default selected row\n   * Is not used for checkbox\n   * */\n  selectedRowId?: string\n  hasCheckboxColumn?: boolean\n}\n\nexport interface CellContentProps {\n  value?: string | number\n  isRowSelected?: boolean\n}\n\nexport interface TableAttribute {\n  name: string\n  label: string\n  labelPlaceholder?: string[]\n  headerPreferences: TableHeaderPreference\n  columnPreferences: TableColumnPreference & {\n    link?: Pick<CommonLinkProps, 'internal' | 'openInNewTab'> & {\n      getLink: (\n        item: TableAdvancedItem,\n        tableAttribute: TableAttribute,\n      ) => string\n    }\n  }\n  dataType: ObjectAttribute['dataType']\n  dataOption?: ObjectAttribute['dataOption']\n}\n\nexport interface AdvancedTableProps extends BaseTableProps {\n  items: TableAdvancedItem[]\n  headers: string[]\n  attributes?: TableAttribute[]\n  attributeExtensions?: Record<string, Partial<TableAttribute>>\n  object?: EnumObjectManagerObjects\n  /**\n   * Used to set a default selected row\n   * Is not used for checkbox\n   * */\n  selectedRowId?: string\n  hasCheckboxColumn?: boolean // TODO: rename this prop, related to bulk???\n\n  totalItems: number\n  maxItems?: number\n\n  onClickRow?: (tableItem: TableAdvancedItem) => void\n\n  reachedScrollTop?: boolean\n\n  onLoadMore?: () => Awaitable<void>\n\n  storageKeyId?: string\n\n  scrollContainer?: HTMLElement | null\n\n  groupBy?: string\n\n  orderBy?: string\n  orderDirection?: EnumOrderDirection\n\n  isSorting?: boolean\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n<script lang=\"ts\" setup>\nimport { useActiveElement, useEventListener } from '@vueuse/core'\nimport { computed, ref, useTemplateRef } from 'vue'\n\nimport { EnumTextDirection } from '#shared/graphql/types.ts'\nimport { useLocaleStore } from '#shared/stores/locale.ts'\nimport getUuid from '#shared/utils/getUuid.ts'\n\nimport { useResizeLine } from '#desktop/components/ResizeLine/useResizeLine.ts'\n\nimport { MINIMUM_COLUMN_WIDTH } from './types.ts'\n\nconst emit = defineEmits<{\n  resize: []\n  reset: []\n}>()\n\nconst resizeLine = useTemplateRef('resize-line')\n\nconst resizing = ref(false)\n\nconst currentHeader = computed(() => resizeLine.value?.parentElement)\n\nconst nextHeader = computed(\n  () =>\n    currentHeader.value?.nextElementSibling as HTMLElement | null | undefined,\n)\n\nconst currentHeaderWidth = ref(0)\nconst nextHeaderWidth = ref(0)\n\nconst setCurrentHeaderWidths = () => {\n  if (!currentHeader.value || !nextHeader.value) return\n\n  currentHeaderWidth.value = currentHeader.value.clientWidth\n  nextHeaderWidth.value = nextHeader.value.clientWidth\n}\n\nconst setHeaderWidths = (diff: number) => {\n  if (!currentHeader.value || !nextHeader.value) return\n\n  if (currentHeaderWidth.value + diff < MINIMUM_COLUMN_WIDTH)\n    diff = -(currentHeaderWidth.value - MINIMUM_COLUMN_WIDTH)\n\n  if (nextHeaderWidth.value - diff < MINIMUM_COLUMN_WIDTH)\n    diff = nextHeaderWidth.value - MINIMUM_COLUMN_WIDTH\n\n  currentHeader.value.style.width = `${currentHeaderWidth.value + diff}px`\n  nextHeader.value.style.width = `${nextHeaderWidth.value - diff}px`\n}\n\nconst activeElement = useActiveElement()\n\nconst handleKeyStroke = (e: KeyboardEvent, diff: number) => {\n  if (activeElement.value !== resizeLine.value) return\n\n  e.preventDefault()\n\n  setCurrentHeaderWidths()\n  setHeaderWidths(diff)\n  emit('resize')\n}\n\nconst resizeStartX = ref(0)\n\nconst { startResizing } = useResizeLine(\n  (positionX) => {\n    if (!currentHeader.value || !nextHeader.value) return\n\n    let diff = positionX - resizeStartX.value\n\n    if (useLocaleStore().localeData?.dir === EnumTextDirection.Rtl)\n      diff = resizeStartX.value - positionX\n\n    setHeaderWidths(diff)\n  },\n  resizeLine,\n  handleKeyStroke,\n  {\n    orientation: 'vertical',\n  },\n)\n\nconst addRemoveResizingListener = (event: 'mouseup' | 'touchend') => {\n  useEventListener(\n    event,\n    () => {\n      resizing.value = false\n      emit('resize')\n    },\n    { once: true },\n  )\n}\n\nconst handleMousedown = (event: MouseEvent) => {\n  resizing.value = true\n  resizeStartX.value = event.pageX\n\n  addRemoveResizingListener('mouseup')\n  setCurrentHeaderWidths()\n  startResizing(event)\n}\n\nconst handleTouchstart = (event: TouchEvent) => {\n  resizing.value = true\n\n  if (event.targetTouches[0]) resizeStartX.value = event.targetTouches[0].pageX\n  else\n    resizeStartX.value =\n      event.changedTouches[event.changedTouches.length - 1].pageX\n\n  addRemoveResizingListener('touchend')\n  setCurrentHeaderWidths()\n  startResizing(event)\n}\n\nconst handleDoubleClick = () => {\n  emit('reset')\n  resizeLine.value?.blur()\n}\n\nconst id = getUuid()\n</script>\n<template>\n  <button\n    ref=\"resize-line\"\n    v-tooltip=\"$t('Resize column')\"\n    :aria-describedby=\"id\"\n    tabindex=\"0\"\n    class=\"absolute end-0 top-1/2 h-5 w-1 -translate-y-2.5 cursor-col-resize! rounded-xs bg-neutral-100 hover:bg-blue-600 focus:outline-none focus-visible:bg-blue-800! dark:bg-gray-200 dark:hover:bg-blue-900\"\n    :class=\"{\n      '!bg-blue-800': resizing,\n    }\"\n    @mousedown=\"handleMousedown\"\n    @blur=\"resizing = false\"\n    @touchstart=\"handleTouchstart\"\n    @dblclick=\"handleDoubleClick\"\n  >\n    <span\n      :id=\"id\"\n      role=\"separator\"\n      class=\"invisible absolute -z-20\"\n      aria-orientation=\"horizontal\"\n      :aria-valuenow=\"currentHeader?.clientWidth\"\n      :aria-valuemin=\"MINIMUM_COLUMN_WIDTH\"\n    />\n  </button>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport ObjectAttributeContent from '#shared/components/ObjectAttributes/ObjectAttribute.vue'\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\n\nimport CommonDivider from '#desktop/components/CommonDivider/CommonDivider.vue'\n\nimport type { TableAttribute, TableItem } from './types'\n\nexport interface Props {\n  item: TableItem\n  attribute: TableAttribute\n  tableColumnLength: number\n  groupByValueIndex: number\n  groupByRowCounts: string[][] | undefined\n  remainingItems: number\n}\n\nconst props = defineProps<Props>()\n\nconst groupByRowCount = computed(() => {\n  return props.groupByRowCounts?.[props.groupByValueIndex].length\n})\n\nconst completedGroup = computed(() => {\n  if (props.remainingItems === 0) return true\n\n  return props.groupByValueIndex !== (props.groupByRowCounts?.length || 0) - 1\n})\n</script>\n\n<template>\n  <tr class=\"group\">\n    <td :colspan=\"tableColumnLength\">\n      <CommonDivider class=\"mt-2 mb-1 group-first:mt-0\" />\n      <div class=\"h-10 p-2.5\">\n        <CommonLabel\n          class=\"cursor-default truncate text-stone-200! dark:text-neutral-500!\"\n        >\n          <ObjectAttributeContent\n            mode=\"table\"\n            :attribute=\"attribute as unknown as ObjectAttribute\"\n            :object=\"item\"\n          />\n          <CommonBadge\n            class=\"ms-0.5 leading-snug font-bold\"\n            rounded\n            size=\"xs\"\n            variant=\"info\"\n          >\n            {{ groupByRowCount }}{{ completedGroup ? '' : '+' }}\n          </CommonBadge>\n        </CommonLabel>\n      </div>\n    </td>\n  </tr>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport {\n  useInfiniteScroll,\n  useLocalStorage,\n  whenever,\n  useEventListener,\n} from '@vueuse/core'\nimport { delay, merge } from 'lodash-es'\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  ref,\n  toRef,\n  useTemplateRef,\n  watch,\n  type Ref,\n} from 'vue'\nimport { onBeforeRouteUpdate } from 'vue-router'\n\nimport ObjectAttributeContent from '#shared/components/ObjectAttributes/ObjectAttribute.vue'\nimport { useObjectAttributes } from '#shared/entities/object-attributes/composables/useObjectAttributes.ts'\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport {\n  EnumObjectManagerObjects,\n  EnumOrderDirection,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonActionMenu from '#desktop/components/CommonActionMenu/CommonActionMenu.vue'\nimport CommonTableRowsSkeleton from '#desktop/components/CommonTable/Skeleton/CommonTableRowsSkeleton.vue'\nimport TableCaption from '#desktop/components/CommonTable/TableCaption.vue'\n\nimport { useTableCheckboxes } from './composables/useTableCheckboxes.ts'\nimport HeaderResizeLine from './HeaderResizeLine.vue'\nimport TableRow from './TableRow.vue'\nimport TableRowGroupBy from './TableRowGroupBy.vue'\nimport {\n  MINIMUM_COLUMN_WIDTH,\n  MINIMUM_TABLE_WIDTH,\n  type AdvancedTableProps,\n  type TableAdvancedItem,\n  type TableAttribute,\n} from './types.ts'\n\n// TODO: Clarify defaults.\nconst props = withDefaults(defineProps<AdvancedTableProps>(), {\n  maxItems: 1000,\n  reachedScrollTop: true,\n})\n\nconst emit = defineEmits<{\n  'click-row': [TableAdvancedItem]\n  sort: [string, EnumOrderDirection]\n}>()\n\n//  justify-* applies to the table header, text-* applies to the table cell.\nconst cellAlignmentClasses = {\n  right: 'justify-end text-end',\n  center: 'justify-center text-center',\n  left: 'justify-start text-left',\n}\n\nconst { attributesLookup: objectAttributesLookup } = props.object\n  ? useObjectAttributes(props.object)\n  : { attributesLookup: null }\n\nconst localAttributesLookup = computed(() => {\n  const lookup: Map<string, TableAttribute> = new Map()\n\n  props.attributes?.forEach((attribute) =>\n    lookup.set(attribute.name, attribute),\n  )\n\n  return lookup\n})\n\nconst findAttribute = <T,>(headerName: string, lookup: Map<string, T>) => {\n  return (\n    lookup?.get(headerName) ||\n    lookup?.get(`${headerName}_id`) ||\n    lookup?.get(`${headerName}_ids`)\n  )\n}\n\nconst localHeaders = computed(() => {\n  if (!props.groupBy) return props.headers\n\n  return props.headers.filter((header) => header !== props.groupBy)\n})\n\n// TODO: bulk checkbox fixed in template\n\nconst rightAlignedDataTypes = ['date', 'datetime', 'integer']\n\nconst tableAttributes = computed(() => {\n  const table: TableAttribute[] = []\n\n  // Process each header\n  localHeaders.value.forEach((headerName) => {\n    // Try to find matching attribute from both sources\n    const localAttribute = findAttribute(\n      headerName,\n      localAttributesLookup.value,\n    )\n    const objectAttribute = objectAttributesLookup?.value\n      ? findAttribute(headerName, objectAttributesLookup.value)\n      : null\n\n    // Skip if no attribute definition found\n    if (!localAttribute && !objectAttribute) return\n\n    const attributeExtension = props.attributeExtensions?.[headerName]\n\n    // Convert ObjectAttribute to TableAttribute structure if it exists\n    const mergedAttribute = objectAttribute\n      ? (merge(\n          {\n            name: objectAttribute.name,\n            label: objectAttribute.display,\n            dataType: objectAttribute.dataType,\n            dataOption: objectAttribute.dataOption || {},\n            headerPreferences: {},\n            columnPreferences: {},\n          },\n          attributeExtension,\n        ) as TableAttribute)\n      : (localAttribute as TableAttribute)\n\n    // Set default alignment for right-aligned data types.\n    if (\n      rightAlignedDataTypes.includes(mergedAttribute.dataType) &&\n      !mergedAttribute.columnPreferences.alignContent\n    ) {\n      mergedAttribute.columnPreferences.alignContent = 'right'\n    }\n\n    table.push(mergedAttribute)\n  })\n\n  return table\n})\n\nconst tableColumnLength = computed(() => {\n  return tableAttributes.value.length + (props.actions ? 1 : 0)\n})\n\nconst tableElement = useTemplateRef('table')\n\n// FIXME: Temporary initialization to avoid empty reference.\nlet headerWidthsRelativeStorage: Ref<Record<string, number>> = ref({})\n\nconst setHeaderWidths = (reset?: boolean) => {\n  if (!tableElement.value || !tableElement.value.parentElement) return\n\n  const availableWidth = tableElement.value.parentElement.clientWidth\n\n  const tableWidth =\n    availableWidth < MINIMUM_TABLE_WIDTH ? MINIMUM_TABLE_WIDTH : availableWidth\n\n  tableElement.value.style.width = `${tableWidth}px`\n\n  let shouldReset = reset\n\n  if (\n    tableAttributes.value.length !==\n    Object.keys(headerWidthsRelativeStorage.value).length\n  )\n    shouldReset = true\n\n  tableAttributes.value.forEach((tableAttribute) => {\n    const header = document.getElementById(`${tableAttribute.name}-header`)\n    if (!header) return\n\n    if (shouldReset) {\n      if (tableAttribute.headerPreferences.displayWidth)\n        header.style.width = `${tableAttribute.headerPreferences.displayWidth}px`\n      else header.style.width = '' // reflow\n      return\n    }\n\n    const headerWidthRelative =\n      headerWidthsRelativeStorage.value[tableAttribute.name]\n\n    const headerWidth =\n      tableAttribute.headerPreferences.displayWidth ??\n      Math.max(MINIMUM_COLUMN_WIDTH, headerWidthRelative * tableWidth)\n\n    header.style.width = `${headerWidth}px`\n  })\n}\n\nconst storeHeaderWidths = (headerWidths: Record<string, number>) => {\n  const headerWidthsRelative = Object.keys(headerWidths).reduce(\n    (headerWidthsRelative, headerName) => {\n      if (!tableElement.value) return headerWidthsRelative\n      headerWidthsRelative[headerName] =\n        headerWidths[headerName] / tableElement.value.clientWidth\n      return headerWidthsRelative\n    },\n    {} as Record<string, number>,\n  )\n\n  headerWidthsRelativeStorage.value = headerWidthsRelative\n}\n\nconst calculateHeaderWidths = () => {\n  const headerWidths: Record<string, number> = {}\n\n  tableAttributes.value.forEach((tableAttribute) => {\n    const headerWidth = document.getElementById(\n      `${tableAttribute.name}-header`,\n    )?.clientWidth\n\n    if (!headerWidth) return\n\n    headerWidths[tableAttribute.name] = headerWidth\n  })\n\n  storeHeaderWidths(headerWidths)\n}\n\nconst initializeHeaderWidths = (storageKeyId?: string) => {\n  if (storageKeyId) {\n    // FIXME: This is needed because storage key as a reactive value is unsupported.\n    // eslint-disable-next-line vue/no-ref-as-operand\n    headerWidthsRelativeStorage = useLocalStorage<Record<string, number>>(\n      storageKeyId,\n      {},\n    )\n  }\n\n  nextTick(() => {\n    setHeaderWidths()\n    delay(calculateHeaderWidths, 500)\n  })\n}\n\nconst resetHeaderWidths = () => {\n  setHeaderWidths(true)\n  delay(calculateHeaderWidths, 500)\n}\n\nwatch(() => props.storageKeyId, initializeHeaderWidths)\n\nwatch(localHeaders, () => {\n  initializeHeaderWidths()\n})\n\nonMounted(() => {\n  if (!props.storageKeyId) return\n  initializeHeaderWidths(props.storageKeyId)\n})\n\nuseEventListener('resize', () => initializeHeaderWidths())\n\nconst getTooltipText = (\n  item: TableAdvancedItem,\n  tableAttribute: TableAttribute,\n) => {\n  return tableAttribute.headerPreferences.truncate\n    ? item[tableAttribute.name]\n    : undefined\n}\n\nconst checkedRows = defineModel<Array<TableAdvancedItem>>('checkedRows', {\n  required: false,\n  default: (props: AdvancedTableProps) =>\n    props.items.filter((item) => item.checked), // is not reactive by default and making it reactive causes other issues.\n})\n\nconst {\n  hasCheckboxId,\n  allCheckboxRowsSelected,\n  selectAllRowCheckboxes,\n  handleCheckboxUpdate,\n} = useTableCheckboxes(checkedRows, toRef(props, 'items'))\n\nconst rowHandlers = computed(() =>\n  props.onClickRow || props.hasCheckboxColumn\n    ? {\n        'click-row': (event: TableAdvancedItem) => {\n          if (props.onClickRow) props.onClickRow(event)\n          if (props.hasCheckboxColumn) handleCheckboxUpdate(event)\n        },\n      }\n    : {},\n)\n\nconst localItems = computed(() => {\n  return props.items.slice(0, props.maxItems)\n})\n\nconst remainingItems = computed(() => {\n  const itemCount =\n    props.totalItems >= props.maxItems ? props.maxItems : props.totalItems\n  return itemCount - localItems.value.length\n})\n\nconst sort = (column: string) => {\n  const newDirection =\n    props.orderBy === column &&\n    props.orderDirection === EnumOrderDirection.Ascending\n      ? EnumOrderDirection.Descending\n      : EnumOrderDirection.Ascending\n\n  emit('sort', column, newDirection)\n}\n\nconst isSorted = (column: string) => props.orderBy === column\n\nconst sortIcon = computed(() =>\n  props.orderDirection === EnumOrderDirection.Ascending\n    ? 'arrow-up-short'\n    : 'arrow-down-short',\n)\n\nlet currentGroupByValueIndex = -1\n\nconst groupByAttribute = computed(() => {\n  if (!props.groupBy) return null\n\n  // Try to find matching attribute from both sources\n  const localAttribute = findAttribute(\n    props.groupBy,\n    localAttributesLookup.value,\n  )\n  const objectAttribute = objectAttributesLookup?.value\n    ? findAttribute(props.groupBy, objectAttributesLookup.value)\n    : null\n\n  return (localAttribute || objectAttribute) as TableAttribute\n})\nconst groupByAttributeItemName = computed(() => {\n  if (!groupByAttribute.value) return\n\n  return (\n    groupByAttribute.value.dataOption?.belongs_to || groupByAttribute.value.name\n  )\n})\n\nconst groupByRowCounts = computed(() => {\n  if (!groupByAttribute.value || !groupByAttributeItemName.value) return\n\n  const name = groupByAttributeItemName.value\n  const isRelation = Boolean(groupByAttribute.value.dataOption?.relation)\n\n  let groupByValueIndex = 0\n  let lastValue: string | number\n\n  return localItems.value.reduce((groupByRowIds: string[][], item) => {\n    const value = (\n      isRelation && item[name] ? (item[name] as ObjectLike).id : item[name]\n    ) as string | number\n\n    if (lastValue && value !== lastValue) {\n      groupByValueIndex += 1\n    }\n\n    groupByRowIds[groupByValueIndex] ||= []\n    groupByRowIds[groupByValueIndex].push(item.id)\n\n    lastValue = value\n\n    return groupByRowIds\n  }, [])\n})\n\nconst groupIndexByRowId = (groupIndex: number, rowId: string) =>\n  groupByRowCounts.value?.[groupIndex]?.findIndex((id) => id === rowId) || 0\n\nconst showGroupByRow = (item: TableAdvancedItem) => {\n  if (!groupByAttribute.value || !groupByRowCounts.value) return false\n\n  // Reset the current group by value when it's the first item again.\n  if (item.id === localItems.value[0].id) {\n    currentGroupByValueIndex = -1\n  }\n\n  const show = Boolean(\n    currentGroupByValueIndex === -1 ||\n      !groupByRowCounts.value[currentGroupByValueIndex].includes(item.id),\n  )\n\n  // Remember current group index, when it should be shown.\n  if (show) {\n    currentGroupByValueIndex += 1\n  }\n\n  return show\n}\n\nconst hasLoadedMore = ref(false)\n\nonBeforeRouteUpdate(() => {\n  hasLoadedMore.value = false\n})\n\nconst { isLoading } = useInfiniteScroll(\n  toRef(props, 'scrollContainer'),\n  async () => {\n    hasLoadedMore.value = true\n    await props.onLoadMore?.()\n  },\n  {\n    distance: 100,\n    canLoadMore: () => remainingItems.value > 0,\n    eventListenerOptions: {\n      passive: true,\n    },\n  },\n)\n\nwhenever(\n  isLoading,\n  () => {\n    hasLoadedMore.value = true\n  },\n  { once: true },\n)\n\nconst endOfListMessage = computed(() => {\n  if (!hasLoadedMore.value) return ''\n  if (remainingItems.value !== 0) return ''\n\n  return props.totalItems > props.maxItems\n    ? i18n.t(\n        'You reached the table limit of %s tickets (%s remaining).',\n        props.maxItems,\n        props.totalItems - localItems.value.length,\n      )\n    : i18n.t(\"You don't have more tickets to load.\")\n})\n\nconst getLinkColorClasses = (item: TableAdvancedItem) => {\n  if (props.object !== EnumObjectManagerObjects.Ticket) return ''\n\n  switch ((item as TicketById).priority?.uiColor) {\n    case 'high-priority':\n      return 'text-red-500 dark:text-red-500'\n    case 'low-priority':\n      return 'text-stone-200 dark:text-neutral-500'\n    default:\n      return ''\n  }\n}\n</script>\n\n<template>\n  <table v-bind=\"$attrs\" ref=\"table\" class=\"relative table-fixed pb-3\">\n    <TableCaption :show=\"showCaption\">{{ caption }}</TableCaption>\n\n    <thead\n      class=\"sticky top-0 z-10 bg-neutral-50 dark:bg-gray-500\"\n      :class=\"{ 'border-shadow-b': !reachedScrollTop }\"\n    >\n      <tr>\n        <th\n          v-for=\"(tableAttribute, index) in tableAttributes\"\n          :id=\"`${tableAttribute.name}-header`\"\n          :key=\"tableAttribute.name\"\n          class=\"relative h-10 p-2.5 text-xs\"\n          :class=\"[\n            tableAttribute.headerPreferences.headerClass,\n            cellAlignmentClasses[\n              tableAttribute.columnPreferences.alignContent ?? 'left'\n            ],\n          ]\"\n        >\n          <!-- TODO: Implement with bulk edit -->\n          <FormKit\n            v-if=\"hasCheckboxColumn && tableAttribute.name === 'checkbox'\"\n            name=\"checkbox-all-rows\"\n            :aria-label=\"\n              allCheckboxRowsSelected\n                ? $t('Deselect all entries')\n                : $t('Select all entries')\n            \"\n            type=\"checkbox\"\n            :model-value=\"allCheckboxRowsSelected\"\n            @update:model-value=\"selectAllRowCheckboxes\"\n          />\n\n          <template v-else>\n            <slot\n              :name=\"`column-header-${tableAttribute.name}`\"\n              :attribute=\"tableAttribute\"\n            >\n              <!-- eslint-disable vuejs-accessibility/no-static-element-interactions,vuejs-accessibility/mouse-events-have-key-events-->\n              <div\n                class=\"flex items-center gap-1\"\n                :class=\"[\n                  cellAlignmentClasses[\n                    tableAttribute.columnPreferences.alignContent || 'left'\n                  ],\n                  {\n                    'hover:cursor-pointer focus-visible:rounded-xs focus-visible:outline-1 focus-visible:outline-offset-2 focus-visible:outline-blue-800':\n                      !tableAttribute.headerPreferences.noSorting,\n                  },\n                ]\"\n                :role=\"\n                  tableAttribute.headerPreferences.noSorting\n                    ? undefined\n                    : 'button'\n                \"\n                :tabindex=\"\n                  tableAttribute.headerPreferences.noSorting ? undefined : '0'\n                \"\n                :aria-label=\"\n                  orderDirection === EnumOrderDirection.Ascending\n                    ? $t('Sorted ascending')\n                    : $t('Sorted descending')\n                \"\n                @click=\"\n                  tableAttribute.headerPreferences.noSorting\n                    ? undefined\n                    : sort(tableAttribute.name)\n                \"\n                @keydown.enter.prevent=\"\n                  tableAttribute.headerPreferences.noSorting\n                    ? undefined\n                    : sort(tableAttribute.name)\n                \"\n                @keydown.space.prevent=\"\n                  tableAttribute.headerPreferences.noSorting\n                    ? undefined\n                    : sort(tableAttribute.name)\n                \"\n              >\n                <CommonLabel\n                  class=\"relative block! truncate font-normal text-gray-100! select-none dark:text-neutral-400!\"\n                  :class=\"[\n                    tableAttribute.headerPreferences.labelClass,\n                    {\n                      'sr-only': tableAttribute.headerPreferences.hideLabel,\n                      'text-black! dark:text-white!': isSorted(\n                        tableAttribute.name,\n                      ),\n                      'hover:text-black! dark:hover:text-white!':\n                        !tableAttribute.headerPreferences.noSorting,\n                    },\n                  ]\"\n                  size=\"small\"\n                >\n                  {{\n                    $t(\n                      tableAttribute.label,\n                      ...(tableAttribute.labelPlaceholder || []),\n                    )\n                  }}\n                </CommonLabel>\n                <CommonIcon\n                  v-if=\"\n                    !tableAttribute.headerPreferences.noSorting &&\n                    isSorted(tableAttribute.name)\n                  \"\n                  class=\"shrink-0 text-blue-800\"\n                  :name=\"sortIcon\"\n                  size=\"xs\"\n                  decorative\n                />\n              </div>\n            </slot>\n          </template>\n\n          <slot\n            :name=\"`header-suffix-${tableAttribute.name}`\"\n            :item=\"tableAttribute\"\n          />\n\n          <HeaderResizeLine\n            v-if=\"\n              !tableAttribute.headerPreferences.noResize &&\n              index !== tableAttributes.length - 1\n            \"\n            @resize=\"calculateHeaderWidths\"\n            @reset=\"resetHeaderWidths\"\n          />\n        </th>\n        <th v-if=\"actions\" class=\"h-10 w-0 p-2.5 text-center\">\n          <CommonLabel\n            class=\"font-normal text-stone-200! dark:text-neutral-500!\"\n            size=\"small\"\n            >{{ $t('Actions') }}\n          </CommonLabel>\n        </th>\n      </tr>\n    </thead>\n    <!--    :TODO tabindex should be -1 re-evaluate when we work on bulk action with checkbox  -->\n    <!--    SR should not be able to focus the row but each action node  -->\n    <tbody\n      class=\"relative\"\n      :inert=\"isSorting\"\n      :class=\"{\n        'opacity-50 before:absolute before:z-20 before:h-full before:w-full':\n          isSorting,\n      }\"\n    >\n      <template v-for=\"item in localItems\" :key=\"item.id\">\n        <TableRowGroupBy\n          v-if=\"groupByAttribute && showGroupByRow(item)\"\n          :item=\"item\"\n          :attribute=\"groupByAttribute\"\n          :table-column-length=\"tableColumnLength\"\n          :group-by-value-index=\"currentGroupByValueIndex\"\n          :group-by-row-counts=\"groupByRowCounts\"\n          :remaining-items=\"remainingItems\"\n        />\n        <TableRow\n          :item=\"item\"\n          :is-row-selected=\"\n            !hasCheckboxColumn && item.id === props.selectedRowId\n          \"\n          tabindex=\"-1\"\n          :has-checkbox=\"hasCheckboxColumn\"\n          :no-auto-striping=\"!!groupByAttribute\"\n          :is-striped=\"\n            !!groupByAttribute &&\n            groupIndexByRowId(currentGroupByValueIndex, item.id) % 2 === 0\n          \"\n          v-on=\"rowHandlers\"\n        >\n          <template #default=\"{ isRowSelected }\">\n            <td\n              v-for=\"tableAttribute in tableAttributes\"\n              :key=\"`${item.id}-${tableAttribute.name}`\"\n              class=\"h-10 p-2.5 text-sm\"\n              :class=\"[\n                cellAlignmentClasses[\n                  tableAttribute.columnPreferences.alignContent || 'left'\n                ],\n                {\n                  'max-w-32 truncate text-black dark:text-white':\n                    tableAttribute.headerPreferences.truncate,\n                },\n              ]\"\n            >\n              <FormKit\n                v-if=\"hasCheckboxColumn && tableAttribute.name === 'checkbox'\"\n                :key=\"`checkbox-${item.id}-${tableAttribute.name}`\"\n                :name=\"`checkbox-${item.id}`\"\n                :aria-label=\"\n                  hasCheckboxId(item.id)\n                    ? $t('Deselect this entry')\n                    : $t('Select this entry')\n                \"\n                type=\"checkbox\"\n                :alternative-background=\"true\"\n                :classes=\"{\n                  decorator:\n                    'group-active:formkit-checked:border-white group-hover:dark:border-white group-hover:group-active:border-white group-hover:group-active:peer-hover:border-white group-hover:formkit-checked:border-black group-hover:dark:formkit-checked:border-white group-hover:dark:peer-hover:border-white  ltr:group-hover:dark:group-hover:peer-hover:formkit-checked:border-white ltr:group-hover:peer-hover:dark:border-white rtl:group-hover:peer-hover:dark:border-white ltr:group-hover:peer-hover:border-black rtl:group-hover:peer-hover:border-black  group-hover:border-black',\n                  decoratorIcon:\n                    'group-active:formkit-checked:text-white group-hover:formkit-checked:text-black group-hover:formkit-checked:dark:text-white',\n                }\"\n                :disabled=\"!!item.disabled\"\n                :model-value=\"hasCheckboxId(item.id)\"\n                @click=\"handleCheckboxUpdate(item)\"\n                @keydown.enter=\"handleCheckboxUpdate(item)\"\n                @keydown.space=\"handleCheckboxUpdate(item)\"\n              />\n              <template v-else>\n                <slot\n                  :name=\"`column-cell-${tableAttribute.name}`\"\n                  :item=\"item\"\n                  :is-row-selected=\"isRowSelected\"\n                  :attribute=\"tableAttribute\"\n                >\n                  <CommonLink\n                    v-if=\"tableAttribute.columnPreferences.link\"\n                    v-tooltip.truncate=\"getTooltipText(item, tableAttribute)\"\n                    :link=\"\n                      tableAttribute.columnPreferences.link.getLink(\n                        item,\n                        tableAttribute,\n                      )\n                    \"\n                    :open-in-new-tab=\"\n                      tableAttribute.columnPreferences.link.openInNewTab\n                    \"\n                    :internal=\"tableAttribute.columnPreferences.link.internal\"\n                    :class=\"[\n                      {\n                        'text-black dark:text-white': isRowSelected,\n                      },\n                      getLinkColorClasses(item),\n                    ]\"\n                    class=\"block! truncate text-sm group-hover:text-black group-focus-visible:text-white group-active:text-white hover:no-underline! group-hover:dark:text-white\"\n                    @click.stop\n                    @keydown.stop\n                  >\n                    <ObjectAttributeContent\n                      mode=\"table\"\n                      :attribute=\"tableAttribute as unknown as ObjectAttribute\"\n                      :object=\"item\"\n                    />\n                  </CommonLink>\n                  <CommonLabel\n                    v-else\n                    v-tooltip.truncate=\"getTooltipText(item, tableAttribute)\"\n                    class=\"block! truncate text-gray-100! group-hover:text-black! group-focus-visible:text-white! group-active:text-white! dark:text-neutral-400! group-hover:dark:text-white!\"\n                    :class=\"[\n                      {\n                        'text-black! dark:text-white!': isRowSelected,\n                      },\n                    ]\"\n                  >\n                    <ObjectAttributeContent\n                      mode=\"table\"\n                      :attribute=\"tableAttribute as unknown as ObjectAttribute\"\n                      :object=\"item\"\n                    />\n                  </CommonLabel>\n                </slot>\n\n                <slot\n                  :name=\"`item-suffix-${tableAttribute.name}`\"\n                  :item=\"item\"\n                />\n              </template>\n            </td>\n            <td v-if=\"actions\" class=\"h-10 p-2.5 text-center\">\n              <slot name=\"actions\" v-bind=\"{ actions, item }\">\n                <CommonActionMenu\n                  class=\"flex! items-center justify-center\"\n                  :actions=\"actions\"\n                  :entity=\"item\"\n                  button-size=\"medium\"\n                />\n              </slot>\n            </td>\n          </template>\n        </TableRow>\n      </template>\n\n      <Transition leave-active-class=\"absolute\">\n        <div\n          v-if=\"isLoading\"\n          :class=\"{ 'pt-10': localItems.length % 2 !== 0 }\"\n          class=\"absolute w-full pb-4\"\n        >\n          <CommonTableRowsSkeleton :rows=\"3\" />\n        </div>\n      </Transition>\n    </tbody>\n  </table>\n  <CommonLabel\n    v-if=\"endOfListMessage\"\n    class=\"py-2.5 text-stone-200! dark:text-neutral-500!\"\n    size=\"small\"\n  >\n    {{ endOfListMessage }}\n  </CommonLabel>\n</template>\n\n<style scoped>\n[data-theme='dark'] .border-shadow-b {\n  box-shadow: 0 1px 0 0 var(--color-gray-900);\n}\n\n.border-shadow-b {\n  box-shadow: 0 1px 0 0 var(--color-neutral-100);\n}\n</style>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport CommonSkeleton from '#desktop/components/CommonSkeleton/CommonSkeleton.vue'\nimport CommonTableRowsSkeleton from '#desktop/components/CommonTable/Skeleton/CommonTableRowsSkeleton.vue'\n\ninterface Props {\n  rows?: number\n}\n\ndefineProps<Props>()\n\nconst headerClasses = {\n  1: 'w-5 flex-shrink-0',\n  2: 'w-36',\n  3: 'w-5',\n  4: 'w-24',\n  5: 'w-16',\n  6: 'w-20',\n  7: 'w-32',\n}\n</script>\n\n<template>\n  <div>\n    <div class=\"flex justify-between gap-3 px-2.5 py-3\">\n      <CommonSkeleton\n        v-for=\"n in 7\"\n        :key=\"n\"\n        :style=\"{ 'animation-delay': `${n * 0.1}s` }\"\n        class=\"h-3\"\n        :class=\"headerClasses[n as keyof typeof headerClasses]\"\n      />\n    </div>\n    <CommonTableRowsSkeleton :rows=\"rows || 10\" />\n  </div>\n</template>\n"],"names":["MINIMUM_COLUMN_WIDTH","MINIMUM_TABLE_WIDTH","emit","__emit","resizeLine","useTemplateRef","resizing","ref","currentHeader","computed","_a","nextHeader","currentHeaderWidth","nextHeaderWidth","setCurrentHeaderWidths","setHeaderWidths","diff","activeElement","useActiveElement","handleKeyStroke","e","resizeStartX","startResizing","useResizeLine","positionX","useLocaleStore","EnumTextDirection","addRemoveResizingListener","event","useEventListener","handleMousedown","handleTouchstart","handleDoubleClick","id","getUuid","props","__props","groupByRowCount","completedGroup","cellAlignmentClasses","objectAttributesLookup","useObjectAttributes","localAttributesLookup","lookup","attribute","findAttribute","headerName","localHeaders","header","rightAlignedDataTypes","tableAttributes","table","localAttribute","objectAttribute","attributeExtension","mergedAttribute","merge","tableColumnLength","tableElement","headerWidthsRelativeStorage","reset","availableWidth","tableWidth","shouldReset","tableAttribute","headerWidthRelative","headerWidth","storeHeaderWidths","headerWidths","headerWidthsRelative","calculateHeaderWidths","initializeHeaderWidths","storageKeyId","useLocalStorage","nextTick","delay","resetHeaderWidths","watch","onMounted","getTooltipText","item","checkedRows","_useModel","hasCheckboxId","allCheckboxRowsSelected","selectAllRowCheckboxes","handleCheckboxUpdate","useTableCheckboxes","toRef","rowHandlers","localItems","remainingItems","sort","column","newDirection","EnumOrderDirection","isSorted","sortIcon","currentGroupByValueIndex","groupByAttribute","groupByAttributeItemName","groupByRowCounts","name","isRelation","groupByValueIndex","lastValue","groupByRowIds","value","groupIndexByRowId","groupIndex","rowId","_b","showGroupByRow","show","hasLoadedMore","onBeforeRouteUpdate","isLoading","useInfiniteScroll","whenever","endOfListMessage","i18n","getLinkColorClasses","EnumObjectManagerObjects","headerClasses"],"mappings":"2nCAaaA,EAAuB,GACvBC,GAAsB,iJCDnC,MAAMC,EAAOC,EAKPC,EAAaC,GAAe,aAAa,EAEzCC,EAAWC,EAAI,EAAK,EAEpBC,EAAgBC,EAAS,IAAA,OAAM,OAAAC,EAAAN,EAAW,QAAX,YAAAM,EAAkB,cAAa,EAE9DC,EAAaF,EACjB,IACE,OAAA,OAAAC,EAAAF,EAAc,QAAd,YAAAE,EAAqB,mBAAA,EAGnBE,EAAqBL,EAAI,CAAC,EAC1BM,EAAkBN,EAAI,CAAC,EAEvBO,EAAyB,IAAM,CAC/B,CAACN,EAAc,OAAS,CAACG,EAAW,QAErBC,EAAA,MAAQJ,EAAc,MAAM,YAC/BK,EAAA,MAAQF,EAAW,MAAM,YAAA,EAGrCI,EAAmBC,GAAiB,CACpC,CAACR,EAAc,OAAS,CAACG,EAAW,QAEpCC,EAAmB,MAAQI,EAAOhB,IAC7BgB,EAAA,EAAEJ,EAAmB,MAAQZ,IAElCa,EAAgB,MAAQG,EAAOhB,IACjCgB,EAAOH,EAAgB,MAAQb,GAEjCQ,EAAc,MAAM,MAAM,MAAQ,GAAGI,EAAmB,MAAQI,CAAI,KACpEL,EAAW,MAAM,MAAM,MAAQ,GAAGE,EAAgB,MAAQG,CAAI,KAAA,EAG1DC,GAAgBC,KAEhBC,EAAkB,CAACC,EAAkBJ,IAAiB,CACtDC,GAAc,QAAUb,EAAW,QAEvCgB,EAAE,eAAe,EAEMN,IACvBC,EAAgBC,CAAI,EACpBd,EAAK,QAAQ,EAAA,EAGTmB,EAAed,EAAI,CAAC,EAEpB,CAAE,cAAAe,GAAkBC,GACvBC,GAAc,OACb,GAAI,CAAChB,EAAc,OAAS,CAACG,EAAW,MAAO,OAE3C,IAAAK,EAAOQ,EAAYH,EAAa,QAEhCX,EAAAe,GAAe,EAAE,aAAjB,YAAAf,EAA6B,OAAQgB,GAAkB,MACzDV,EAAOK,EAAa,MAAQG,GAE9BT,EAAgBC,CAAI,CACtB,EACAZ,EACAe,EACA,CACE,YAAa,UACf,CAAA,EAGIQ,GAA6BC,GAAkC,CACnEC,GACED,EACA,IAAM,CACJtB,EAAS,MAAQ,GACjBJ,EAAK,QAAQ,CACf,EACA,CAAE,KAAM,EAAK,CAAA,CACf,EAGI4B,EAAmBF,GAAsB,CAC7CtB,EAAS,MAAQ,GACjBe,EAAa,MAAQO,EAAM,MAE3BD,GAA0B,SAAS,EACZb,IACvBQ,EAAcM,CAAK,CAAA,EAGfG,EAAoBH,GAAsB,CAC9CtB,EAAS,MAAQ,GAEbsB,EAAM,cAAc,CAAC,IAAgB,MAAQA,EAAM,cAAc,CAAC,EAAE,MAEtEP,EAAa,MACXO,EAAM,eAAeA,EAAM,eAAe,OAAS,CAAC,EAAE,MAE1DD,GAA0B,UAAU,EACbb,IACvBQ,EAAcM,CAAK,CAAA,EAGfI,GAAoB,IAAM,OAC9B9B,EAAK,OAAO,GACZQ,EAAAN,EAAW,QAAX,MAAAM,EAAkB,MAAK,EAGnBuB,EAAKC,m3BCrGX,MAAMC,EAAQC,EAERC,EAAkB5B,EAAS,IAAM,OACrC,OAAOC,EAAAyB,EAAM,mBAAN,YAAAzB,EAAyByB,EAAM,mBAAmB,MAAA,CAC1D,EAEKG,EAAiB7B,EAAS,IAAM,OAChC,OAAA0B,EAAM,iBAAmB,EAAU,GAEhCA,EAAM,uBAAuBzB,EAAAyB,EAAM,mBAAN,YAAAzB,EAAwB,SAAU,GAAK,CAAA,CAC5E,svCCmBD,MAAMyB,EAAQC,EAKRlC,EAAOC,EAMPoC,EAAuB,CAC3B,MAAO,uBACP,OAAQ,6BACR,KAAM,yBAAA,EAGF,CAAE,iBAAkBC,CAAuB,EAAIL,EAAM,OACvDM,GAAoBN,EAAM,MAAM,EAChC,CAAE,iBAAkB,IAAK,EAEvBO,EAAwBjC,EAAS,IAAM,OACrC,MAAAkC,MAA0C,IAEhD,OAAAjC,EAAAyB,EAAM,aAAN,MAAAzB,EAAkB,QAASkC,GACzBD,EAAO,IAAIC,EAAU,KAAMA,CAAS,GAG/BD,CAAA,CACR,EAEKE,EAAgB,CAAKC,EAAoBH,KAE3CA,GAAA,YAAAA,EAAQ,IAAIG,MACZH,GAAA,YAAAA,EAAQ,IAAI,GAAGG,CAAU,UACzBH,GAAA,YAAAA,EAAQ,IAAI,GAAGG,CAAU,SAIvBC,EAAetC,EAAS,IACvB0B,EAAM,QAEJA,EAAM,QAAQ,OAAQa,GAAWA,IAAWb,EAAM,OAAO,EAFrCA,EAAM,OAGlC,EAIKc,EAAwB,CAAC,OAAQ,WAAY,SAAS,EAEtDC,EAAkBzC,EAAS,IAAM,CACrC,MAAM0C,EAA0B,CAAA,EAGnB,OAAAJ,EAAA,MAAM,QAASD,GAAe,OAEzC,MAAMM,EAAiBP,EACrBC,EACAJ,EAAsB,KAAA,EAElBW,EAAkBb,GAAA,MAAAA,EAAwB,MAC5CK,EAAcC,EAAYN,EAAuB,KAAK,EACtD,KAGA,GAAA,CAACY,GAAkB,CAACC,EAAiB,OAEnC,MAAAC,GAAqB5C,EAAAyB,EAAM,sBAAN,YAAAzB,EAA4BoC,GAGjDS,EAAkBF,EACnBG,GACC,CACE,KAAMH,EAAgB,KACtB,MAAOA,EAAgB,QACvB,SAAUA,EAAgB,SAC1B,WAAYA,EAAgB,YAAc,CAAC,EAC3C,kBAAmB,CAAC,EACpB,kBAAmB,CAAC,CACtB,EACAC,CAED,EAAAF,EAIHH,EAAsB,SAASM,EAAgB,QAAQ,GACvD,CAACA,EAAgB,kBAAkB,eAEnCA,EAAgB,kBAAkB,aAAe,SAGnDJ,EAAM,KAAKI,CAAe,CAAA,CAC3B,EAEMJ,CAAA,CACR,EAEKM,GAAoBhD,EAAS,IAC1ByC,EAAgB,MAAM,QAAUf,EAAM,QAAU,EAAI,EAC5D,EAEKuB,EAAerD,GAAe,OAAO,EAGvC,IAAAsD,EAA2DpD,EAAI,CAAA,CAAE,EAE/D,MAAAQ,EAAmB6C,GAAoB,CAC3C,GAAI,CAACF,EAAa,OAAS,CAACA,EAAa,MAAM,cAAe,OAExD,MAAAG,EAAiBH,EAAa,MAAM,cAAc,YAElDI,EACJD,EAAiB5D,GAAsBA,GAAsB4D,EAE/DH,EAAa,MAAM,MAAM,MAAQ,GAAGI,CAAU,KAE9C,IAAIC,EAAcH,EAGhBV,EAAgB,MAAM,SACtB,OAAO,KAAKS,EAA4B,KAAK,EAAE,SAEjCI,EAAA,IAEAb,EAAA,MAAM,QAASc,GAAmB,CAChD,MAAMhB,EAAS,SAAS,eAAe,GAAGgB,EAAe,IAAI,SAAS,EACtE,GAAI,CAAChB,EAAQ,OAEb,GAAIe,EAAa,CACXC,EAAe,kBAAkB,aACnChB,EAAO,MAAM,MAAQ,GAAGgB,EAAe,kBAAkB,YAAY,KAClEhB,EAAO,MAAM,MAAQ,GAC1B,MACF,CAEA,MAAMiB,EACJN,EAA4B,MAAMK,EAAe,IAAI,EAEjDE,EACJF,EAAe,kBAAkB,cACjC,KAAK,IAAIhE,EAAsBiE,EAAsBH,CAAU,EAE1Dd,EAAA,MAAM,MAAQ,GAAGkB,CAAW,IAAA,CACpC,CAAA,EAGGC,GAAqBC,GAAyC,CAClE,MAAMC,EAAuB,OAAO,KAAKD,CAAY,EAAE,OACrD,CAACC,EAAsBvB,KAChBY,EAAa,QAClBW,EAAqBvB,CAAU,EAC7BsB,EAAatB,CAAU,EAAIY,EAAa,MAAM,aACzCW,GAET,CAAC,CAAA,EAGHV,EAA4B,MAAQU,CAAA,EAGhCC,EAAwB,IAAM,CAClC,MAAMF,EAAuC,CAAA,EAE7BlB,EAAA,MAAM,QAASc,GAAmB,OAChD,MAAME,GAAcxD,EAAA,SAAS,eAC3B,GAAGsD,EAAe,IAAI,SACrB,IAFiB,YAAAtD,EAEjB,YAEEwD,IAEQE,EAAAJ,EAAe,IAAI,EAAIE,EAAA,CACrC,EAEDC,GAAkBC,CAAY,CAAA,EAG1BG,EAA0BC,GAA0B,CACpDA,IAG4Bb,EAAAc,GAC5BD,EACA,CAAC,CAAA,GAILE,GAAS,IAAM,CACG3D,IAChB4D,GAAML,EAAuB,GAAG,CAAA,CACjC,CAAA,EAGGM,GAAoB,IAAM,CAC9B7D,EAAgB,EAAI,EACpB4D,GAAML,EAAuB,GAAG,CAAA,EAG5BO,GAAA,IAAM1C,EAAM,aAAcoC,CAAsB,EAEtDM,GAAM9B,EAAc,IAAM,CACDwB,GAAA,CACxB,EAEDO,GAAU,IAAM,CACT3C,EAAM,cACXoC,EAAuBpC,EAAM,YAAY,CAAA,CAC1C,EAEgBN,GAAA,SAAU,IAAM0C,EAAA,CAAwB,EAEnD,MAAAQ,EAAiB,CACrBC,EACAhB,IAEOA,EAAe,kBAAkB,SACpCgB,EAAKhB,EAAe,IAAI,EACxB,OAGAiB,EAAcC,GAAqC9C,EAAC,aAIzD,EAEK,CACJ,cAAA+C,EACA,wBAAAC,EACA,uBAAAC,GACA,qBAAAC,CAAA,EACEC,GAAmBN,EAAaO,GAAMrD,EAAO,OAAO,CAAC,EAEnDsD,GAAchF,EAAS,IAC3B0B,EAAM,YAAcA,EAAM,kBACtB,CACE,YAAcP,GAA6B,CACrCO,EAAM,YAAkBA,EAAA,WAAWP,CAAK,EACxCO,EAAM,mBAAmBmD,EAAqB1D,CAAK,CACzD,CAAA,EAEF,CAAC,CAAA,EAGD8D,EAAajF,EAAS,IACnB0B,EAAM,MAAM,MAAM,EAAGA,EAAM,QAAQ,CAC3C,EAEKwD,GAAiBlF,EAAS,KAE5B0B,EAAM,YAAcA,EAAM,SAAWA,EAAM,SAAWA,EAAM,YAC3CuD,EAAW,MAAM,MACrC,EAEKE,GAAQC,GAAmB,CACzB,MAAAC,EACJ3D,EAAM,UAAY0D,GAClB1D,EAAM,iBAAmB4D,EAAmB,UACxCA,EAAmB,WACnBA,EAAmB,UAEpB7F,EAAA,OAAQ2F,EAAQC,CAAY,CAAA,EAG7BE,GAAYH,GAAmB1D,EAAM,UAAY0D,EAEjDI,GAAWxF,EAAS,IACxB0B,EAAM,iBAAmB4D,EAAmB,UACxC,iBACA,kBAAA,EAGN,IAAIG,EAA2B,GAEzB,MAAAC,EAAmB1F,EAAS,IAAM,CAClC,GAAA,CAAC0B,EAAM,QAAgB,OAAA,KAG3B,MAAMiB,EAAiBP,EACrBV,EAAM,QACNO,EAAsB,KAAA,EAElBW,EAAkBb,GAAA,MAAAA,EAAwB,MAC5CK,EAAcV,EAAM,QAASK,EAAuB,KAAK,EACzD,KAEJ,OAAQY,GAAkBC,CAAA,CAC3B,EACK+C,GAA2B3F,EAAS,IAAM,OAC1C,GAAC0F,EAAiB,MAEtB,QACEzF,EAAAyF,EAAiB,MAAM,aAAvB,YAAAzF,EAAmC,aAAcyF,EAAiB,MAAM,IAAA,CAE3E,EAEKE,GAAmB5F,EAAS,IAAM,OACtC,GAAI,CAAC0F,EAAiB,OAAS,CAACC,GAAyB,MAAO,OAEhE,MAAME,EAAOF,GAAyB,MAChCG,EAAa,IAAQ7F,EAAAyF,EAAiB,MAAM,aAAvB,MAAAzF,EAAmC,UAE9D,IAAI8F,EAAoB,EACpBC,EAEJ,OAAOf,EAAW,MAAM,OAAO,CAACgB,EAA2B1B,IAAS,CAC5D,MAAA2B,EACJJ,GAAcvB,EAAKsB,CAAI,EAAKtB,EAAKsB,CAAI,EAAiB,GAAKtB,EAAKsB,CAAI,EAGlE,OAAAG,GAAaE,IAAUF,IACJD,GAAA,GAGvBE,EAAAF,CAAA,IAAAE,EAAAF,CAAA,EAAqC,CAAC,GACtCE,EAAcF,CAAiB,EAAE,KAAKxB,EAAK,EAAE,EAEjCyB,EAAAE,EAELD,CACT,EAAG,CAAE,CAAA,CAAA,CACN,EAEKE,GAAoB,CAACC,EAAoBC,IAC7C,SAAA,QAAAC,GAAArG,EAAA2F,GAAiB,QAAjB,YAAA3F,EAAyBmG,KAAzB,YAAAE,EAAsC,UAAW9E,GAAOA,IAAO6E,KAAU,GAErEE,GAAkBhC,GAA4B,CAClD,GAAI,CAACmB,EAAiB,OAAS,CAACE,GAAiB,MAAc,MAAA,GAG3DrB,EAAK,KAAOU,EAAW,MAAM,CAAC,EAAE,KACPQ,EAAA,IAG7B,MAAMe,EACJf,IAA6B,IAC3B,CAACG,GAAiB,MAAMH,CAAwB,EAAE,SAASlB,EAAK,EAAE,EAItE,OAAIiC,IAC0Bf,GAAA,GAGvBe,CAAA,EAGHC,GAAgB3G,EAAI,EAAK,EAE/B4G,GAAoB,IAAM,CACxBD,GAAc,MAAQ,EAAA,CACvB,EAEK,KAAA,CAAE,UAAAE,IAAcC,GACpB7B,GAAMrD,EAAO,iBAAiB,EAC9B,SAAY,OACV+E,GAAc,MAAQ,GACtB,OAAMxG,EAAAyB,EAAM,aAAN,YAAAzB,EAAA,KAAAyB,GACR,EACA,CACE,SAAU,IACV,YAAa,IAAMwD,GAAe,MAAQ,EAC1C,qBAAsB,CACpB,QAAS,EACX,CACF,CAAA,EAGF2B,GACEF,GACA,IAAM,CACJF,GAAc,MAAQ,EACxB,EACA,CAAE,KAAM,EAAK,CAAA,EAGT,MAAAK,GAAmB9G,EAAS,IAC5B,CAACyG,GAAc,OACfvB,GAAe,QAAU,EAAU,GAEhCxD,EAAM,WAAaA,EAAM,SAC5BqF,GAAK,EACH,4DACArF,EAAM,SACNA,EAAM,WAAauD,EAAW,MAAM,MAAA,EAEtC8B,GAAK,EAAE,sCAAsC,CAClD,EAEKC,GAAuBzC,GAA4B,OACvD,GAAI7C,EAAM,SAAWuF,GAAyB,OAAe,MAAA,GAEpD,QAAAhH,EAAAsE,EAAoB,WAApB,YAAAtE,EAA8B,QAAS,CAC9C,IAAK,gBACI,MAAA,iCACT,IAAK,eACI,MAAA,uCACT,QACS,MAAA,EACX,CAAA,2kNCpbF,MAAMiH,EAAgB,CACpB,EAAG,oBACH,EAAG,OACH,EAAG,MACH,EAAG,OACH,EAAG,OACH,EAAG,OACH,EAAG,MAAA"}