{"version":3,"file":"useTicketCreate-DQOD5AnJ.js","sources":["../../../../../app/frontend/shared/composables/form/useCheckBodyAttachmentReference.ts","../../../../../app/frontend/shared/entities/ticket/graphql/mutations/create.api.ts","../../../../../app/frontend/shared/entities/ticket/composables/useTicketCreate.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { FileUploaded } from '#shared/components/Form/fields/FieldFile/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport { domFrom } from '#shared/utils/dom.ts'\n\nimport { useConfirmation } from '../useConfirmation.ts'\n\nconst referenceMatchwords = __('attachment,attached,enclosed,enclosure')\n\nconst removeQuotingFromBody = (body: string) => {\n  const dom = domFrom(body)\n\n  // Remove blockquotes, signatures and images\n  // To not detect matchwords which are not part of the user-written article\n  dom\n    .querySelectorAll('blockquote, img, div[data-signature=\"true\"]')\n    .forEach((elem) => elem.remove())\n\n  // Return the modified HTML content as a string.\n  return dom.innerHTML\n}\n\nconst bodyAttachmentReferenceMatchwordExists = (body: string) => {\n  const cleanBody = removeQuotingFromBody(body)\n\n  const matchwords = referenceMatchwords.split(',')\n  const translatedMatchwords = i18n.t(referenceMatchwords).split(',')\n\n  return matchwords.concat(translatedMatchwords).some((word) => {\n    const findWord = new RegExp(`\\\\b${word}\\\\b`, 'i')\n    return findWord.test(cleanBody)\n  })\n}\n\nexport const useCheckBodyAttachmentReference = () => {\n  const { waitForConfirmation } = useConfirmation()\n\n  const missingBodyAttachmentReference = (\n    body: string,\n    files?: FileUploaded[],\n  ) => {\n    if (!body) return false\n    if (files && files.length > 0) return false\n\n    return bodyAttachmentReferenceMatchwordExists(body)\n  }\n\n  const bodyAttachmentReferenceConfirmation = async () => {\n    const confirmed = await waitForConfirmation(\n      __('Did you plan to include attachments with this message?'),\n      {\n        buttonLabel: __('Yes, add attachments now'),\n        cancelLabel: __('No, thanks'),\n      },\n    )\n\n    return confirmed\n  }\n\n  return {\n    missingBodyAttachmentReference,\n    bodyAttachmentReferenceConfirmation,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketAttributesFragmentDoc } from '../fragments/ticketAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketCreateDocument = gql`\n    mutation ticketCreate($input: TicketCreateInput!) {\n  ticketCreate(input: $input) {\n    ticket {\n      ...ticketAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${TicketAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useTicketCreateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketCreateMutation, Types.TicketCreateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketCreateMutation, Types.TicketCreateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketCreateMutation, Types.TicketCreateMutationVariables>(TicketCreateDocument, options);\n}\nexport type TicketCreateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketCreateMutation, Types.TicketCreateMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport { populateEditorNewLines } from '#shared/components/Form/fields/FieldEditor/utils.ts'\nimport type { FormRef, FormSubmitData } from '#shared/components/Form/types.ts'\nimport { setErrors } from '#shared/components/Form/utils.ts'\nimport { useCheckBodyAttachmentReference } from '#shared/composables/form/useCheckBodyAttachmentReference.ts'\nimport { useObjectAttributeFormData } from '#shared/entities/object-attributes/composables/useObjectAttributeFormData.ts'\nimport { useObjectAttributes } from '#shared/entities/object-attributes/composables/useObjectAttributes.ts'\nimport { ticketCreateArticleType } from '#shared/entities/ticket/composables/useTicketCreateArticleType.ts'\nimport { useTicketCreateMutation } from '#shared/entities/ticket/graphql/mutations/create.api.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport {\n  EnumObjectManagerObjects,\n  type TicketCreateInput,\n} from '#shared/graphql/types.ts'\nimport { isGraphQLId, convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport { GraphQLErrorTypes } from '#shared/types/error.ts'\nimport { convertFilesToAttachmentInput } from '#shared/utils/files.ts'\n\nimport { useTicketCreateView } from './useTicketCreateView.ts'\n\nimport type { TicketFormData } from '../types.ts'\nimport type { ApolloError } from '@apollo/client/core'\nimport type { Ref } from 'vue'\n\nexport const useTicketCreate = (\n  form: Ref<FormRef | undefined>,\n  redirectAfterCreate: (internalId?: number) => void,\n) => {\n  const { isTicketCustomer } = useTicketCreateView()\n\n  const { notify } = useNotifications()\n\n  const notifySuccess = () => {\n    notify({\n      id: 'ticket-create-success',\n      type: NotificationTypes.Success,\n      message: __('Ticket has been created successfully.'),\n    })\n  }\n\n  const handleTicketCreateError = (error: UserError | ApolloError) => {\n    if ('graphQLErrors' in error) {\n      const graphQLErrors = error.graphQLErrors?.[0]\n\n      // Treat this as successful, because it happens when you create a ticket inside a group, where you only\n      // have create permission, but not view permission.\n      if (graphQLErrors?.extensions?.type === GraphQLErrorTypes.Forbidden) {\n        notifySuccess()\n\n        return () => redirectAfterCreate()\n      }\n\n      notify({\n        id: 'ticket-create-error',\n        message: __('Ticket could not be created.'),\n        type: NotificationTypes.Error,\n      })\n    } else {\n      if (error instanceof UserError && form.value?.formNode) {\n        setErrors(form.value?.formNode, error)\n        return\n      }\n\n      notify({\n        id: 'ticket-create-error',\n        message: error.generalErrors[0],\n        type: NotificationTypes.Error,\n      })\n    }\n  }\n\n  const ticketCreateMutation = new MutationHandler(\n    useTicketCreateMutation({}),\n    {\n      errorShowNotification: false,\n    },\n  )\n\n  const {\n    missingBodyAttachmentReference,\n    bodyAttachmentReferenceConfirmation,\n  } = useCheckBodyAttachmentReference()\n\n  const getCustomerVariable = (customerId: string) => {\n    return isGraphQLId(customerId) ? { id: customerId } : { email: customerId }\n  }\n\n  const createTicket = async (formData: FormSubmitData<TicketFormData>) => {\n    // Check for possible missing attached files and ask for confirmation.\n    // With return false, the form submit is stopped.\n    if (\n      missingBodyAttachmentReference(formData.body, formData.attachments) &&\n      (await bodyAttachmentReferenceConfirmation())\n    ) {\n      return false\n    }\n\n    const { attributesLookup: ticketObjectAttributesLookup } =\n      useObjectAttributes(EnumObjectManagerObjects.Ticket)\n\n    const { internalObjectAttributeValues, additionalObjectAttributeValues } =\n      useObjectAttributeFormData(ticketObjectAttributesLookup.value, formData)\n\n    // The customerId has an special handling, so we need to extract it from the internalObjectAttributeValues.\n    const { customerId, ...internalValues } = internalObjectAttributeValues\n\n    let sharedDraftId\n    if (formData.shared_draft_id) {\n      sharedDraftId = convertToGraphQLId(\n        'Ticket::SharedDraftStart',\n        formData.shared_draft_id as string | number,\n      )\n    }\n\n    const input = {\n      ...internalValues,\n      sharedDraftId,\n      customer: customerId\n        ? getCustomerVariable(customerId as string)\n        : undefined,\n      article: {\n        cc: formData.cc,\n        body: populateEditorNewLines(formData.body),\n        sender: isTicketCustomer.value\n          ? 'Customer'\n          : ticketCreateArticleType[formData.articleSenderType].sender,\n        type: isTicketCustomer.value\n          ? 'web'\n          : ticketCreateArticleType[formData.articleSenderType].type,\n        contentType: 'text/html',\n        security: formData.security,\n      },\n      objectAttributeValues: additionalObjectAttributeValues,\n    } as TicketCreateInput\n\n    if (formData.attachments && input.article && form.value?.formId) {\n      input.article.attachments = convertFilesToAttachmentInput(\n        form.value.formId,\n        formData.attachments,\n      )\n    }\n\n    if (formData.link_ticket_id) {\n      const linkObjectId = convertToGraphQLId(\n        'Ticket',\n        formData.link_ticket_id as string | number,\n      )\n\n      input.links = [\n        {\n          linkObjectId,\n          linkType: 'child',\n        },\n      ]\n    }\n\n    if (formData.externalReferences) {\n      input.externalReferences = formData.externalReferences\n    }\n\n    return ticketCreateMutation\n      .send({ input })\n      .then((result) => {\n        if (result?.ticketCreate?.ticket) {\n          notifySuccess()\n\n          return () => {\n            const ticket = result.ticketCreate?.ticket\n\n            redirectAfterCreate(\n              ticket?.policy.update ? ticket.internalId : undefined,\n            )\n          }\n        }\n        return null\n      })\n      .catch(handleTicketCreateError)\n  }\n\n  return {\n    createTicket,\n    isTicketCustomer,\n  }\n}\n"],"names":["referenceMatchwords","removeQuotingFromBody","body","dom","domFrom","elem","bodyAttachmentReferenceMatchwordExists","cleanBody","matchwords","translatedMatchwords","i18n","word","useCheckBodyAttachmentReference","waitForConfirmation","useConfirmation","files","TicketCreateDocument","gql","TicketAttributesFragmentDoc","ErrorsFragmentDoc","useTicketCreateMutation","options","VueApolloComposable.useMutation","useTicketCreate","form","redirectAfterCreate","isTicketCustomer","useTicketCreateView","notify","useNotifications","notifySuccess","NotificationTypes","handleTicketCreateError","error","graphQLErrors","_a","_b","GraphQLErrorTypes","UserError","_c","setErrors","_d","ticketCreateMutation","MutationHandler","missingBodyAttachmentReference","bodyAttachmentReferenceConfirmation","getCustomerVariable","customerId","isGraphQLId","formData","ticketObjectAttributesLookup","useObjectAttributes","EnumObjectManagerObjects","internalObjectAttributeValues","additionalObjectAttributeValues","useObjectAttributeFormData","internalValues","sharedDraftId","convertToGraphQLId","input","populateEditorNewLines","ticketCreateArticleType","convertFilesToAttachmentInput","linkObjectId","result","ticket"],"mappings":"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"}