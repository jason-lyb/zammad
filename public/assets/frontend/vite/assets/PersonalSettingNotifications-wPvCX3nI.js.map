{"version":3,"file":"PersonalSettingNotifications-wPvCX3nI.js","sources":["../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentNotificationPreferencesReset.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentNotificationPreferencesUpdate.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingNotifications.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserPersonalSettingsFragmentDoc } from '../../../../../../shared/graphql/fragments/userPersonalSettings.api';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentNotificationPreferencesResetDocument = gql`\n    mutation userCurrentNotificationPreferencesReset {\n  userCurrentNotificationPreferencesReset {\n    user {\n      ...userPersonalSettings\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${UserPersonalSettingsFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useUserCurrentNotificationPreferencesResetMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentNotificationPreferencesResetMutation, Types.UserCurrentNotificationPreferencesResetMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentNotificationPreferencesResetMutation, Types.UserCurrentNotificationPreferencesResetMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentNotificationPreferencesResetMutation, Types.UserCurrentNotificationPreferencesResetMutationVariables>(UserCurrentNotificationPreferencesResetDocument, options);\n}\nexport type UserCurrentNotificationPreferencesResetMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentNotificationPreferencesResetMutation, Types.UserCurrentNotificationPreferencesResetMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserPersonalSettingsFragmentDoc } from '../../../../../../shared/graphql/fragments/userPersonalSettings.api';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentNotificationPreferencesUpdateDocument = gql`\n    mutation userCurrentNotificationPreferencesUpdate($groupIds: [ID!], $matrix: UserNotificationMatrixInput!, $sound: UserNotificationSoundInput!) {\n  userCurrentNotificationPreferencesUpdate(\n    groupIds: $groupIds\n    matrix: $matrix\n    sound: $sound\n  ) {\n    user {\n      ...userPersonalSettings\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${UserPersonalSettingsFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useUserCurrentNotificationPreferencesUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentNotificationPreferencesUpdateMutation, Types.UserCurrentNotificationPreferencesUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentNotificationPreferencesUpdateMutation, Types.UserCurrentNotificationPreferencesUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentNotificationPreferencesUpdateMutation, Types.UserCurrentNotificationPreferencesUpdateMutationVariables>(UserCurrentNotificationPreferencesUpdateDocument, options);\n}\nexport type UserCurrentNotificationPreferencesUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentNotificationPreferencesUpdateMutation, Types.UserCurrentNotificationPreferencesUpdateMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { isEqual } from 'lodash-es'\nimport { storeToRefs } from 'pinia'\nimport { computed, ref, watch } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport { type FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { defineFormSchema } from '#shared/form/defineFormSchema.ts'\nimport {\n  EnumFormUpdaterId,\n  EnumNotificationSoundFile,\n  type UserNotificationMatrixInput,\n} from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\nimport type { UserData } from '#shared/types/store.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\nimport { useBreadcrumb } from '#desktop/pages/personal-setting/composables/useBreadcrumb.ts'\nimport { useUserCurrentNotificationPreferencesResetMutation } from '#desktop/pages/personal-setting/graphql/mutations/userCurrentNotificationPreferencesReset.api.ts'\nimport { useUserCurrentNotificationPreferencesUpdateMutation } from '#desktop/pages/personal-setting/graphql/mutations/userCurrentNotificationPreferencesUpdate.api.ts'\nimport type { NotificationFormData } from '#desktop/pages/personal-setting/types/notifications.ts'\n\nconst { breadcrumbItems } = useBreadcrumb(__('Notifications'))\n\nconst { user } = storeToRefs(useSessionStore())\n\nconst { notify } = useNotifications()\n\nconst { waitForConfirmation } = useConfirmation()\n\nconst loading = ref(false)\n\nconst { form, onChangedField, formReset, values, isDirty } = useForm()\n\nconst soundOptions = Object.keys(EnumNotificationSoundFile).map((sound) => ({\n  label: sound,\n  value: sound,\n}))\n\nconst schema = defineFormSchema([\n  {\n    type: 'notifications',\n    name: 'matrix',\n    label: __('Notification matrix'),\n    labelSrOnly: true,\n  },\n  {\n    type: 'select',\n    name: 'group_ids',\n    label: __('Limit notifications to specific groups'),\n    help: __('Affects only notifications for not assigned and all tickets.'),\n    props: {\n      clearable: true,\n      multiple: true,\n      noOptionsLabelTranslation: true,\n    },\n  },\n  {\n    type: 'select',\n    name: 'file',\n    label: __('Notification sound'),\n    props: {\n      options: soundOptions,\n    },\n  },\n  {\n    type: 'toggle',\n    name: 'enabled',\n    label: __('Play user interface sound effects'),\n    props: {\n      variants: { true: 'True', false: 'False' },\n    },\n  },\n])\n\nconst initialFormValues = computed<NotificationFormData>((oldValues) => {\n  const { notificationConfig = {}, notificationSound = {} } =\n    user.value?.personalSettings || {}\n\n  const values: NotificationFormData = {\n    group_ids: notificationConfig?.groupIds ?? [],\n    matrix: notificationConfig?.matrix || {},\n\n    // Default notification sound settings are not present on the user preferences.\n    file: notificationSound?.file ?? EnumNotificationSoundFile.Xylo,\n    enabled: notificationSound?.enabled ?? true,\n  }\n\n  if (oldValues && isEqual(values, oldValues)) return oldValues\n\n  return values\n})\n\nwatch(initialFormValues, (newValues) => {\n  // No reset needed when the form has already the correct state.\n  if (isEqual(values.value, newValues) && !isDirty.value) return\n\n  formReset({ values: newValues })\n})\n\nonChangedField('file', (fileName) => {\n  new Audio(`/assets/sounds/${fileName?.toString()}.mp3`)?.play()\n})\n\nconst onSubmit = async (form: FormSubmitData<NotificationFormData>) => {\n  loading.value = true\n\n  const notificationUpdateMutation = new MutationHandler(\n    useUserCurrentNotificationPreferencesUpdateMutation(),\n    {\n      errorNotificationMessage: __('Notification settings could not be saved.'),\n    },\n  )\n\n  return notificationUpdateMutation\n    .send({\n      matrix: form.matrix as UserNotificationMatrixInput,\n      groupIds:\n        form?.group_ids?.map((id) => convertToGraphQLId('Group', id)) || [],\n      sound: {\n        file: form.file as EnumNotificationSoundFile,\n        enabled: form.enabled,\n      },\n    })\n    .then((response) => {\n      if (response?.userCurrentNotificationPreferencesUpdate) {\n        notify({\n          id: 'notification-update-success',\n          type: NotificationTypes.Success,\n          message: __('Notification settings have been saved successfully.'),\n        })\n      }\n    })\n    .finally(() => {\n      loading.value = false\n    })\n}\n\nconst resetFormToDefaults = (\n  personalSettings: UserData['personalSettings'],\n) => {\n  form.value?.resetForm({\n    values: {\n      matrix: personalSettings?.notificationConfig?.matrix || {},\n    },\n  })\n}\n\nconst onResetToDefaultSettings = async () => {\n  const confirmed = await waitForConfirmation(\n    __('Are you sure? Your notifications settings will be reset to default.'),\n  )\n\n  if (!confirmed) return\n\n  loading.value = true\n\n  const notificationResetMutation = new MutationHandler(\n    useUserCurrentNotificationPreferencesResetMutation(),\n    {\n      errorNotificationMessage: __('Notification settings could not be reset.'),\n    },\n  )\n\n  return notificationResetMutation\n    .send()\n    .then((response) => {\n      const personalSettings =\n        response?.userCurrentNotificationPreferencesReset?.user\n          ?.personalSettings\n\n      if (!personalSettings) return\n\n      resetFormToDefaults(personalSettings)\n\n      notify({\n        id: 'notification-reset-success',\n        type: NotificationTypes.Success,\n        message: __('Notification settings have been reset to default.'),\n      })\n    })\n    .finally(() => {\n      loading.value = false\n    })\n}\n</script>\n\n<template>\n  <LayoutContent :breadcrumb-items=\"breadcrumbItems\" width=\"narrow\">\n    <div class=\"mb-4\">\n      <Form\n        id=\"notifications-form\"\n        ref=\"form\"\n        :schema=\"schema\"\n        :form-updater-id=\"EnumFormUpdaterId.FormUpdaterUpdaterUserNotifications\"\n        form-updater-initial-only\n        :initial-values=\"initialFormValues\"\n        @submit=\"onSubmit($event as FormSubmitData<NotificationFormData>)\"\n      >\n        <template #after-fields>\n          <div class=\"flex justify-end gap-2\">\n            <CommonButton\n              size=\"medium\"\n              variant=\"danger\"\n              :disabled=\"loading\"\n              @click=\"onResetToDefaultSettings\"\n            >\n              {{ $t('Reset to Default Settings') }}\n            </CommonButton>\n            <CommonButton\n              size=\"medium\"\n              type=\"submit\"\n              variant=\"submit\"\n              :disabled=\"loading\"\n            >\n              {{ $t('Save Notifications') }}\n            </CommonButton>\n          </div>\n        </template>\n      </Form>\n    </div>\n  </LayoutContent>\n</template>\n"],"names":["UserCurrentNotificationPreferencesResetDocument","gql","UserPersonalSettingsFragmentDoc","ErrorsFragmentDoc","useUserCurrentNotificationPreferencesResetMutation","options","VueApolloComposable.useMutation","UserCurrentNotificationPreferencesUpdateDocument","useUserCurrentNotificationPreferencesUpdateMutation","breadcrumbItems","useBreadcrumb","user","storeToRefs","useSessionStore","notify","useNotifications","waitForConfirmation","useConfirmation","loading","ref","form","onChangedField","formReset","values","isDirty","useForm","soundOptions","EnumNotificationSoundFile","sound","schema","defineFormSchema","initialFormValues","computed","oldValues","notificationConfig","notificationSound","_a","isEqual","watch","newValues","fileName","onSubmit","MutationHandler","id","convertToGraphQLId","response","NotificationTypes","resetFormToDefaults","personalSettings","_b","onResetToDefaultSettings"],"mappings":"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"}