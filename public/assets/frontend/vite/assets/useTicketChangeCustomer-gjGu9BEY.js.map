{"version":3,"file":"useTicketChangeCustomer-gjGu9BEY.js","sources":["../../../../../app/frontend/shared/entities/ticket/graphql/mutations/customerUpdate.api.ts","../../../../../app/frontend/shared/entities/ticket/composables/useTicketChangeCustomer.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketAttributesFragmentDoc } from '../fragments/ticketAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketCustomerUpdateDocument = gql`\n    mutation ticketCustomerUpdate($ticketId: ID!, $input: TicketCustomerUpdateInput!) {\n  ticketCustomerUpdate(ticketId: $ticketId, input: $input) {\n    ticket {\n      ...ticketAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${TicketAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useTicketCustomerUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketCustomerUpdateMutation, Types.TicketCustomerUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketCustomerUpdateMutation, Types.TicketCustomerUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketCustomerUpdateMutation, Types.TicketCustomerUpdateMutationVariables>(TicketCustomerUpdateDocument, options);\n}\nexport type TicketCustomerUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketCustomerUpdateMutation, Types.TicketCustomerUpdateMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useTicketCustomerUpdateMutation } from '#shared/entities/ticket/graphql/mutations/customerUpdate.api.ts'\nimport type {\n  TicketById,\n  TicketCustomerUpdateFormData,\n} from '#shared/entities/ticket/types.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport type { TicketCustomerUpdateInput } from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport type { Ref } from 'vue'\n\nexport const useTicketChangeCustomer = (\n  ticket: Ref<TicketById>,\n  options?: { onSuccess: () => void },\n) => {\n  const { notify } = useNotifications()\n\n  const changeCustomerMutation = new MutationHandler(\n    useTicketCustomerUpdateMutation(),\n  )\n\n  const changeCustomer = async (\n    formData: FormSubmitData<TicketCustomerUpdateFormData>,\n  ) => {\n    const input = {\n      customerId: convertToGraphQLId('User', formData.customer_id),\n    } as TicketCustomerUpdateInput\n\n    if (formData.organization_id) {\n      input.organizationId = convertToGraphQLId(\n        'Organization',\n        formData.organization_id,\n      )\n    }\n\n    try {\n      const result = await changeCustomerMutation.send({\n        ticketId: ticket.value.id,\n        input,\n      })\n\n      if (result) {\n        options?.onSuccess?.()\n\n        notify({\n          id: 'ticket-customer-updated',\n          type: NotificationTypes.Success,\n          message: __('Ticket customer updated successfully.'),\n        })\n\n        return result\n      }\n    } catch (errors) {\n      if (errors instanceof UserError) {\n        notify({\n          id: 'ticket-customer-update-error',\n          message: errors.generalErrors[0],\n          type: NotificationTypes.Error,\n        })\n      }\n    }\n  }\n\n  return { changeCustomer }\n}\n"],"names":["TicketCustomerUpdateDocument","gql","TicketAttributesFragmentDoc","ErrorsFragmentDoc","useTicketCustomerUpdateMutation","options","VueApolloComposable.useMutation","useTicketChangeCustomer","ticket","notify","useNotifications","changeCustomerMutation","MutationHandler","formData","input","convertToGraphQLId","result","_a","NotificationTypes","errors","UserError"],"mappings":"qOASO,MAAMA,EAA+BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWtCC,CAA2B;AAAA,EAC/BC,CAAiB,GACH,SAAAC,EAAgCC,EAA+Q,GAAI,CAC1T,OAAAC,EAAiHN,EAA8BK,CAAO,CAC/J,CCLa,MAAAE,EAA0B,CACrCC,EACAH,IACG,CACG,KAAA,CAAE,OAAAI,GAAWC,IAEbC,EAAyB,IAAIC,EACjCR,EAAgC,CAAA,EA6ClC,MAAO,CAAE,eA1Cc,MACrBS,GACG,OACH,MAAMC,EAAQ,CACZ,WAAYC,EAAmB,OAAQF,EAAS,WAAW,CAAA,EAGzDA,EAAS,kBACXC,EAAM,eAAiBC,EACrB,eACAF,EAAS,eAAA,GAIT,GAAA,CACI,MAAAG,EAAS,MAAML,EAAuB,KAAK,CAC/C,SAAUH,EAAO,MAAM,GACvB,MAAAM,CAAA,CACD,EAED,GAAIE,EACF,OAAAC,EAAAZ,GAAA,YAAAA,EAAS,YAAT,MAAAY,EAAA,KAAAZ,GAEOI,EAAA,CACL,GAAI,0BACJ,KAAMS,EAAkB,QACxB,QAAS,GAAG,uCAAuC,CAAA,CACpD,EAEMF,QAEFG,EAAQ,CACXA,aAAkBC,GACbX,EAAA,CACL,GAAI,+BACJ,QAASU,EAAO,cAAc,CAAC,EAC/B,KAAMD,EAAkB,KAAA,CACzB,CAEL,CAAA,CAGsB,CAC1B"}