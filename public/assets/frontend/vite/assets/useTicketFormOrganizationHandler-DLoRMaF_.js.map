{"version":3,"file":"useTicketFormOrganizationHandler-DLoRMaF_.js","sources":["../../../../../app/frontend/shared/entities/ticket/composables/useTicketFormOrganizationHandler.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { FormHandlerExecution } from '#shared/components/Form/types.ts'\nimport type {\n  FormSchemaField,\n  ReactiveFormSchemData,\n  ChangedField,\n  FormHandlerFunction,\n  FormHandler,\n} from '#shared/components/Form/types.ts'\nimport { getAutoCompleteOption } from '#shared/entities/organization/utils/getAutoCompleteOption.ts'\nimport type { Organization, Scalars } from '#shared/graphql/types.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\nimport type { UserData } from '#shared/types/store.ts' // TODO: remove this import\n\n// TODO: needs to be aligned, when auto completes has a final state.\nexport const useTicketFormOrganizationHandler = (): FormHandler => {\n  const executeHandler = (\n    execution: FormHandlerExecution,\n    schemaData: ReactiveFormSchemData,\n    changedField?: ChangedField,\n  ) => {\n    if (!schemaData.fields.organization_id) return false\n    if (\n      execution === FormHandlerExecution.FieldChange &&\n      (!changedField || changedField.name !== 'customer_id')\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  const handleOrganizationField: FormHandlerFunction = (\n    execution,\n    reactivity,\n    data,\n    // eslint-disable-next-line sonarjs/cognitive-complexity\n  ) => {\n    const { formNode, values, initialEntityObject, changedField } = data\n    const { schemaData, changeFields, updateSchemaDataField } = reactivity\n\n    if (!executeHandler(execution, schemaData, changedField)) return\n\n    const session = useSessionStore()\n\n    const organizationField: Partial<FormSchemaField> = {\n      show: false,\n      required: false,\n    }\n\n    const setCustomer = (): Maybe<UserData> | undefined => {\n      if (session.hasPermission('ticket.agent')) {\n        if (changedField?.newValue) {\n          // TODO: user <=> object ?!?!?\n          const optionValue = formNode?.find('customer_id', 'name')?.context\n            ?.optionValueLookup as Record<\n            number,\n            Record<'object' | 'user', UserData>\n          >\n          // ⚠️ :INFO mobile query retrieves .user and .object for desktop\n          return (\n            (optionValue[changedField.newValue as number].object as UserData) ||\n            (optionValue[changedField.newValue as number].user as UserData)\n          )\n        }\n\n        if (\n          execution === FormHandlerExecution.FieldChange ||\n          !values.customer_id ||\n          !initialEntityObject\n        )\n          return undefined\n\n        return initialEntityObject.customer\n      }\n\n      return session.user\n    }\n\n    const setOrganizationField = (\n      customerId: Scalars['ID']['output'],\n      organization?: Maybe<Partial<Organization>>,\n    ) => {\n      if (!organization) return\n\n      organizationField.show = true\n      organizationField.required = true\n\n      const currentValueOption = getAutoCompleteOption(organization)\n\n      // Some information can be changed during the next user interactions, so update only the current schema data.\n      updateSchemaDataField({\n        name: 'organization_id',\n        props: {\n          defaultFilter: '*',\n          alwaysApplyDefaultFilter: true,\n          options: [currentValueOption],\n          additionalQueryParams: {\n            customerId,\n          },\n        },\n        value: currentValueOption.value,\n      })\n    }\n\n    const customer = setCustomer()\n    if (customer?.hasSecondaryOrganizations) {\n      setOrganizationField(\n        customer.id,\n        execution === FormHandlerExecution.Initial && initialEntityObject\n          ? initialEntityObject.organization\n          : (customer.organization as Organization),\n      )\n    }\n\n    // This values should be fixed, until the user change something in the customer_id field.\n    changeFields.value.organization_id = {\n      ...(changeFields.value.organization_id || {}),\n      ...organizationField,\n    }\n  }\n\n  return {\n    execution: [FormHandlerExecution.Initial, FormHandlerExecution.FieldChange],\n    callback: handleOrganizationField,\n  }\n}\n"],"names":["useTicketFormOrganizationHandler","executeHandler","execution","schemaData","changedField","FormHandlerExecution","handleOrganizationField","reactivity","data","formNode","values","initialEntityObject","changeFields","updateSchemaDataField","session","useSessionStore","organizationField","setCustomer","optionValue","_b","_a","setOrganizationField","customerId","organization","currentValueOption","getAutoCompleteOption","customer"],"mappings":"2GAgBO,MAAMA,EAAmC,IAAmB,CACjE,MAAMC,EAAiB,CACrBC,EACAC,EACAC,IAEI,GAACD,EAAW,OAAO,iBAErBD,IAAcG,EAAqB,cAClC,CAACD,GAAgBA,EAAa,OAAS,gBAQtCE,EAA+C,CACnDJ,EACAK,EACAC,IAEG,CACH,KAAM,CAAE,SAAAC,EAAU,OAAAC,EAAQ,oBAAAC,EAAqB,aAAAP,GAAiBI,EAC1D,CAAE,WAAAL,EAAY,aAAAS,EAAc,sBAAAC,CAAA,EAA0BN,EAE5D,GAAI,CAACN,EAAeC,EAAWC,EAAYC,CAAY,EAAG,OAE1D,MAAMU,EAAUC,IAEVC,EAA8C,CAClD,KAAM,GACN,SAAU,EAAA,EAGNC,EAAc,IAAmC,SACjD,GAAAH,EAAQ,cAAc,cAAc,EAAG,CACzC,GAAIV,GAAA,MAAAA,EAAc,SAAU,CAE1B,MAAMc,GAAcC,GAAAC,EAAAX,GAAA,YAAAA,EAAU,KAAK,cAAe,UAA9B,YAAAW,EAAuC,UAAvC,YAAAD,EAChB,kBAMD,OAAAD,EAAYd,EAAa,QAAkB,EAAE,QAC7Cc,EAAYd,EAAa,QAAkB,EAAE,IAElD,CAEA,OACEF,IAAcG,EAAqB,aACnC,CAACK,EAAO,aACR,CAACC,EAEM,OAEFA,EAAoB,QAC7B,CAEA,OAAOG,EAAQ,IAAA,EAGXO,EAAuB,CAC3BC,EACAC,IACG,CACH,GAAI,CAACA,EAAc,OAEnBP,EAAkB,KAAO,GACzBA,EAAkB,SAAW,GAEvB,MAAAQ,EAAqBC,EAAsBF,CAAY,EAGvCV,EAAA,CACpB,KAAM,kBACN,MAAO,CACL,cAAe,IACf,yBAA0B,GAC1B,QAAS,CAACW,CAAkB,EAC5B,sBAAuB,CACrB,WAAAF,CACF,CACF,EACA,MAAOE,EAAmB,KAAA,CAC3B,CAAA,EAGGE,EAAWT,IACbS,GAAA,MAAAA,EAAU,2BACZL,EACEK,EAAS,GACTxB,IAAcG,EAAqB,SAAWM,EAC1CA,EAAoB,aACnBe,EAAS,YAAA,EAKlBd,EAAa,MAAM,gBAAkB,CACnC,GAAIA,EAAa,MAAM,iBAAmB,CAAC,EAC3C,GAAGI,CAAA,CACL,EAGK,MAAA,CACL,UAAW,CAACX,EAAqB,QAASA,EAAqB,WAAW,EAC1E,SAAUC,CAAA,CAEd"}