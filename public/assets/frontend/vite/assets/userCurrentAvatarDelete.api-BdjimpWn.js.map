{"version":3,"file":"userCurrentAvatarDelete.api-BdjimpWn.js","sources":["../../../../../app/frontend/shared/entities/user/current/graphql/mutations/userCurrentAvatarAdd.api.ts","../../../../../app/frontend/shared/entities/user/current/graphql/mutations/userCurrentAvatarDelete.api.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAvatarAddDocument = gql`\n    mutation userCurrentAvatarAdd($images: AvatarInput!) {\n  userCurrentAvatarAdd(images: $images) {\n    avatar {\n      id\n      default\n      deletable\n      initial\n      imageFull\n      imageResize\n      imageHash\n      createdAt\n      updatedAt\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentAvatarAddMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentAvatarAddMutation, Types.UserCurrentAvatarAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentAvatarAddMutation, Types.UserCurrentAvatarAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentAvatarAddMutation, Types.UserCurrentAvatarAddMutationVariables>(UserCurrentAvatarAddDocument, options);\n}\nexport type UserCurrentAvatarAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentAvatarAddMutation, Types.UserCurrentAvatarAddMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAvatarDeleteDocument = gql`\n    mutation userCurrentAvatarDelete($id: ID!) {\n  userCurrentAvatarDelete(id: $id) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentAvatarDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentAvatarDeleteMutation, Types.UserCurrentAvatarDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentAvatarDeleteMutation, Types.UserCurrentAvatarDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentAvatarDeleteMutation, Types.UserCurrentAvatarDeleteMutationVariables>(UserCurrentAvatarDeleteDocument, options);\n}\nexport type UserCurrentAvatarDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentAvatarDeleteMutation, Types.UserCurrentAvatarDeleteMutationVariables>;"],"names":["UserCurrentAvatarAddDocument","gql","ErrorsFragmentDoc","useUserCurrentAvatarAddMutation","options","VueApolloComposable.useMutation","UserCurrentAvatarDeleteDocument","useUserCurrentAvatarDeleteMutation"],"mappings":"2IAQO,MAAMA,EAA+BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBtCC,CAAiB,GACP,SAAAC,EAAgCC,EAA+Q,GAAI,CAC1T,OAAAC,EAAiHL,EAA8BI,CAAO,CAC/J,CCtBO,MAAME,EAAkCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASzCC,CAAiB,GACP,SAAAK,EAAmCH,EAA2R,GAAI,CACzU,OAAAC,EAAuHC,EAAiCF,CAAO,CACxK"}