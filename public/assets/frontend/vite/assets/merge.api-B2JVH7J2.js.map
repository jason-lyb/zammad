{"version":3,"file":"merge.api-B2JVH7J2.js","sources":["../../../../../app/frontend/shared/entities/ticket/graphql/mutations/merge.api.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketMergeDocument = gql`\n    mutation ticketMerge($sourceTicketId: ID!, $targetTicketId: ID!) {\n  ticketMerge(sourceTicketId: $sourceTicketId, targetTicketId: $targetTicketId) {\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketMergeMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketMergeMutation, Types.TicketMergeMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketMergeMutation, Types.TicketMergeMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketMergeMutation, Types.TicketMergeMutationVariables>(TicketMergeDocument, options);\n}\nexport type TicketMergeMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketMergeMutation, Types.TicketMergeMutationVariables>;"],"names":["TicketMergeDocument","gql","ErrorsFragmentDoc","useTicketMergeMutation","options","VueApolloComposable.useMutation"],"mappings":"2IAQO,MAAMA,EAAsBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ7BC,CAAiB,GACP,SAAAC,EAAuBC,EAA2O,GAAI,CAC7Q,OAAAC,EAA+FL,EAAqBI,CAAO,CACpI"}