{"version":3,"file":"useUserDetail-C29_PwWz.js","sources":["../../../../../app/frontend/shared/graphql/subscriptions/userUpdates.api.ts","../../../../../app/frontend/shared/entities/user/composables/useUserDetail.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserDetailAttributesFragmentDoc } from '../fragments/userDetailAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserUpdatesDocument = gql`\n    subscription userUpdates($userId: ID!, $secondaryOrganizationsCount: Int) {\n  userUpdates(userId: $userId) {\n    user {\n      ...userDetailAttributes\n    }\n  }\n}\n    ${UserDetailAttributesFragmentDoc}`;\nexport function useUserUpdatesSubscription(variables: Types.UserUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.UserUpdatesSubscriptionVariables> | ReactiveFunction<Types.UserUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.UserUpdatesSubscription, Types.UserUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserUpdatesSubscription, Types.UserUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserUpdatesSubscription, Types.UserUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserUpdatesSubscription, Types.UserUpdatesSubscriptionVariables>(UserUpdatesDocument, variables, options);\n}\nexport type UserUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserUpdatesSubscription, Types.UserUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { storeToRefs } from 'pinia'\nimport { computed, ref, type Ref } from 'vue'\n\nimport { useUserQuery } from '#shared/entities/user/graphql/queries/user.api.ts'\nimport { useUserObjectAttributesStore } from '#shared/entities/user/stores/objectAttributes.ts'\nimport { UserUpdatesDocument } from '#shared/graphql/subscriptions/userUpdates.api.ts'\nimport type {\n  UserUpdatesSubscriptionVariables,\n  UserUpdatesSubscription,\n} from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { GraphQLHandlerError } from '#shared/types/error.ts'\nimport { normalizeEdges } from '#shared/utils/helpers.ts'\n\nimport type { WatchQueryFetchPolicy } from '@apollo/client/core'\n\nexport const useUserDetail = (\n  internalId: Ref<number | undefined>,\n  errorCallback?: (error: GraphQLHandlerError) => boolean,\n  fetchPolicy?: WatchQueryFetchPolicy,\n) => {\n  const userId = computed(() => {\n    if (!internalId.value) return\n\n    return convertToGraphQLId('User', internalId.value)\n  })\n  const fetchSecondaryOrganizationsCount = ref<Maybe<number>>(3)\n\n  const userQuery = new QueryHandler(\n    useUserQuery(\n      () => ({\n        userInternalId: internalId.value,\n        secondaryOrganizationsCount: 3,\n      }),\n      () => ({ enabled: Boolean(internalId.value), fetchPolicy }),\n    ),\n    {\n      errorCallback,\n    },\n  )\n\n  userQuery.subscribeToMore<\n    UserUpdatesSubscriptionVariables,\n    UserUpdatesSubscription\n  >(() => ({\n    document: UserUpdatesDocument,\n    variables: {\n      userId: userId.value!,\n      secondaryOrganizationsCount: fetchSecondaryOrganizationsCount.value,\n    },\n  }))\n\n  const loadAllSecondaryOrganizations = () => {\n    userQuery\n      .refetch({\n        userInternalId: internalId.value,\n        secondaryOrganizationsCount: null,\n      })\n      .then(() => {\n        fetchSecondaryOrganizationsCount.value = null\n      })\n  }\n\n  const userResult = userQuery.result()\n  const loading = userQuery.loading()\n\n  const user = computed(() => userResult.value?.user)\n\n  const { viewScreenAttributes } = storeToRefs(useUserObjectAttributesStore())\n\n  const secondaryOrganizations = computed(() =>\n    normalizeEdges(user.value?.secondaryOrganizations),\n  )\n\n  return {\n    loading,\n    user,\n    userQuery,\n    objectAttributes: viewScreenAttributes,\n    secondaryOrganizations,\n    loadAllSecondaryOrganizations,\n  }\n}\n"],"names":["UserUpdatesDocument","gql","UserDetailAttributesFragmentDoc","useUserDetail","internalId","errorCallback","fetchPolicy","userId","computed","convertToGraphQLId","fetchSecondaryOrganizationsCount","ref","userQuery","QueryHandler","useUserQuery","loadAllSecondaryOrganizations","userResult","loading","user","_a","viewScreenAttributes","storeToRefs","useUserObjectAttributesStore","secondaryOrganizations","normalizeEdges"],"mappings":"gQAQO,MAAMA,EAAsBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ7BC,CAA+B,GCGxBC,EAAgB,CAC3BC,EACAC,EACAC,IACG,CACG,MAAAC,EAASC,EAAS,IAAM,CACxB,GAACJ,EAAW,MAET,OAAAK,EAAmB,OAAQL,EAAW,KAAK,CAAA,CACnD,EACKM,EAAmCC,EAAmB,CAAC,EAEvDC,EAAY,IAAIC,EACpBC,EACE,KAAO,CACL,eAAgBV,EAAW,MAC3B,4BAA6B,CAAA,GAE/B,KAAO,CAAE,QAAS,EAAQA,EAAW,MAAQ,YAAAE,GAC/C,EACA,CACE,cAAAD,CACF,CAAA,EAGFO,EAAU,gBAGR,KAAO,CACP,SAAUZ,EACV,UAAW,CACT,OAAQO,EAAO,MACf,4BAA6BG,EAAiC,KAChE,CACA,EAAA,EAEF,MAAMK,EAAgC,IAAM,CAC1CH,EACG,QAAQ,CACP,eAAgBR,EAAW,MAC3B,4BAA6B,IAAA,CAC9B,EACA,KAAK,IAAM,CACVM,EAAiC,MAAQ,IAAA,CAC1C,CAAA,EAGCM,EAAaJ,EAAU,SACvBK,EAAUL,EAAU,UAEpBM,EAAOV,EAAS,IAAA,OAAM,OAAAW,EAAAH,EAAW,QAAX,YAAAG,EAAkB,KAAI,EAE5C,CAAE,qBAAAC,CAAyB,EAAAC,EAAYC,EAA8B,CAAA,EAErEC,EAAyBf,EAAS,IAAA,OACtC,OAAAgB,GAAeL,EAAAD,EAAK,QAAL,YAAAC,EAAY,sBAAsB,EAAA,EAG5C,MAAA,CACL,QAAAF,EACA,KAAAC,EACA,UAAAN,EACA,iBAAkBQ,EAClB,uBAAAG,EACA,8BAAAR,CAAA,CAEJ"}