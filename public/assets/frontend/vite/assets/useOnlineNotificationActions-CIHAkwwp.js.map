{"version":3,"file":"useOnlineNotificationActions-CIHAkwwp.js","sources":["../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/data-privacy-task.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/group.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/organization.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/role.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/ticket-article.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/ticket.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/builders/user.ts","../../../../../app/frontend/shared/composables/activity-message/activityMessageBuilder/index.ts","../../../../../app/frontend/shared/composables/activity-message/useActivityMessage.ts","../../../../../app/frontend/shared/entities/online-notification/graphql/queries/onlineNotifications.api.ts","../../../../../app/frontend/shared/entities/online-notification/graphql/mutations/delete.api.ts","../../../../../app/frontend/shared/entities/online-notification/graphql/mutations/markAllAsSeen.api.ts","../../../../../app/frontend/shared/entities/online-notification/composables/useOnlineNotificationActions.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { DataPrivacyTask } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst path = (metaObject: DataPrivacyTask) => {\n  return '#'\n}\n\nconst messageText = (\n  type: string,\n  authorName: string,\n  metaObject?: DataPrivacyTask,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the data privacy task.')\n  }\n\n  const objectTitle = metaObject.deletableId || '-'\n\n  switch (type) {\n    case 'create':\n      return i18n.t(\n        '%s created data privacy task to delete user ID |%s|',\n        authorName,\n        objectTitle,\n      )\n    case 'update':\n      return i18n.t(\n        '%s updated data privacy task to delete user ID |%s|',\n        authorName,\n        objectTitle,\n      )\n    case 'completed':\n      return i18n.t(\n        '%s completed data privacy task to delete user ID |%s|',\n        authorName,\n        objectTitle,\n      )\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  messageText,\n  path,\n  model: 'DataPrivacyTask',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { Group } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst path = (metaObject: Group) => {\n  return '#'\n}\n\nconst messageText = (\n  messageType: string,\n  authorName: string,\n  metaObject?: Group,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the group.')\n  }\n\n  const objectTitle = metaObject.name || '-'\n\n  switch (messageType) {\n    case 'create':\n      return i18n.t('%s created group |%s|', authorName, objectTitle)\n    case 'update':\n      return i18n.t('%s updated group |%s|', authorName, objectTitle)\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  messageText,\n  path,\n  model: 'Group',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { Organization } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\nconst path = (metaObject: Organization) => {\n  return `organizations/${metaObject.internalId}`\n}\n\nconst messageText = (\n  type: string,\n  authorName: string,\n  metaObject?: Organization,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the organization.')\n  }\n\n  const objectTitle = metaObject.name || '-'\n\n  switch (type) {\n    case 'create':\n      return i18n.t('%s created organization |%s|', authorName, objectTitle)\n    case 'update':\n      return i18n.t('%s updated organization |%s|', authorName, objectTitle)\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  path,\n  messageText,\n  model: 'Organization',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { Role } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst path = (metaObject: Role) => {\n  return '#'\n}\n\nconst messageText = (\n  type: string,\n  authorName: string,\n  metaObject?: Role,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the role.')\n  }\n\n  const objectTitle = metaObject.name || '-'\n\n  switch (type) {\n    case 'create':\n      return i18n.t('%s created role |%s|', authorName, objectTitle)\n    case 'update':\n      return i18n.t('%s updated role |%s|', authorName, objectTitle)\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  messageText,\n  path,\n  model: 'Role',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { TicketArticle } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport { textCleanup, textTruncate } from '#shared/utils/helpers.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\nconst path = (metaObject: TicketArticle) => {\n  return `tickets/${metaObject.ticket.internalId}#article-${metaObject.internalId}`\n}\n\nconst messageText = (\n  type: string,\n  authorName: string,\n  metaObject?: TicketArticle,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the ticket.')\n  }\n\n  const ticketTitle = metaObject.ticket?.title || '-'\n\n  switch (type) {\n    case 'create':\n      return i18n.t('%s created article for |%s|', authorName, ticketTitle)\n    case 'update':\n      return i18n.t('%s updated article for |%s|', authorName, ticketTitle)\n    case 'update.reaction':\n      return i18n.t(\n        '%s reacted with a %s to message from %s |%s|',\n        metaObject.preferences?.whatsapp?.reaction?.author || '-',\n        metaObject.preferences?.whatsapp?.reaction?.emoji || '-',\n        authorName,\n        textTruncate(textCleanup(metaObject.bodyWithUrls)) || '-',\n      )\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  messageText,\n  path,\n  model: 'Ticket::Article',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { Ticket } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\nconst path = (metaObject: Ticket) => {\n  return `tickets/${metaObject.internalId}`\n}\n\nconst messageText = (\n  type: string,\n  authorName: string,\n  metaObject?: Ticket,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the ticket.')\n  }\n\n  const objectTitle = metaObject.title || '-'\n\n  switch (type) {\n    case 'create':\n      return i18n.t('%s created ticket |%s|', authorName, objectTitle)\n    case 'update':\n      return i18n.t('%s updated ticket |%s|', authorName, objectTitle)\n    case 'reminder_reached':\n      return i18n.t('Pending reminder reached for ticket |%s|', objectTitle)\n    case 'escalation':\n      return i18n.t('Ticket |%s| has escalated!', objectTitle)\n    case 'escalation_warning':\n      return i18n.t('Ticket |%s| will escalate soon!', objectTitle)\n    case 'update.merged_into':\n      return i18n.t('Ticket |%s| was merged into another ticket', objectTitle)\n    case 'update.received_merge':\n      return i18n.t('Another ticket was merged into ticket |%s|', objectTitle)\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  path,\n  messageText,\n  model: 'Ticket',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { User } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\n\nimport type { ActivityMessageBuilder } from '../types.ts'\n\nconst path = (metaObject: User) => {\n  return `users/${metaObject.internalId}`\n}\n\nconst messageText = (\n  type: string,\n  authorName: string,\n  metaObject?: User,\n): Maybe<string> => {\n  if (!metaObject) {\n    return i18n.t('You can no longer see the user.')\n  }\n\n  const objectTitle = metaObject.fullname || '-'\n\n  switch (type) {\n    case 'create':\n      return i18n.t('%s created user |%s|', authorName, objectTitle)\n    case 'update':\n      return i18n.t('%s updated user |%s|', authorName, objectTitle)\n    case 'session started':\n      return i18n.t('%s started a new session', authorName)\n    case 'switch to':\n      return i18n.t('%s switched to |%s|!', authorName, objectTitle)\n    case 'ended switch to':\n      return i18n.t('%s ended switch to |%s|!', authorName, objectTitle)\n    default:\n      return null\n  }\n}\n\nexport default <ActivityMessageBuilder>{\n  messageText,\n  path,\n  model: 'User',\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { ActivityMessageBuilder } from './types.ts'\n\nconst builderModules = import.meta.glob<ActivityMessageBuilder>(\n  ['./builders/*.ts'],\n  {\n    eager: true,\n    import: 'default',\n  },\n)\n\nexport const activityMessageBuilder = Object.values(builderModules).reduce(\n  (builders: Record<string, ActivityMessageBuilder>, builder) => {\n    builders[builder.model] = builder\n    return builders\n  },\n  {},\n)\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, type Ref } from 'vue'\n\nimport { userDisplayName } from '#shared/entities/user/utils/getUserDisplayName.ts'\nimport type { OnlineNotification } from '#shared/graphql/types.ts'\nimport log from '#shared/utils/log.ts'\n\nimport { activityMessageBuilder } from './activityMessageBuilder/index.ts'\n\nexport const useActivityMessage = (\n  activity: Readonly<Ref<OnlineNotification>>,\n) => {\n  const builder = computed(\n    () => activityMessageBuilder[activity.value.objectName],\n  )\n  if (!builder.value) {\n    log.error(`Object missing ${activity.value.objectName}.`)\n  }\n\n  const message = builder.value?.messageText(\n    activity.value.typeName,\n    activity.value.createdBy ? userDisplayName(activity.value.createdBy) : '',\n    activity.value.metaObject,\n  )\n\n  const link = activity.value.metaObject\n    ? builder.value?.path(activity.value.metaObject)\n    : undefined\n\n  if (builder.value && !message) {\n    log.error(\n      `Unknown action for (${activity.value.objectName}/${activity.value.typeName}), extend activityMessages() of model.`,\n    )\n  }\n\n  return { link, builder, message }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const OnlineNotificationsDocument = gql`\n    query onlineNotifications {\n  onlineNotifications {\n    edges {\n      node {\n        id\n        seen\n        createdAt\n        createdBy {\n          id\n          fullname\n          lastname\n          firstname\n          email\n          vip\n          outOfOffice\n          outOfOfficeStartAt\n          outOfOfficeEndAt\n          active\n          image\n        }\n        typeName\n        objectName\n        metaObject {\n          ... on Ticket {\n            id\n            internalId\n            title\n          }\n          ... on TicketArticle {\n            id\n            internalId\n            ticket {\n              id\n              internalId\n              title\n            }\n            to {\n              raw\n            }\n            bodyWithUrls\n            preferences\n          }\n        }\n      }\n      cursor\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n    `;\nexport function useOnlineNotificationsQuery(options: VueApolloComposable.UseQueryOptions<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>(OnlineNotificationsDocument, {}, options);\n}\nexport function useOnlineNotificationsLazyQuery(options: VueApolloComposable.UseQueryOptions<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>(OnlineNotificationsDocument, {}, options);\n}\nexport type OnlineNotificationsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.OnlineNotificationsQuery, Types.OnlineNotificationsQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const OnlineNotificationDeleteDocument = gql`\n    mutation onlineNotificationDelete($onlineNotificationId: ID!) {\n  onlineNotificationDelete(onlineNotificationId: $onlineNotificationId) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useOnlineNotificationDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.OnlineNotificationDeleteMutation, Types.OnlineNotificationDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.OnlineNotificationDeleteMutation, Types.OnlineNotificationDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.OnlineNotificationDeleteMutation, Types.OnlineNotificationDeleteMutationVariables>(OnlineNotificationDeleteDocument, options);\n}\nexport type OnlineNotificationDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.OnlineNotificationDeleteMutation, Types.OnlineNotificationDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const OnlineNotificationMarkAllAsSeenDocument = gql`\n    mutation onlineNotificationMarkAllAsSeen($onlineNotificationIds: [ID!]!) {\n  onlineNotificationMarkAllAsSeen(onlineNotificationIds: $onlineNotificationIds) {\n    onlineNotifications {\n      id\n      seen\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useOnlineNotificationMarkAllAsSeenMutation(options: VueApolloComposable.UseMutationOptions<Types.OnlineNotificationMarkAllAsSeenMutation, Types.OnlineNotificationMarkAllAsSeenMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.OnlineNotificationMarkAllAsSeenMutation, Types.OnlineNotificationMarkAllAsSeenMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.OnlineNotificationMarkAllAsSeenMutation, Types.OnlineNotificationMarkAllAsSeenMutationVariables>(OnlineNotificationMarkAllAsSeenDocument, options);\n}\nexport type OnlineNotificationMarkAllAsSeenMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.OnlineNotificationMarkAllAsSeenMutation, Types.OnlineNotificationMarkAllAsSeenMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { cloneDeep } from 'lodash-es'\n\nimport { useOnlineNotificationDeleteMutation } from '#shared/entities/online-notification/graphql/mutations/delete.api.ts'\nimport { useOnlineNotificationMarkAllAsSeenMutation } from '#shared/entities/online-notification/graphql/mutations/markAllAsSeen.api.ts'\nimport { useOnlineNotificationSeenMutation } from '#shared/entities/online-notification/graphql/mutations/seen.api.ts'\nimport { OnlineNotificationsDocument } from '#shared/entities/online-notification/graphql/queries/onlineNotifications.api.ts'\nimport type {\n  OnlineNotification,\n  OnlineNotificationsQuery,\n  Scalars,\n} from '#shared/graphql/types.ts'\nimport { getApolloClient } from '#shared/server/apollo/client.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nexport const useOnlineNotificationActions = () => {\n  const { cache } = getApolloClient()\n\n  const getCacheData = () => {\n    const queryOptions = {\n      query: OnlineNotificationsDocument,\n    }\n    const existingQueryCache =\n      cache.readQuery<OnlineNotificationsQuery>(queryOptions)\n\n    if (!existingQueryCache?.onlineNotifications) return null\n\n    const oldQueryCache = cloneDeep(existingQueryCache)\n\n    return { queryOptions, oldQueryCache, existingQueryCache }\n  }\n\n  const removeNotificationCacheUpdate = (id: Scalars['ID']['output']) => {\n    const data = getCacheData()\n\n    if (!data) return\n\n    const { queryOptions, oldQueryCache, existingQueryCache } = data\n\n    cache.writeQuery({\n      ...queryOptions,\n      data: {\n        onlineNotifications: {\n          edges: existingQueryCache.onlineNotifications.edges.filter(\n            (edge) => edge.node.id !== id,\n          ),\n          pageInfo: existingQueryCache.onlineNotifications.pageInfo,\n        },\n      },\n    })\n\n    return () => {\n      cache.writeQuery({\n        ...queryOptions,\n        data: oldQueryCache,\n      })\n    }\n  }\n\n  const updateAllSeenNotificationCache = (ids: Scalars['ID']['output'][]) => {\n    const data = getCacheData()\n\n    if (!data) return\n\n    const { queryOptions, oldQueryCache, existingQueryCache } = data\n\n    const clonedQueryCache = cloneDeep(existingQueryCache)\n\n    ids.forEach((id) =>\n      clonedQueryCache.onlineNotifications.edges.forEach(({ node }) => {\n        if (node.id === id) {\n          node.seen = true\n        }\n      }),\n    )\n\n    cache.writeQuery({\n      ...queryOptions,\n      data: {\n        onlineNotifications: {\n          ...clonedQueryCache.onlineNotifications,\n        },\n      },\n    })\n\n    return () => {\n      cache.writeQuery({\n        ...queryOptions,\n        data: oldQueryCache,\n      })\n    }\n  }\n\n  const updateSeenNotificationCache = (id: Scalars['ID']['output']) => {\n    const data = getCacheData()\n\n    if (!data) return\n\n    const { queryOptions, oldQueryCache, existingQueryCache } = data\n\n    const clonedQueryCache = cloneDeep(existingQueryCache)\n\n    clonedQueryCache.onlineNotifications.edges.forEach(({ node }) => {\n      if ((node.metaObject as OnlineNotification['metaObject'])?.id === id) {\n        node.seen = true\n      }\n    })\n\n    cache.writeQuery({\n      ...queryOptions,\n      data: {\n        onlineNotifications: {\n          ...clonedQueryCache.onlineNotifications,\n        },\n      },\n    })\n\n    return () => {\n      cache.writeQuery({\n        ...queryOptions,\n        data: oldQueryCache,\n      })\n    }\n  }\n\n  const seenNotificationMutation = new MutationHandler(\n    useOnlineNotificationSeenMutation(),\n    {\n      errorNotificationMessage: __(\n        'The online notification could not be marked as seen.',\n      ),\n    },\n  )\n\n  const seenNotification = async (id: Scalars['ID']['output']) => {\n    const revertCache = updateSeenNotificationCache(id)\n\n    return seenNotificationMutation\n      .send({ objectId: id })\n      .catch(() => revertCache)\n  }\n\n  const markAllSeenMutation = new MutationHandler(\n    useOnlineNotificationMarkAllAsSeenMutation(),\n    {\n      errorNotificationMessage: __('Cannot set online notifications as seen'),\n    },\n  )\n\n  const markAllRead = (ids: Scalars['ID']['output'][]) => {\n    const revertCache = updateAllSeenNotificationCache(ids)\n\n    return markAllSeenMutation\n      .send({ onlineNotificationIds: ids })\n      .catch(() => revertCache)\n  }\n\n  const deleteNotificationMutation = new MutationHandler(\n    useOnlineNotificationDeleteMutation(),\n  )\n\n  const deleteNotification = async (id: Scalars['ID']['output']) => {\n    const revertCache = removeNotificationCacheUpdate(id)\n\n    return deleteNotificationMutation\n      .send({\n        onlineNotificationId: id,\n      })\n      .catch(() => revertCache)\n  }\n\n  return {\n    seenNotification,\n    deleteNotification,\n    deleteNotificationMutation,\n    markAllRead,\n  }\n}\n"],"names":["path","metaObject","messageText","type","authorName","i18n","objectTitle","__vite_glob_0_0","messageType","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","ticketTitle","_a","_d","_c","_b","_g","_f","_e","textTruncate","textCleanup","__vite_glob_0_4","__vite_glob_0_5","__vite_glob_0_6","builderModules","activityMessageBuilder","builders","builder","useActivityMessage","activity","computed","log","message","userDisplayName","link","OnlineNotificationsDocument","gql","useOnlineNotificationsQuery","options","VueApolloComposable.useQuery","OnlineNotificationDeleteDocument","ErrorsFragmentDoc","useOnlineNotificationDeleteMutation","VueApolloComposable.useMutation","OnlineNotificationMarkAllAsSeenDocument","useOnlineNotificationMarkAllAsSeenMutation","useOnlineNotificationActions","cache","getApolloClient","getCacheData","queryOptions","existingQueryCache","oldQueryCache","cloneDeep","removeNotificationCacheUpdate","id","data","edge","updateAllSeenNotificationCache","ids","clonedQueryCache","node","updateSeenNotificationCache","seenNotificationMutation","MutationHandler","useOnlineNotificationSeenMutation","seenNotification","revertCache","markAllSeenMutation","markAllRead","deleteNotificationMutation"],"mappings":"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"}