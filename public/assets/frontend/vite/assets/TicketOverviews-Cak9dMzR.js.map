{"version":3,"file":"TicketOverviews-Cak9dMzR.js","sources":["../../../../../app/frontend/shared/composables/list/useSorting.ts","../../../../../app/frontend/apps/desktop/entities/user/current/composables/useLifetimeCustomerTicketsCount.ts","../../../../../app/frontend/apps/desktop/pages/ticket-overviews/components/assets/confetti.svg","../../../../../app/frontend/apps/desktop/pages/ticket-overviews/components/TicketList.vue","../../../../../app/frontend/apps/desktop/pages/ticket-overviews/composables/useTicketOverviews.ts","../../../../../app/frontend/apps/desktop/pages/ticket-overviews/components/TicketOverviewsSidebar/TicketOverviewsList.vue","../../../../../app/frontend/apps/desktop/pages/ticket-overviews/components/TicketOverviewsSidebar.vue","../../../../../app/frontend/apps/desktop/pages/ticket-overviews/views/TicketOverviews.vue"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { isRef, ref, toValue, watch, type Ref } from 'vue'\nimport { onBeforeRouteUpdate } from 'vue-router'\n\nimport { EnumOrderDirection } from '#shared/graphql/types.ts'\nimport type { QueryHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { OperationQueryResult } from '#shared/types/server/apollo/handler.ts'\n\nimport type { OperationVariables } from '@apollo/client/core'\n\nexport const useSorting = <\n  TQueryResult extends OperationQueryResult = OperationQueryResult,\n  TQueryVariables extends OperationVariables = OperationVariables & {\n    orderBy: string\n    orderDirection: EnumOrderDirection\n  },\n>(\n  query: QueryHandler<TQueryResult, TQueryVariables>,\n  orderByParam: string | Ref<string>,\n  orderDirectionParam: EnumOrderDirection | Ref<EnumOrderDirection>,\n  scrollContainer?: Ref<HTMLElement | null>,\n) => {\n  // Local refs that you'll work with inside this composable\n  const orderBy = ref<string>(toValue(orderByParam))\n  const orderDirection = ref<EnumOrderDirection>(toValue(orderDirectionParam))\n\n  if (isRef(orderByParam)) {\n    watch(orderByParam, (newValue) => {\n      orderBy.value = newValue\n    })\n  }\n\n  if (isRef(orderDirectionParam)) {\n    watch(orderDirectionParam, (newValue) => {\n      orderDirection.value = newValue\n    })\n  }\n\n  const isSorting = ref(false)\n  const sort = (\n    column: string,\n    direction: EnumOrderDirection,\n    additionalVariables: Partial<TQueryVariables> = {},\n  ) => {\n    isSorting.value = true\n    // It's fine to parse only partial variables, in this case the original variables values are used for\n    // not given variables.\n    query\n      .refetch({\n        orderBy: column,\n        orderDirection: direction,\n        ...additionalVariables,\n      })\n      .finally(() => {\n        isSorting.value = false\n\n        requestAnimationFrame(() => {\n          scrollContainer?.value?.scrollTo({ top: 0 })\n        })\n      })\n\n    orderBy.value = column\n    orderDirection.value = direction\n  }\n\n  onBeforeRouteUpdate(() => {\n    orderBy.value = toValue(orderByParam)\n    orderDirection.value = toValue(orderDirectionParam)\n  })\n\n  return {\n    sort,\n    isSorting,\n    orderBy,\n    orderDirection,\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { storeToRefs } from 'pinia'\nimport { computed } from 'vue'\n\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nexport const useLifetimeCustomerTicketsCount = () => {\n  const { user } = storeToRefs(useSessionStore())\n  const totalCount = computed(\n    () =>\n      (user.value?.preferences?.tickets_closed ?? 0) +\n      (user.value?.preferences?.tickets_open ?? 0),\n  )\n\n  const hasAnyTicket = computed(() => totalCount.value > 0)\n\n  return { totalCount, hasAnyTicket }\n}\n","export default \"__VITE_ASSET__DhxhrCDa__\"","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { useWindowSize } from '@vueuse/core'\nimport { isEqual } from 'lodash-es'\nimport { storeToRefs } from 'pinia'\nimport {\n  computed,\n  onActivated,\n  onDeactivated,\n  ref,\n  type Ref,\n  toRef,\n  useTemplateRef,\n  watch,\n} from 'vue'\nimport { onBeforeRouteLeave, onBeforeRouteUpdate, useRouter } from 'vue-router'\n\nimport { useSorting } from '#shared/composables/list/useSorting.ts'\nimport { usePagination } from '#shared/composables/usePagination.ts'\nimport { useQueryPolling } from '#shared/composables/useQueryPolling.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport {\n  EnumObjectManagerObjects,\n  EnumOrderDirection,\n  type TicketsCachedByOverviewQueryVariables,\n} from '#shared/graphql/types.ts'\nimport { getIdFromGraphQLId } from '#shared/graphql/utils.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\nimport type { ObjectWithId } from '#shared/types/utils.ts'\nimport hasPermission from '#shared/utils/hasPermission.ts'\nimport { edgesToArray } from '#shared/utils/helpers.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonAdvancedTable from '#desktop/components/CommonTable/CommonAdvancedTable.vue'\nimport CommonTableSkeleton from '#desktop/components/CommonTable/Skeleton/CommonTableSkeleton.vue'\nimport CommonTicketPriorityIndicatorIcon from '#desktop/components/CommonTicketPriorityIndicator/CommonTicketPriorityIndicatorIcon.vue'\nimport CommonTicketStateIndicatorIcon from '#desktop/components/CommonTicketStateIndicator/CommonTicketStateIndicatorIcon.vue'\nimport { useElementScroll } from '#desktop/composables/useElementScroll.ts'\nimport { useScrollPosition } from '#desktop/composables/useScrollPosition.ts'\nimport { useTicketsCachedByOverviewCache } from '#desktop/entities/ticket/composables/useTicketsCachedByOverviewCache.ts'\nimport { useTicketsCachedByOverviewQuery } from '#desktop/entities/ticket/graphql/queries/ticketsCachedByOverview.api.ts'\nimport { useTicketOverviewsStore } from '#desktop/entities/ticket/stores/ticketOverviews.ts'\nimport { useLifetimeCustomerTicketsCount } from '#desktop/entities/user/current/composables/useLifetimeCustomerTicketsCount.ts'\nimport TicketOverviewsEmptyText from '#desktop/pages/ticket-overviews/components/TicketOverviewsEmptyText.vue'\n\ninterface Props {\n  overviewId: string\n  orderBy: string\n  orderDirection: EnumOrderDirection\n  headers: string[]\n  overviewName: string\n  groupBy?: string\n  overviewCount?: number\n}\n\nconst props = defineProps<Props>()\n\nconst router = useRouter()\n\nconst { readTicketsByOverviewCache, forceTicketsByOverviewCacheOnlyFirstPage } =\n  useTicketsCachedByOverviewCache()\n\nconst { queryPollingConfig } = storeToRefs(useTicketOverviewsStore())\n\nlet lastFirstPageCollectionSignature: string\nconst foreground = ref(true)\nconst pollingInterval = computed(\n  () =>\n    (foreground.value\n      ? queryPollingConfig.value.foreground.interval_sec\n      : queryPollingConfig.value.background.interval_sec) * 1000,\n)\n\nconst ticketsQueryVariables = computed<TicketsCachedByOverviewQueryVariables>(\n  (currentVariables) => {\n    const newVariables: TicketsCachedByOverviewQueryVariables = {\n      pageSize: queryPollingConfig.value.page_size,\n      overviewId: props.overviewId,\n      orderBy: props.orderBy,\n      orderDirection: props.orderDirection,\n      cacheTtl: queryPollingConfig.value.foreground.cache_ttl_sec,\n      renewCache: currentVariables?.overviewId !== props.overviewId,\n    }\n\n    const cachedTickets = readTicketsByOverviewCache(newVariables)\n\n    newVariables.knownCollectionSignature =\n      cachedTickets?.ticketsCachedByOverview?.collectionSignature\n\n    if (currentVariables && isEqual(currentVariables, newVariables)) {\n      return currentVariables\n    }\n\n    return newVariables\n  },\n)\n\nconst ticketsQuery = new QueryHandler(\n  useTicketsCachedByOverviewQuery(ticketsQueryVariables, {\n    fetchPolicy: 'cache-and-network',\n    nextFetchPolicy: 'cache-and-network',\n    context: {\n      batch: {\n        active: false,\n      },\n    },\n  }),\n)\n\nconst ticketsResult = ticketsQuery.result()\nconst loading = ticketsQuery.loading()\n\nconst currentCollectionSignature = computed(() => {\n  return ticketsResult.value?.ticketsCachedByOverview?.collectionSignature\n})\n\nconst isLoadingTickets = computed(() => {\n  if (ticketsResult.value !== undefined) return false\n\n  return loading.value\n})\n\nconst tickets = computed(() =>\n  edgesToArray(ticketsResult.value?.ticketsCachedByOverview),\n)\n\nonActivated(() => {\n  if (foreground.value) return\n\n  ticketsQuery.refetch({\n    renewCache: true,\n  })\n  foreground.value = true\n})\n\nonDeactivated(() => {\n  foreground.value = false\n})\n\nconst pagination = usePagination(\n  ticketsQuery,\n  'ticketsCachedByOverview',\n  queryPollingConfig.value.page_size,\n  () => ({\n    knownCollectionSignature: null,\n    renewCache: false,\n  }),\n)\n\nconst scrollContainerElement = useTemplateRef('scroll-container')\n\nconst {\n  sort,\n  orderBy: localOrderBy,\n  orderDirection: localOrderDirection,\n  isSorting,\n} = useSorting(\n  ticketsQuery,\n  toRef(props, 'orderBy'),\n  toRef(props, 'orderDirection'),\n  scrollContainerElement,\n)\n\nconst resort = (column: string, direction: EnumOrderDirection) => {\n  forceTicketsByOverviewCacheOnlyFirstPage(\n    {\n      ...ticketsQueryVariables.value,\n      orderBy: localOrderBy.value,\n      orderDirection: localOrderDirection.value,\n    },\n    lastFirstPageCollectionSignature,\n    queryPollingConfig.value.page_size,\n  )\n\n  const cachedTickets = readTicketsByOverviewCache({\n    ...ticketsQueryVariables.value,\n    orderBy: column,\n    orderDirection: direction,\n  })\n\n  sort(column, direction, {\n    knownCollectionSignature:\n      cachedTickets?.ticketsCachedByOverview?.collectionSignature,\n    renewCache: false,\n  })\n}\n\nconst { startPolling, stopPolling } = useQueryPolling(\n  ticketsQuery,\n  pollingInterval,\n  () => ({\n    knownCollectionSignature: currentCollectionSignature.value,\n    renewCache: false,\n    pageSize: queryPollingConfig.value.page_size * pagination.currentPage,\n  }),\n  () => ({\n    enabled: queryPollingConfig.value.enabled && !isSorting.value,\n  }),\n)\n\nticketsQuery.watchOnceOnResult((result) => {\n  if (!queryPollingConfig.value.enabled) return\n\n  lastFirstPageCollectionSignature =\n    result.ticketsCachedByOverview.collectionSignature\n\n  startPolling()\n})\n\nonBeforeRouteLeave(() => {\n  forceTicketsByOverviewCacheOnlyFirstPage(\n    ticketsQueryVariables.value,\n    lastFirstPageCollectionSignature,\n    queryPollingConfig.value.page_size,\n  )\n})\n\nwatch(\n  () => props.overviewId,\n  () => {\n    ticketsQuery.watchOnceOnResult((result) => {\n      if (!queryPollingConfig.value.enabled) return\n\n      lastFirstPageCollectionSignature =\n        result.ticketsCachedByOverview.collectionSignature\n\n      startPolling()\n    })\n  },\n)\n\nonBeforeRouteUpdate(() => {\n  forceTicketsByOverviewCacheOnlyFirstPage(\n    ticketsQueryVariables.value,\n    lastFirstPageCollectionSignature,\n    queryPollingConfig.value.page_size,\n  )\n\n  if (!queryPollingConfig.value.enabled) return\n\n  stopPolling()\n})\n\nticketsQuery.onResult((result) => {\n  if (isSorting.value && !result.loading) {\n    // If sorting comes from the cache, we immediately dispose the loading state\n    isSorting.value = false\n  }\n})\n\nconst totalCount = computed(\n  () => ticketsResult.value?.ticketsCachedByOverview.totalCount || 0,\n)\n\nconst loadMore = async () => pagination.fetchNextPage()\n\nconst { config } = storeToRefs(useApplicationStore())\nconst { user, userId } = storeToRefs(useSessionStore())\n\nconst storageKeyId = computed(\n  () => `${userId.value}-table-headers-${props.overviewId}`,\n)\n\n// Scrolling position is preserved when user visits another page and returns to overview page\nconst { scrollPosition, restoreScrollPosition } = useScrollPosition(\n  scrollContainerElement,\n)\n\nconst resetScrollPosition = () => {\n  scrollPosition.value = 0\n  restoreScrollPosition()\n}\n\n// Reset scroll-position back to the start, when user navigates between overviews\nonBeforeRouteUpdate(resetScrollPosition)\n\nconst { reachedTop } = useElementScroll(\n  scrollContainerElement as Ref<HTMLDivElement>,\n)\n\nconst { hasAnyTicket } = useLifetimeCustomerTicketsCount()\n\nconst isCustomerAndCanCreateTickets = computed(\n  () =>\n    hasPermission('ticket.customer', user.value?.permissions?.names ?? []) &&\n    config.value.customer_ticket_create,\n)\n\nconst goToTicket = (ticket: ObjectWithId) =>\n  router.push(`/tickets/${getIdFromGraphQLId(ticket.id)}`)\n\nconst goToTicketLinkColumn = {\n  internal: true,\n  getLink: (item: ObjectWithId) => `/tickets/${getIdFromGraphQLId(item.id)}`,\n}\n\nconst localHeaders = computed(() => {\n  const extendedHeaders = [...props.headers]\n\n  extendedHeaders.unshift('stateIcon')\n\n  if (config.value.ui_ticket_priority_icons) {\n    extendedHeaders.unshift('priorityIcon')\n  }\n\n  return extendedHeaders\n})\n\nconst maxItems = computed(() => config.value.ui_ticket_overview_ticket_limit)\n\nconst { height: screenHeight } = useWindowSize()\n\nconst visibleOverviewCount = computed(() => {\n  const maxVisibleRowCount = Math.ceil(screenHeight.value / 40)\n\n  if (props.overviewCount && props.overviewCount > maxVisibleRowCount)\n    return maxVisibleRowCount\n\n  return props.overviewCount\n})\n</script>\n\n<template>\n  <div\n    ref=\"scroll-container\"\n    class=\"overflow-y-auto focus-visible:outline-none\"\n  >\n    <div v-if=\"isLoadingTickets && !pagination.loadingNewPage\">\n      <CommonTableSkeleton\n        data-test-id=\"table-skeleton\"\n        :rows=\"visibleOverviewCount\"\n      />\n    </div>\n\n    <template v-else-if=\"!isLoadingTickets && !tickets.length\">\n      <TicketOverviewsEmptyText\n        v-if=\"isCustomerAndCanCreateTickets && !hasAnyTicket\"\n        class=\"space-y-2.5\"\n        :title=\"$t('Welcome!')\"\n      >\n        <CommonLabel class=\"block\" tag=\"p\">{{\n          $t('You have not created a ticket yet.')\n        }}</CommonLabel>\n        <CommonLabel class=\"block\" tag=\"p\">{{\n          $t('The way to communicate with us is this thing called \"ticket\".')\n        }}</CommonLabel>\n        <CommonLabel class=\"block\" tag=\"p\">{{\n          $t('Please click on the button below to create your first one.')\n        }}</CommonLabel>\n        <CommonButton\n          size=\"large\"\n          class=\"mx-auto !mt-8\"\n          variant=\"primary\"\n          @click=\"router.push({ name: 'TicketCreate' })\"\n          >{{ $t('Create your first ticket') }}\n        </CommonButton>\n      </TicketOverviewsEmptyText>\n\n      <TicketOverviewsEmptyText\n        v-else\n        :title=\"$t('Empty Overview')\"\n        :text=\"$t('No tickets in this state.')\"\n        with-illustration\n      />\n    </template>\n\n    <div v-else-if=\"tickets.length\">\n      <CommonAdvancedTable\n        v-model:order-by=\"localOrderBy\"\n        v-model:order-direction=\"localOrderDirection\"\n        :caption=\"$t('Overview: %s', overviewName)\"\n        :headers=\"localHeaders\"\n        :object=\"EnumObjectManagerObjects.Ticket\"\n        :group-by=\"groupBy\"\n        :reached-scroll-top=\"reachedTop\"\n        :table-id=\"overviewId\"\n        :scroll-container=\"scrollContainerElement\"\n        :attributes=\"[\n          {\n            name: 'priorityIcon',\n            label: __('Priority Icon'),\n            headerPreferences: {\n              noResize: true,\n              hideLabel: true,\n              displayWidth: 25,\n              noSorting: true,\n            },\n            columnPreferences: {},\n            dataType: 'icon',\n          },\n          {\n            name: 'stateIcon',\n            label: __('State Icon'),\n            headerPreferences: {\n              noResize: true,\n              hideLabel: true,\n              displayWidth: 30,\n              noSorting: true,\n            },\n            columnPreferences: {},\n            dataType: 'icon',\n          },\n        ]\"\n        :attribute-extensions=\"{\n          title: {\n            columnPreferences: {\n              link: goToTicketLinkColumn,\n            },\n          },\n          number: {\n            label: config.ticket_hook,\n            columnPreferences: {\n              link: goToTicketLinkColumn,\n            },\n          },\n        }\"\n        :items=\"tickets\"\n        :total-items=\"totalCount\"\n        :storage-key-id=\"storageKeyId\"\n        :max-items=\"maxItems\"\n        :is-sorting=\"isSorting\"\n        :is-loading=\"loading\"\n        @load-more=\"loadMore\"\n        @click-row=\"goToTicket\"\n        @sort=\"resort\"\n      >\n        <template #column-cell-priorityIcon=\"{ item, isRowSelected }\">\n          <CommonTicketPriorityIndicatorIcon\n            :ui-color=\"(item as TicketById).priority?.uiColor\"\n            with-text-color\n            class=\"shrink-0 group-hover:text-black group-focus-visible:text-white group-active:text-white group-hover:dark:text-white group-active:dark:text-white\"\n            :class=\"{\n              'ltr:text-black rtl:text-black dark:text-white': isRowSelected,\n            }\"\n          />\n        </template>\n        <template #column-cell-stateIcon=\"{ item, isRowSelected }\">\n          <CommonTicketStateIndicatorIcon\n            class=\"shrink-0 group-hover:text-black group-focus-visible:text-white group-active:text-white group-hover:dark:text-white group-active:dark:text-white\"\n            :class=\"{\n              'ltr:text-black rtl:text-black dark:text-white': isRowSelected,\n            }\"\n            :color-code=\"(item as TicketById).stateColorCode\"\n            :label=\"(item as TicketById).state.name\"\n            :aria-labelledby=\"(item as TicketById).id\"\n            icon-size=\"tiny\"\n          />\n        </template>\n      </CommonAdvancedTable>\n    </div>\n  </div>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { storeToRefs } from 'pinia'\n\nimport { useTicketOverviewsStore } from '#desktop/entities/ticket/stores/ticketOverviews.ts'\n\nexport const useTicketOverviews = () => {\n  const store = useTicketOverviewsStore()\n  const { setCurrentTicketOverviewLink, updateLastUsedOverview } = store\n\n  const state = storeToRefs(store)\n\n  return {\n    setCurrentTicketOverviewLink,\n    updateLastUsedOverview,\n    ...state,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport NavigationMenuList from '#desktop/components/NavigationMenu/NavigationMenuList.vue'\nimport type { NavigationMenuEntry } from '#desktop/components/NavigationMenu/types.ts'\nimport { useTicketOverviews } from '#desktop/pages/ticket-overviews/composables/useTicketOverviews.ts'\n\nconst { overviews, overviewsTicketCountById } = useTicketOverviews()\n\nconst overviewsItems = computed((): NavigationMenuEntry[] =>\n  overviews.value?.map((item) => ({\n    label: item.name,\n    id: item.id,\n    route: item.link,\n    count: overviewsTicketCountById.value[item.id],\n  })),\n)\n</script>\n\n<template>\n  <NavigationMenuList\n    :aria-label=\"$t('Overview navigation list')\"\n    count-variant=\"info\"\n    count-size=\"xs\"\n    :items=\"overviewsItems\"\n  />\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport TicketOverviewsList from '#desktop/pages/ticket-overviews/components/TicketOverviewsSidebar/TicketOverviewsList.vue'\n\nconst { hasPermission } = useSessionStore()\n\nconst hasOverviewSortingPreference = computed(() =>\n  hasPermission('user_preferences.overview_sorting'),\n)\n</script>\n\n<template>\n  <section class=\"flex flex-col gap-2.5\">\n    <CommonLink\n      v-if=\"hasOverviewSortingPreference\"\n      class=\"my-2.5 ltr:ml-auto rtl:mr-auto\"\n      internal\n      link=\"/personal-setting/ticket-overviews\"\n    >\n      <CommonLabel\n        size=\"small\"\n        class=\"text-blue-800!\"\n        prefix-icon=\"list-columns-reverse\"\n      >\n        {{ $t('reorder items') }}\n      </CommonLabel>\n    </CommonLink>\n\n    <TicketOverviewsList />\n  </section>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { until } from '@vueuse/core'\nimport { computed } from 'vue'\n\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\nimport LayoutSidebar from '#desktop/components/layout/LayoutSidebar.vue'\nimport TicketList from '#desktop/pages/ticket-overviews/components/TicketList.vue'\nimport TicketOverviewsEmptyText from '#desktop/pages/ticket-overviews/components/TicketOverviewsEmptyText.vue'\nimport TicketOverviewsSidebar from '#desktop/pages/ticket-overviews/components/TicketOverviewsSidebar.vue'\nimport { useTicketOverviews } from '#desktop/pages/ticket-overviews/composables/useTicketOverviews.ts'\n\ninterface Props {\n  overviewLink: string\n}\n\nconst props = defineProps<Props>()\n\ndefineOptions({\n  async beforeRouteEnter(to, _, next) {\n    const {\n      overviews,\n      overviewsLoading,\n      setCurrentTicketOverviewLink,\n      currentTicketOverviewLink,\n      overviewsByLink,\n    } = useTicketOverviews()\n\n    await until(() => overviewsLoading.value).toBe(false)\n\n    const overviewLink = to.params.overviewLink as string\n\n    if (overviewLink in overviewsByLink.value || overviews.value.length === 0) {\n      setCurrentTicketOverviewLink(overviewLink || '')\n      return next()\n    }\n\n    const nextOverviewLink =\n      currentTicketOverviewLink.value || overviews.value[0].link\n    setCurrentTicketOverviewLink(nextOverviewLink)\n\n    next({\n      name: 'TicketOverview',\n      params: { overviewLink: nextOverviewLink },\n    })\n  },\n  beforeRouteUpdate(to, _, next) {\n    const {\n      currentTicketOverviewLink,\n      overviews,\n      setCurrentTicketOverviewLink,\n    } = useTicketOverviews()\n\n    if (to.params.overviewLink) {\n      setCurrentTicketOverviewLink(to.params.overviewLink as string)\n      return next()\n    }\n\n    const nextOverviewLink =\n      currentTicketOverviewLink.value || overviews.value[0].link\n    setCurrentTicketOverviewLink(nextOverviewLink)\n\n    next({\n      name: 'TicketOverview',\n      params: { overviewLink: nextOverviewLink },\n    })\n  },\n})\n\nconst { overviewsByLink, hasOverviews, overviewsTicketCountById } =\n  useTicketOverviews()\n\nconst currentOverview = computed(\n  () => overviewsByLink.value[props.overviewLink],\n)\n\nconst currentOverviewCount = computed(\n  () => overviewsTicketCountById.value[currentOverview.value?.id],\n)\n\nconst breadcrumbItems = computed(() => [\n  {\n    label: __('Overviews'),\n    route: '/tickets/view',\n  },\n  {\n    label: currentOverview.value?.name,\n    count: currentOverviewCount.value,\n  },\n])\n</script>\n\n<template>\n  <div class=\"h-full\" :class=\"{ 'grid grid-cols-[260px_1fr]': hasOverviews }\">\n    <LayoutSidebar\n      v-if=\"hasOverviews\"\n      id=\"ticket-overviews\"\n      :aria-label=\"$t('second level navigation sidebar')\"\n      background-variant=\"secondary\"\n      name=\"overviews\"\n    >\n      <TicketOverviewsSidebar />\n    </LayoutSidebar>\n\n    <LayoutContent\n      class=\"relative\"\n      :breadcrumb-items=\"currentOverview ? breadcrumbItems : undefined\"\n      no-scrollable\n      content-padding\n    >\n      <!-- TODO: should we add a key to the TicketList, that we have it \"fresh\" for every overview => otherwise we need some watch/reset logic on switch -->\n      <TicketList\n        v-if=\"currentOverview\"\n        class=\"px-4 pb-4\"\n        :overview-id=\"currentOverview.id\"\n        :overview-name=\"currentOverview.name\"\n        :headers=\"currentOverview.viewColumnsRaw\"\n        :order-by=\"currentOverview.orderBy\"\n        :order-direction=\"currentOverview.orderDirection\"\n        :group-by=\"currentOverview.groupBy || undefined\"\n        :overview-count=\"currentOverviewCount\"\n      />\n      <TicketOverviewsEmptyText\n        v-else\n        :title=\"$t('No Overviews')\"\n        :text=\"\n          $t(\n            'Currently, no overviews are assigned to your roles. Please contact your administrator.',\n          )\n        \"\n        icon=\"exclamation-triangle\"\n      />\n    </LayoutContent>\n  </div>\n</template>\n"],"names":["useSorting","query","orderByParam","orderDirectionParam","scrollContainer","orderBy","ref","toValue","orderDirection","isRef","watch","newValue","isSorting","sort","column","direction","additionalVariables","_a","onBeforeRouteUpdate","useLifetimeCustomerTicketsCount","user","storeToRefs","useSessionStore","totalCount","computed","_b","_d","_c","hasAnyTicket","_imports_0","props","__props","router","useRouter","readTicketsByOverviewCache","forceTicketsByOverviewCacheOnlyFirstPage","useTicketsCachedByOverviewCache","queryPollingConfig","useTicketOverviewsStore","lastFirstPageCollectionSignature","foreground","pollingInterval","ticketsQueryVariables","currentVariables","newVariables","cachedTickets","isEqual","ticketsQuery","QueryHandler","useTicketsCachedByOverviewQuery","ticketsResult","loading","currentCollectionSignature","isLoadingTickets","tickets","edgesToArray","onActivated","onDeactivated","pagination","usePagination","scrollContainerElement","useTemplateRef","localOrderBy","localOrderDirection","toRef","resort","startPolling","stopPolling","useQueryPolling","result","onBeforeRouteLeave","loadMore","config","useApplicationStore","userId","storageKeyId","scrollPosition","restoreScrollPosition","useScrollPosition","reachedTop","useElementScroll","isCustomerAndCanCreateTickets","hasPermission","goToTicket","ticket","getIdFromGraphQLId","goToTicketLinkColumn","item","localHeaders","extendedHeaders","maxItems","screenHeight","useWindowSize","visibleOverviewCount","maxVisibleRowCount","useTicketOverviews","store","setCurrentTicketOverviewLink","updateLastUsedOverview","state","overviews","overviewsTicketCountById","overviewsItems","hasOverviewSortingPreference","overviewsByLink","hasOverviews","currentOverview","currentOverviewCount","breadcrumbItems"],"mappings":"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"}