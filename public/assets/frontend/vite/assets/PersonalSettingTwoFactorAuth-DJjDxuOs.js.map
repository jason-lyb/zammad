{"version":3,"mappings":";ugDAQO,MAAMA,GAA2CC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlDC,CAAiB,GACP,SAAAC,GAA4CC,EAA+T,GAAI,CACtX,OAAAC,EAAyIL,GAA0CI,CAAO,CACnM,CCZO,MAAME,GAA+CL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAStDC,CAAiB,GACP,SAAAK,GAAgDH,EAA+U,GAAI,CAC1Y,OAAAC,EAAiJC,GAA8CF,CAAO,CAC/M,CCbO,MAAMI,GAAsCP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAanC,SAAAQ,GAA2CL,EAA8e,GAAI,CAC3iB,OAAOM,EAA2IF,GAAqC,GAAIJ,CAAO,CACpM,CCLO,MAAMO,GAA4B,IAAM,CACvC,MACJ,wBAAAC,EACA,kBAAAC,EACA,wBAAAC,GACEC,EAA8B,EAE5BC,EAAUC,IACV,CAAE,KAAAC,CAAA,EAASC,GAAYH,CAAO,EAE9BI,EAAyBC,EAC7B,IAAM,WACG,OAAAC,GAAAC,GAAAC,EAAAN,EAAK,QAAL,YAAAM,EAAY,cAAZ,YAAAD,EAAyB,4BAAzB,YAAAD,EAAoD,OAC7D,GAGIG,EAAmC,IAAIC,GAC3CjB,GAA2C,GAGvCkB,EAA6BF,EAAiC,SAE9DG,EAA+BP,EACnC,WACE,OAAAG,EAAAG,EAA2B,QAA3B,YAAAH,EAAkC,4BAC/B,gBAGDK,EAAoCR,EAAS,IAAM,OAChD,OAAAG,EAAAI,EAA6B,QAA7B,YAAAJ,EAAoC,6BAA6B,OACtE,CAACM,EAAcC,KACAD,EAAAC,EAA4B,oBAAoB,EAAI,CAC/D,GAAGA,EACH,QACEA,EAA4B,uBAC5BX,EAAuB,OAEpBU,GAET,CAAC,EACH,CACD,EAEKE,EAAgCX,EAAS,IAAM,CACnD,MAAMY,EAAgD,GAE9B,OAAArB,EAAA,MAAM,QAASmB,GAAgC,OACrE,MAAMG,GACJV,EAAAK,EAAkC,QAAlC,YAAAL,EACEO,EAA4B,MAGhCE,EAAc,KAAK,CACjB,GAAGF,EACH,WAAY,GAAQG,GAAA,MAAAA,EAAqB,YACzC,QAAS,GAAQA,GAAA,MAAAA,EAAqB,QAAO,CAC9C,EACF,EAEMD,CAAA,CACR,EAEKE,EAAuBd,EAAS,IACpC,OAAO,OAAOQ,EAAkC,OAAS,EAAE,EAAE,KAC1DE,GAAgCA,EAA4B,UAC/D,GAGIK,EAAmBf,EAAS,IAAM,OAC/B,UAAQG,EAAAI,EAA6B,QAA7B,MAAAJ,EAAoC,mBAAkB,CACtE,EAGD,OAAAa,EAAMzB,EAAyB,IAC7Ba,EAAiC,gBAAgB,QAAQ,GAGpD,CACL,8BAAAO,EACA,kBAAAnB,EACA,wBAAAC,EACA,qBAAAqB,EACA,iBAAAC,CAAA,CAEJ,6dCvDA,MAAMpB,EAAUC,IACVqB,EAASC,IACT,CAAE,OAAAC,GAAWC,KAEb,CACJ,kBAAA5B,EACA,wBAAAC,EACA,qBAAAqB,EACA,iBAAAC,EACA,8BAAAJ,GACErB,GAA0B,EAExB0B,EAAAxB,EAAoB6B,GAAa,CACjCA,GAEGJ,EAAA,QACLK,EAAmB,CACjB,KAAMC,EAAe,mBACrB,MAAO,GAAG,WAAW,EACrB,QAAS,GAAG,yDAAyD,EACrE,WAAYC,EAAiB,UAC9B,EACH,CACD,EAED,KAAM,CAAE,gBAAAC,CAAgB,EAAIC,GAAc,GAAG,2BAA2B,CAAC,EAEnEC,EAA+BC,GAAU,CAC7C,KAAM,oBACN,UAAW,IACTC,EAAA,WAAO,4CAAgE,4GAC1E,EAEKC,EAAmC,MACvCC,GAEOJ,EAA6B,KAAK,CACvC,KAAAI,CAAA,CACD,EAGGC,EAA4B,IAAIC,EACpC/C,GAAgD,EAChD,CACE,yBAA0B,GACxB,2DACF,CACF,GAGIgD,EAAgCC,GAAwB,CACvDA,GAELH,EACG,KAAK,CACJ,WAAYG,EAAO,KACpB,EACA,KAAK,IAAM,SACVxC,EAAQ,kBAAkB,4BAA6B,CACrD,KAAIO,GAAAC,EAAAR,EAAQ,OAAR,YAAAQ,EAAc,cAAd,YAAAD,EAA2B,4BAA6B,CAAC,EAC7D,QAASiC,EAAO,KACjB,EAEMhB,EAAA,CACL,GAAI,gCACJ,KAAMiB,EAAkB,QACxB,QAAS,GAAG,sDAAsD,EACnE,EACF,GAGCC,EAAwB,IAAIJ,EAChCnD,GAA4C,EAC5C,CACE,yBAA0B,GACxB,oDACF,CACF,GAGIwD,EAA+B,MAAOH,GAAwB,CAClE,GAAKA,EAEL,OAAOR,EAA6B,KAAK,CACvC,KAAM,uBACN,gBAAiB,MAAO,CAAE,MAAAY,KAA+B,OACjD,MAAAC,EAAO,MAAMH,EAAsB,KAAK,CAC5C,WAAYF,EAAO,KACnB,MAAAI,CAAA,CACD,GAEGpC,EAAAqC,GAAA,YAAAA,EAAM,mCAAN,MAAArC,EAAwC,SACnCgB,EAAA,CACL,GAAI,4BACJ,KAAMiB,EAAkB,QACxB,QAAS,GAAG,+CAA+C,EAC5D,CAEL,EACD,GAGGK,EAAwB,CAC5BN,EACAJ,IACG,OACG,MAAAW,EAAsB/B,EAA8B,MAAM,KAC7DgC,GAAWA,EAAO,OAASR,EAAO,MAGrC,QACEhC,EAAAuC,GAAA,YAAAA,EAAqB,uBAArB,YAAAvC,EAA2C,mBAAmB4B,KAAS,IAIrEa,EAAU5C,EAAqB,IAAM,CACzC,CACE,IAAK,QACL,MAAO,GAAG,QAAQ,EAClB,UAAYmC,GAAWM,EAAsBN,EAAS,OAAO,EAC7D,KAAM,SACN,KAAOA,GAAW,EAACA,GAAA,MAAAA,EAAQ,YAC3B,QAAUA,GAAWL,EAAiCK,GAAA,YAAAA,EAAQ,IAAI,CACpE,EACA,CACE,IAAK,OACL,MAAO,GAAG,MAAM,EAChB,UAAYA,GAAWM,EAAsBN,EAAS,MAAM,EAC5D,KAAM,SACN,KAAOA,GACE,GACLA,GAAA,MAAAA,EAAQ,aAAcA,GAAA,MAAAA,EAAQ,qBAAqB,WAGvD,QAAUA,GAAWL,EAAiCK,GAAA,YAAAA,EAAQ,IAAI,CACpE,EACA,CACE,IAAK,eACL,MAAO,GAAG,gBAAgB,EAC1B,UAAYA,GAAWM,EAAsBN,EAAS,SAAS,EAC/D,KAAM,eACN,KAAOA,GAAW,GAAQA,GAAA,MAAAA,EAAQ,YAAc,EAACA,GAAA,MAAAA,EAAQ,UACzD,QAAUA,GAAWD,EAA6BC,CAAM,CAC1D,EACA,CACE,IAAK,SACL,MAAO,GAAG,QAAQ,EAClB,UAAYA,GAAWM,EAAsBN,EAAS,QAAQ,EAC9D,KAAM,SACN,QAAS,SACT,KAAOA,GAAW,GAAQA,GAAA,MAAAA,EAAQ,YAClC,QAAUA,GAAWG,EAA6BH,CAAM,CAC1D,EACD","names":["UserCurrentTwoFactorRemoveMethodDocument","gql","ErrorsFragmentDoc","useUserCurrentTwoFactorRemoveMethodMutation","options","VueApolloComposable.useMutation","UserCurrentTwoFactorSetDefaultMethodDocument","useUserCurrentTwoFactorSetDefaultMethodMutation","UserCurrentTwoFactorUpdatesDocument","useUserCurrentTwoFactorUpdatesSubscription","VueApolloComposable.useSubscription","useConfigurationTwoFactor","twoFactorEnabledMethods","hasEnabledMethods","hasEnabledRecoveryCodes","useApplicationConfigTwoFactor","session","useSessionStore","user","storeToRefs","defaultTwoFactorMethod","computed","_c","_b","_a","userCurrentTwoFactorSubscription","SubscriptionHandler","userCurrentTwoFactorResult","twoFactorConfigurationResult","enabledAuthenticationMethodLookup","methodLookup","enabledAuthenticationMethod","twoFactorConfigurationMethods","mappedMethods","configurationMethod","hasConfiguredMethods","hasRecoveryCodes","watch","router","useRouter","notify","useNotifications","newValue","redirectErrorRoute","ErrorRouteType","ErrorStatusCodes","breadcrumbItems","useBreadcrumb","twoFactorConfigurationFlyout","useFlyout","__vitePreload","openTwoFactorConfigurationFlyout","type","setDefaultTwoFactorMethod","MutationHandler","submitTwoFactorDefaultMethod","entity","NotificationTypes","removeTwoFactorMethod","submitTwoFactorMethodRemoval","token","data","lookUpA11yActionLabel","authenticatorMethod","method","actions"],"ignoreList":[],"sources":["../../../../../app/frontend/shared/entities/user/current/graphql/mutations/two-factor/userCurrentTwoFactorRemoveMethod.api.ts","../../../../../app/frontend/shared/entities/user/current/graphql/mutations/two-factor/userCurrentTwoFactorSetDefaultMethod.api.ts","../../../../../app/frontend/apps/desktop/entities/user/current/graphql/subscriptions/userCurrentTwoFactorUpdates.api.ts","../../../../../app/frontend/apps/desktop/entities/two-factor-configuration/composables/useConfigurationTwoFactor.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingTwoFactorAuth.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentTwoFactorRemoveMethodDocument = gql`\n    mutation userCurrentTwoFactorRemoveMethod($methodName: String!, $token: String!) {\n  userCurrentTwoFactorRemoveMethod(methodName: $methodName, token: $token) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentTwoFactorRemoveMethodMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentTwoFactorRemoveMethodMutation, Types.UserCurrentTwoFactorRemoveMethodMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentTwoFactorRemoveMethodMutation, Types.UserCurrentTwoFactorRemoveMethodMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentTwoFactorRemoveMethodMutation, Types.UserCurrentTwoFactorRemoveMethodMutationVariables>(UserCurrentTwoFactorRemoveMethodDocument, options);\n}\nexport type UserCurrentTwoFactorRemoveMethodMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentTwoFactorRemoveMethodMutation, Types.UserCurrentTwoFactorRemoveMethodMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentTwoFactorSetDefaultMethodDocument = gql`\n    mutation userCurrentTwoFactorSetDefaultMethod($methodName: String!) {\n  userCurrentTwoFactorSetDefaultMethod(methodName: $methodName) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentTwoFactorSetDefaultMethodMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentTwoFactorSetDefaultMethodMutation, Types.UserCurrentTwoFactorSetDefaultMethodMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentTwoFactorSetDefaultMethodMutation, Types.UserCurrentTwoFactorSetDefaultMethodMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentTwoFactorSetDefaultMethodMutation, Types.UserCurrentTwoFactorSetDefaultMethodMutationVariables>(UserCurrentTwoFactorSetDefaultMethodDocument, options);\n}\nexport type UserCurrentTwoFactorSetDefaultMethodMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentTwoFactorSetDefaultMethodMutation, Types.UserCurrentTwoFactorSetDefaultMethodMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentTwoFactorUpdatesDocument = gql`\n    subscription userCurrentTwoFactorUpdates {\n  userCurrentTwoFactorUpdates {\n    configuration {\n      recoveryCodesExist\n      enabledAuthenticationMethods {\n        configured\n        authenticationMethod\n      }\n    }\n  }\n}\n    `;\nexport function useUserCurrentTwoFactorUpdatesSubscription(options: VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentTwoFactorUpdatesSubscription, Types.UserCurrentTwoFactorUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentTwoFactorUpdatesSubscription, Types.UserCurrentTwoFactorUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentTwoFactorUpdatesSubscription, Types.UserCurrentTwoFactorUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserCurrentTwoFactorUpdatesSubscription, Types.UserCurrentTwoFactorUpdatesSubscriptionVariables>(UserCurrentTwoFactorUpdatesDocument, {}, options);\n}\nexport type UserCurrentTwoFactorUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserCurrentTwoFactorUpdatesSubscription, Types.UserCurrentTwoFactorUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { storeToRefs } from 'pinia'\nimport { computed, watch } from 'vue'\n\nimport { useApplicationConfigTwoFactor } from '#shared/composables/authentication/useApplicationConfigTwoFactor.ts'\nimport type {\n  EnumTwoFactorAuthenticationMethod,\n  TwoFactorEnabledAuthenticationMethod,\n} from '#shared/graphql/types.ts'\nimport SubscriptionHandler from '#shared/server/apollo/handler/SubscriptionHandler.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport { useUserCurrentTwoFactorUpdatesSubscription } from '#desktop/entities/user/current/graphql/subscriptions/userCurrentTwoFactorUpdates.api.ts'\n\nimport type { TwoFactorConfigurationMethod } from '../types.ts'\n\nexport const useConfigurationTwoFactor = () => {\n  const {\n    twoFactorEnabledMethods,\n    hasEnabledMethods,\n    hasEnabledRecoveryCodes,\n  } = useApplicationConfigTwoFactor()\n\n  const session = useSessionStore()\n  const { user } = storeToRefs(session)\n\n  const defaultTwoFactorMethod = computed<EnumTwoFactorAuthenticationMethod>(\n    () => {\n      return user.value?.preferences?.two_factor_authentication?.default\n    },\n  )\n\n  const userCurrentTwoFactorSubscription = new SubscriptionHandler(\n    useUserCurrentTwoFactorUpdatesSubscription(),\n  )\n\n  const userCurrentTwoFactorResult = userCurrentTwoFactorSubscription.result()\n\n  const twoFactorConfigurationResult = computed(\n    () =>\n      userCurrentTwoFactorResult.value?.userCurrentTwoFactorUpdates\n        .configuration,\n  )\n\n  const enabledAuthenticationMethodLookup = computed(() => {\n    return twoFactorConfigurationResult.value?.enabledAuthenticationMethods.reduce(\n      (methodLookup, enabledAuthenticationMethod) => {\n        methodLookup[enabledAuthenticationMethod.authenticationMethod] = {\n          ...enabledAuthenticationMethod,\n          default:\n            enabledAuthenticationMethod.authenticationMethod ===\n            defaultTwoFactorMethod.value,\n        }\n        return methodLookup\n      },\n      {} as Record<string, TwoFactorEnabledAuthenticationMethod>,\n    )\n  })\n\n  const twoFactorConfigurationMethods = computed(() => {\n    const mappedMethods: TwoFactorConfigurationMethod[] = []\n\n    twoFactorEnabledMethods.value.forEach((enabledAuthenticationMethod) => {\n      const configurationMethod =\n        enabledAuthenticationMethodLookup.value?.[\n          enabledAuthenticationMethod.name\n        ]\n\n      mappedMethods.push({\n        ...enabledAuthenticationMethod,\n        configured: Boolean(configurationMethod?.configured),\n        default: Boolean(configurationMethod?.default),\n      })\n    })\n\n    return mappedMethods\n  })\n\n  const hasConfiguredMethods = computed(() =>\n    Object.values(enabledAuthenticationMethodLookup.value || {}).some(\n      (enabledAuthenticationMethod) => enabledAuthenticationMethod.configured,\n    ),\n  )\n\n  const hasRecoveryCodes = computed(() => {\n    return Boolean(twoFactorConfigurationResult.value?.recoveryCodesExist)\n  })\n\n  // We need to restart the subscription when enabled two factor method list changed.\n  watch(twoFactorEnabledMethods, () =>\n    userCurrentTwoFactorSubscription.operationResult.restart(),\n  )\n\n  return {\n    twoFactorConfigurationMethods,\n    hasEnabledMethods,\n    hasEnabledRecoveryCodes,\n    hasConfiguredMethods,\n    hasRecoveryCodes,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, watch } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useApplicationConfigTwoFactor } from '#shared/composables/authentication/useApplicationConfigTwoFactor.ts'\nimport type { TwoFactorActionTypes } from '#shared/entities/two-factor/types.ts'\nimport { useUserCurrentTwoFactorRemoveMethodMutation } from '#shared/entities/user/current/graphql/mutations/two-factor/userCurrentTwoFactorRemoveMethod.api.ts'\nimport { useUserCurrentTwoFactorSetDefaultMethodMutation } from '#shared/entities/user/current/graphql/mutations/two-factor/userCurrentTwoFactorSetDefaultMethod.api.ts'\nimport { ErrorRouteType, redirectErrorRoute } from '#shared/router/error.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\nimport { ErrorStatusCodes } from '#shared/types/error.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonActionMenu from '#desktop/components/CommonActionMenu/CommonActionMenu.vue'\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\nimport type { TwoFactorConfigurationType } from '#desktop/components/TwoFactor/types.ts'\nimport { useConfigurationTwoFactor } from '#desktop/entities/two-factor-configuration/composables/useConfigurationTwoFactor.ts'\n\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\n\ndefineOptions({\n  beforeRouteEnter() {\n    const { hasEnabledMethods } = useApplicationConfigTwoFactor()\n\n    if (!hasEnabledMethods.value)\n      return redirectErrorRoute({\n        type: ErrorRouteType.AuthenticatedError,\n        title: __('Forbidden'),\n        message: __('There are no enabled two-factor authentication methods.'),\n        statusCode: ErrorStatusCodes.Forbidden,\n      })\n\n    return true\n  },\n})\n\nconst session = useSessionStore()\nconst router = useRouter()\nconst { notify } = useNotifications()\n\nconst {\n  hasEnabledMethods,\n  hasEnabledRecoveryCodes,\n  hasConfiguredMethods,\n  hasRecoveryCodes,\n  twoFactorConfigurationMethods,\n} = useConfigurationTwoFactor()\n\nwatch(hasEnabledMethods, (newValue) => {\n  if (newValue) return\n\n  router.replace(\n    redirectErrorRoute({\n      type: ErrorRouteType.AuthenticatedError,\n      title: __('Forbidden'),\n      message: __('There are no enabled two-factor authentication methods.'),\n      statusCode: ErrorStatusCodes.Forbidden,\n    }),\n  )\n})\n\nconst { breadcrumbItems } = useBreadcrumb(__('Two-factor Authentication'))\n\nconst twoFactorConfigurationFlyout = useFlyout({\n  name: 'two-factor-flyout',\n  component: () =>\n    import('#desktop/components/TwoFactor/TwoFactorConfigurationFlyout.vue'),\n})\n\nconst openTwoFactorConfigurationFlyout = async (\n  type: TwoFactorConfigurationType,\n) => {\n  return twoFactorConfigurationFlyout.open({\n    type,\n  })\n}\n\nconst setDefaultTwoFactorMethod = new MutationHandler(\n  useUserCurrentTwoFactorSetDefaultMethodMutation(),\n  {\n    errorNotificationMessage: __(\n      'Could not set two-factor authentication method as default',\n    ),\n  },\n)\n\nconst submitTwoFactorDefaultMethod = (entity?: ObjectLike) => {\n  if (!entity) return\n\n  setDefaultTwoFactorMethod\n    .send({\n      methodName: entity.name,\n    })\n    .then(() => {\n      session.setUserPreference('two_factor_authentication', {\n        ...(session.user?.preferences?.two_factor_authentication || {}),\n        default: entity.name,\n      })\n\n      notify({\n        id: 'two-factor-method-set-default',\n        type: NotificationTypes.Success,\n        message: __('Two-factor authentication method was set as default.'),\n      })\n    })\n}\n\nconst removeTwoFactorMethod = new MutationHandler(\n  useUserCurrentTwoFactorRemoveMethodMutation(),\n  {\n    errorNotificationMessage: __(\n      'Could not remove two-factor authentication method.',\n    ),\n  },\n)\n\nconst submitTwoFactorMethodRemoval = async (entity?: ObjectLike) => {\n  if (!entity) return\n\n  return twoFactorConfigurationFlyout.open({\n    type: 'removal_confirmation',\n    successCallback: async ({ token }: { token: string }) => {\n      const data = await removeTwoFactorMethod.send({\n        methodName: entity.name,\n        token,\n      })\n\n      if (data?.userCurrentTwoFactorRemoveMethod?.success) {\n        notify({\n          id: 'two-factor-method-removed',\n          type: NotificationTypes.Success,\n          message: __('Two-factor authentication method was removed.'),\n        })\n      }\n    },\n  })\n}\n\nconst lookUpA11yActionLabel = (\n  entity: ObjectLike,\n  type: TwoFactorActionTypes,\n) => {\n  const authenticatorMethod = twoFactorConfigurationMethods.value.find(\n    (method) => method.name === entity.name,\n  )\n\n  return (\n    authenticatorMethod?.configurationOptions?.getActionA11yLabel(type) || ''\n  )\n}\n\nconst actions = computed<MenuItem[]>(() => [\n  {\n    key: 'setup',\n    label: __('Set up'),\n    ariaLabel: (entity) => lookUpA11yActionLabel(entity!, 'setup'),\n    icon: 'wrench',\n    show: (entity) => !entity?.configured,\n    onClick: (entity) => openTwoFactorConfigurationFlyout(entity?.name),\n  },\n  {\n    key: 'edit',\n    label: __('Edit'),\n    ariaLabel: (entity) => lookUpA11yActionLabel(entity!, 'edit'),\n    icon: 'pencil',\n    show: (entity) => {\n      return Boolean(\n        entity?.configured && entity?.configurationOptions.editable,\n      )\n    },\n    onClick: (entity) => openTwoFactorConfigurationFlyout(entity?.name),\n  },\n  {\n    key: 'setAsDefault',\n    label: __('Set as default'),\n    ariaLabel: (entity) => lookUpA11yActionLabel(entity!, 'default'),\n    icon: 'arrow-repeat',\n    show: (entity) => Boolean(entity?.configured && !entity?.default),\n    onClick: (entity) => submitTwoFactorDefaultMethod(entity),\n  },\n  {\n    key: 'remove',\n    label: __('Remove'),\n    ariaLabel: (entity) => lookUpA11yActionLabel(entity!, 'remove'),\n    icon: 'trash3',\n    variant: 'danger',\n    show: (entity) => Boolean(entity?.configured),\n    onClick: (entity) => submitTwoFactorMethodRemoval(entity),\n  },\n])\n</script>\n\n<template>\n  <LayoutContent :breadcrumb-items=\"breadcrumbItems\" width=\"narrow\">\n    <div class=\"flex flex-col gap-2.5\">\n      <div>\n        <CommonLabel class=\"mb-1.5\">{{ $t('Available methods') }}</CommonLabel>\n        <div class=\"flex flex-col rounded-lg bg-blue-200 p-1 dark:bg-gray-700\">\n          <div\n            v-for=\"twoFactorMethod in twoFactorConfigurationMethods\"\n            :key=\"twoFactorMethod.name\"\n            class=\"flex items-start gap-1.5 p-2.5\"\n          >\n            <CommonIcon\n              class=\"text-stone-200 dark:text-neutral-500\"\n              :name=\"twoFactorMethod.icon\"\n              size=\"small\"\n            />\n            <div class=\"flex grow flex-col gap-0.5\">\n              <div class=\"flex grow gap-1.5\">\n                <CommonLabel class=\"text-black dark:text-white\"\n                  >{{ $t(twoFactorMethod.label) }}\n                </CommonLabel>\n                <CommonBadge\n                  v-if=\"twoFactorMethod.configured\"\n                  variant=\"success\"\n                >\n                  {{ $t('Active') }}\n                </CommonBadge>\n                <CommonBadge v-if=\"twoFactorMethod.default\" variant=\"info\"\n                  >{{ $t('Default') }}\n                </CommonBadge>\n              </div>\n              <CommonLabel\n                v-if=\"twoFactorMethod.description\"\n                class=\"text-stone-200 dark:text-neutral-500\"\n                size=\"small\"\n                >{{ $t(twoFactorMethod.description) }}\n              </CommonLabel>\n            </div>\n            <CommonActionMenu\n              :entity=\"twoFactorMethod\"\n              :custom-menu-button-label=\"\n                twoFactorMethod.configurationOptions?.actionButtonA11yLabel\n              \"\n              :actions=\"actions\"\n            />\n          </div>\n        </div>\n      </div>\n      <template v-if=\"hasConfiguredMethods && hasEnabledRecoveryCodes\">\n        <CommonLabel\n          >{{\n            $t(\n              'Recovery codes can be used to access your account in the event you lose access to other two-factor authentication methods.',\n            )\n          }}\n        </CommonLabel>\n        <CommonLabel v-if=\"hasRecoveryCodes\"\n          >{{\n            $t(\n              \"If you lose your recovery codes it's possible to generate new ones. This action is going to invalidate previous recovery codes.\",\n            )\n          }}\n        </CommonLabel>\n        <div class=\"flex justify-end\">\n          <CommonButton\n            variant=\"submit\"\n            type=\"submit\"\n            size=\"medium\"\n            @click=\"openTwoFactorConfigurationFlyout('recovery_codes')\"\n          >\n            {{\n              hasRecoveryCodes\n                ? $t('Regenerate Recovery Codes')\n                : $t('Generate Recovery Codes')\n            }}\n          </CommonButton>\n        </div>\n      </template>\n    </div>\n  </LayoutContent>\n</template>\n"],"file":"assets/PersonalSettingTwoFactorAuth-DJjDxuOs.js"}