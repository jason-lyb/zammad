{"version":3,"file":"useResizeGridColumns-CieKHty_.js","sources":["../../../../../app/frontend/apps/desktop/composables/useResizeGridColumns.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useLocalStorage, useWindowSize } from '@vueuse/core'\nimport { shallowRef, computed, type Ref } from 'vue'\n\nimport { SidebarPosition } from '#desktop/components/layout/types.ts'\n\nexport const DEFAULT_START_SIDEBAR_WIDTH = 260\nexport const DEFAULT_END_SIDEBAR_WIDTH = 360\nexport const MINIMUM_START_SIDEBAR_WIDTH = 200\nexport const MINIMUM_END_SIDEBAR_WIDTH = 300\nexport const SIDEBAR_COLLAPSED_WIDTH = 56\n\nexport const useResizeGridColumns = (\n  storageKey?: string,\n  position: SidebarPosition = SidebarPosition.Start,\n) => {\n  const defaultSidebarWidth =\n    position === SidebarPosition.Start\n      ? DEFAULT_START_SIDEBAR_WIDTH\n      : DEFAULT_END_SIDEBAR_WIDTH\n\n  const minSidebarWidth =\n    position === SidebarPosition.Start\n      ? MINIMUM_START_SIDEBAR_WIDTH\n      : MINIMUM_END_SIDEBAR_WIDTH\n\n  const isSidebarCollapsed = shallowRef(false)\n\n  let currentSidebarWidth: Ref<number>\n\n  const storageId = `${storageKey}-sidebar-width`\n\n  if (storageKey) {\n    currentSidebarWidth = useLocalStorage(storageId, defaultSidebarWidth)\n  } else {\n    currentSidebarWidth = shallowRef(defaultSidebarWidth)\n  }\n\n  const { width: screenWidth } = useWindowSize()\n  const maxWidth = computed(() => screenWidth.value / 3)\n\n  const gridColumns = computed(() => {\n    const width = isSidebarCollapsed.value\n      ? SIDEBAR_COLLAPSED_WIDTH\n      : currentSidebarWidth.value\n\n    if (position === SidebarPosition.End)\n      return {\n        gridTemplateColumns: `1fr ${width}px`,\n      }\n\n    return {\n      gridTemplateColumns: `${width}px 1fr`,\n    }\n  })\n\n  const resizeSidebar = (width: number) => {\n    if (width <= minSidebarWidth || width >= maxWidth.value) return\n\n    currentSidebarWidth.value = width\n  }\n\n  const collapseSidebar = () => {\n    isSidebarCollapsed.value = true\n  }\n\n  const expandSidebar = () => {\n    isSidebarCollapsed.value = false\n  }\n\n  const resetSidebarWidth = () => {\n    currentSidebarWidth.value = defaultSidebarWidth\n  }\n\n  return {\n    currentSidebarWidth,\n    maxSidebarWidth: maxWidth,\n    minSidebarWidth,\n    gridColumns,\n    isSidebarCollapsed,\n    resizeSidebar,\n    collapseSidebar,\n    expandSidebar,\n    resetSidebarWidth,\n  }\n}\n"],"names":["DEFAULT_START_SIDEBAR_WIDTH","DEFAULT_END_SIDEBAR_WIDTH","MINIMUM_START_SIDEBAR_WIDTH","MINIMUM_END_SIDEBAR_WIDTH","SIDEBAR_COLLAPSED_WIDTH","useResizeGridColumns","storageKey","position","SidebarPosition","defaultSidebarWidth","minSidebarWidth","isSidebarCollapsed","shallowRef","currentSidebarWidth","storageId","useLocalStorage","screenWidth","useWindowSize","maxWidth","computed","gridColumns","width"],"mappings":"iJAOO,MAAMA,EAA8B,IAC9BC,EAA4B,IAC5BC,EAA8B,IAC9BC,EAA4B,IAC5BC,EAA0B,GAE1BC,EAAuB,CAClCC,EACAC,EAA4BC,EAAgB,QACzC,CACH,MAAMC,EACJF,IAAaC,EAAgB,MACzBR,EACAC,EAEAS,EACJH,IAAaC,EAAgB,MACzBN,EACAC,EAEAQ,EAAqBC,EAAW,EAAK,EAEvC,IAAAC,EAEE,MAAAC,EAAY,GAAGR,CAAU,iBAE3BA,EACoBO,EAAAE,EAAgBD,EAAWL,CAAmB,EAEpEI,EAAsBD,EAAWH,CAAmB,EAGtD,KAAM,CAAE,MAAOO,CAAY,EAAIC,EAAc,EACvCC,EAAWC,EAAS,IAAMH,EAAY,MAAQ,CAAC,EAE/CI,EAAcD,EAAS,IAAM,CACjC,MAAME,EAAQV,EAAmB,MAC7BP,EACAS,EAAoB,MAExB,OAAIN,IAAaC,EAAgB,IACxB,CACL,oBAAqB,OAAOa,CAAK,IAAA,EAG9B,CACL,oBAAqB,GAAGA,CAAK,QAAA,CAC/B,CACD,EAoBM,MAAA,CACL,oBAAAR,EACA,gBAAiBK,EACjB,gBAAAR,EACA,YAAAU,EACA,mBAAAT,EACA,cAxBqBU,GAAkB,CACnCA,GAASX,GAAmBW,GAASH,EAAS,QAElDL,EAAoB,MAAQQ,EAAA,EAsB5B,gBAnBsB,IAAM,CAC5BV,EAAmB,MAAQ,EAAA,EAmB3B,cAhBoB,IAAM,CAC1BA,EAAmB,MAAQ,EAAA,EAgB3B,kBAbwB,IAAM,CAC9BE,EAAoB,MAAQJ,CAAA,CAY5B,CAEJ"}