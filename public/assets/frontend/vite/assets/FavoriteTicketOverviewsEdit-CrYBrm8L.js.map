{"version":3,"file":"FavoriteTicketOverviewsEdit-CrYBrm8L.js","sources":["../../../../../app/frontend/apps/mobile/entities/ticket/graphql/queries/overviewOrder.api.ts","../../../../../app/frontend/apps/mobile/entities/ticket/stores/ticketOverviewOrder.ts","../../../../../app/frontend/apps/mobile/pages/home/components/TicketOverviewEditItem.vue","../../../../../app/frontend/apps/mobile/pages/home/views/FavoriteTicketOverviewsEdit.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { OverviewAttributesFragmentDoc } from '../../../../../../shared/entities/ticket/graphql/fragments/overviewAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketOverviewOrderDocument = gql`\n    query ticketOverviewOrder($withTicketCount: Boolean = false) {\n  ticketOverviews(ignoreUserConditions: true) {\n    ...overviewAttributes\n    viewColumns {\n      key\n      value\n    }\n    orderColumns {\n      key\n      value\n    }\n  }\n}\n    ${OverviewAttributesFragmentDoc}`;\nexport function useTicketOverviewOrderQuery(variables: Types.TicketOverviewOrderQueryVariables | VueCompositionApi.Ref<Types.TicketOverviewOrderQueryVariables> | ReactiveFunction<Types.TicketOverviewOrderQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>(TicketOverviewOrderDocument, variables, options);\n}\nexport function useTicketOverviewOrderLazyQuery(variables: Types.TicketOverviewOrderQueryVariables | VueCompositionApi.Ref<Types.TicketOverviewOrderQueryVariables> | ReactiveFunction<Types.TicketOverviewOrderQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>(TicketOverviewOrderDocument, variables, options);\n}\nexport type TicketOverviewOrderQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketOverviewOrderQuery, Types.TicketOverviewOrderQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { tryOnScopeDispose, watchOnce } from '@vueuse/core'\nimport { keyBy } from 'lodash-es'\nimport { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\n\nimport type {\n  Overview,\n  TicketOverviewsQuery,\n  TicketOverviewUpdatesSubscription,\n  TicketOverviewUpdatesSubscriptionVariables,\n} from '#shared/graphql/types.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport { useTicketOverviewOrderQuery } from '#mobile/entities/ticket/graphql/queries/overviewOrder.api.ts'\nimport { TicketOverviewUpdatesDocument } from '#mobile/entities/ticket/graphql/subscriptions/ticketOverviewUpdates.api.ts'\n\nimport { getTicketOverviewStorage } from '../helpers/ticketOverviewStorage.ts'\n\nexport type TicketOverview = Pick<Overview, 'name' | 'id'>\n\nexport const useTicketOverviewOrderStore = defineStore(\n  'ticketOverviewOrder',\n  () => {\n    const ticketOverviewOrderHandler = new QueryHandler(\n      useTicketOverviewOrderQuery(),\n    )\n\n    // Updates the overviews when overviews got added, updated and/or deleted.\n    ticketOverviewOrderHandler.subscribeToMore<\n      TicketOverviewUpdatesSubscriptionVariables,\n      TicketOverviewUpdatesSubscription\n    >({\n      document: TicketOverviewUpdatesDocument,\n      variables: {\n        ignoreUserConditions: true,\n        withTicketCount: false,\n      },\n      updateQuery(_, { subscriptionData }) {\n        const ticketOverviews =\n          subscriptionData.data.ticketOverviewUpdates?.ticketOverviews\n        // if we return empty array here, the actual query will be aborted, because we have fetchPolicy \"cache-and-network\"\n        // if we return existing value, it will throw an error, because \"overviews\" doesn't exist yet on the query result\n        if (!ticketOverviews) {\n          return null as unknown as TicketOverviewsQuery\n        }\n        return {\n          ticketOverviews,\n        }\n      },\n    })\n\n    const overviewsRaw = ticketOverviewOrderHandler.result()\n    const overviewsLoading = ticketOverviewOrderHandler.loading()\n\n    const overviews = computed(() => {\n      if (!overviewsRaw.value?.ticketOverviews) return []\n\n      return overviewsRaw.value.ticketOverviews.filter(\n        (overview) => overview?.id,\n      )\n    })\n\n    const overviewsByKey = computed(() => keyBy(overviews.value, 'id'))\n\n    const storage = getTicketOverviewStorage()\n\n    const includedIds = ref(new Set<string>(storage.getOverviews()))\n\n    const includedOverviews = computed(() => {\n      return [...includedIds.value]\n        .map((id) => overviewsByKey.value[id])\n        .filter(Boolean)\n    })\n\n    const saveOverviews = (overviews: TicketOverview[]) => {\n      const ids = overviews.map(({ id }) => id)\n      storage.saveOverviews(ids)\n      includedIds.value = new Set(ids)\n    }\n\n    const populateIncludeIds = (overviews: TicketOverview[]) => {\n      overviews.forEach((overview) => {\n        includedIds.value.add(overview.id)\n      })\n\n      saveOverviews(overviews)\n    }\n\n    // store overviews in local storage when loaded\n    // force it to have something\n    if (!includedIds.value.size) {\n      if (!overviews.value.length) {\n        watchOnce(overviews, populateIncludeIds)\n      } else {\n        populateIncludeIds(overviews.value)\n      }\n    }\n\n    tryOnScopeDispose(() => {\n      ticketOverviewOrderHandler.stop()\n    })\n\n    return {\n      overviews,\n      initializing:\n        ticketOverviewOrderHandler.operationResult.forceDisabled.value,\n      loading: overviewsLoading,\n      includedOverviews,\n      includedIds,\n      overviewsByKey,\n      saveOverviews,\n    }\n  },\n)\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport CommonTooltip from '#shared/components/CommonTooltip/CommonTooltip.vue'\nimport type { TooltipItemDescriptor } from '#shared/components/CommonTooltip/types.ts'\n\nimport type { TicketOverview } from '#mobile/entities/ticket/stores/ticketOverviews.ts'\n\nconst props = defineProps<{\n  action: 'add' | 'delete'\n  draggable?: boolean\n  overview: TicketOverview\n}>()\n\nconst emit = defineEmits<{\n  action: []\n  'action-active': [boolean]\n}>()\n\nconst icon = computed(() => {\n  if (props.action === 'add') {\n    return {\n      name: 'plus',\n      class: 'text-green',\n    }\n  }\n\n  return {\n    name: 'minus',\n    class: 'text-red',\n  }\n})\n\nconst hasTooltip = computed(\n  () => props.overview.organizationShared || props.overview.outOfOffice,\n)\n\nconst tooltipMessages = computed(() => {\n  const messages: TooltipItemDescriptor[] = []\n\n  if (props.overview.organizationShared)\n    messages.push({\n      type: 'text',\n      label: __(\n        'This overview is visible only when you are a shared organization member.',\n      ),\n    })\n\n  if (props.overview.outOfOffice)\n    messages.push({\n      type: 'text',\n      label: __(\n        'This overview is visible only when you are an out of office replacement.',\n      ),\n    })\n\n  return messages\n})\n</script>\n\n<template>\n  <div\n    class=\"flex min-h-[54px] cursor-move items-center gap-2 border-b border-gray-300 p-3 last:border-0\"\n    data-test-id=\"overviewItem\"\n    :draggable=\"draggable ? 'true' : undefined\"\n  >\n    <div\n      class=\"shrink-0 cursor-pointer items-center justify-center\"\n      :class=\"icon.class\"\n      role=\"button\"\n      tabindex=\"0\"\n      @keydown.enter=\"emit('action')\"\n      @click=\"emit('action')\"\n      @mousedown=\"emit('action-active', true)\"\n      @mouseup=\"emit('action-active', false)\"\n      @mouseout=\"emit('action-active', false)\"\n      @focusout=\"emit('action-active', false)\"\n      @blur=\"emit('action-active', false)\"\n      @touchstart=\"emit('action-active', true)\"\n      @touchend=\"emit('action-active', false)\"\n      @touchcancel=\"emit('action-active', false)\"\n    >\n      <CommonIcon :name=\"icon.name\" size=\"base\" />\n    </div>\n    <div class=\"flex flex-1 items-center gap-2\">\n      <span class=\"truncate\">{{ $t(overview.name) }}</span>\n      <CommonTooltip\n        v-if=\"hasTooltip\"\n        class=\"shrink-0\"\n        name=\"visibility\"\n        :messages=\"tooltipMessages\"\n        :heading=\"__('Limited Visibility')\"\n      >\n        <CommonIcon name=\"tooltip\" size=\"small\" />\n      </CommonTooltip>\n    </div>\n    <CommonIcon\n      v-if=\"draggable\"\n      name=\"change-order\"\n      size=\"small\"\n      class=\"text-gray shrink-0\"\n    />\n  </div>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { animations, updateConfig } from '@formkit/drag-and-drop'\nimport { dragAndDrop } from '@formkit/drag-and-drop/vue'\nimport { storeToRefs } from 'pinia'\nimport { computed, ref, watch } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useWalker } from '#shared/router/walker.ts'\n\nimport CommonSectionMenu from '#mobile/components/CommonSectionMenu/CommonSectionMenu.vue'\nimport { useHeader } from '#mobile/composables/useHeader.ts'\nimport { useTicketOverviewOrderStore } from '#mobile/entities/ticket/stores/ticketOverviewOrder.ts'\nimport { useTicketOverviewsStore } from '#mobile/entities/ticket/stores/ticketOverviews.ts'\n\nimport TicketOverviewEditItem from '../components/TicketOverviewEditItem.vue'\n\nconst overviewOrderStore = useTicketOverviewOrderStore()\n\nconst {\n  overviews,\n  loading: overviewsLoading,\n  overviewsByKey,\n} = storeToRefs(overviewOrderStore)\n\n// we store local included, so they won't affect home page\nconst includedIds = ref(new Set(overviewOrderStore.includedIds.values()))\n\nwatch(\n  // when overviews are loaded, updated local included\n  () => overviewOrderStore.includedIds,\n  (ids) => {\n    includedIds.value = ids\n  },\n)\n\nconst includedOverviews = computed({\n  get: () => {\n    return [...includedIds.value]\n      .map((id) => overviewsByKey.value[id])\n      .filter(Boolean)\n  },\n  set: (value) => {\n    includedIds.value = new Set(value.map((overview) => overview.id))\n  },\n})\n\nconst dndParentRef = ref()\n\ndragAndDrop({\n  parent: dndParentRef,\n  values: includedOverviews,\n  plugins: [animations()],\n  dropZoneClass: 'opacity-0',\n  touchDropZoneClass: 'opacity-0',\n})\n\nconst { notify } = useNotifications()\n\nconst walker = useWalker()\n\nuseHeader({\n  title: __('Ticket Overview'),\n  backUrl: '/',\n  backAvoidHomeButton: true,\n  actionTitle: __('Save'),\n  onAction() {\n    if (!includedOverviews.value.length) {\n      notify({\n        id: 'no-overview',\n        message: __('Please select at least one ticket overview'),\n        type: NotificationTypes.Error,\n      })\n      return\n    }\n\n    overviewOrderStore.saveOverviews(includedOverviews.value)\n\n    useTicketOverviewsStore().updateOverviews(includedOverviews.value)\n\n    notify({\n      id: 'overview-save',\n      message: __('Ticket Overview settings are saved.'),\n      type: NotificationTypes.Success,\n    })\n    walker.back('/')\n  },\n})\n\nconst excludedOverviews = computed(() => {\n  return overviews.value.filter(\n    (overview) => !includedIds.value.has(overview.id),\n  )\n})\n\nconst removeFromFavorites = (id: string) => {\n  includedIds.value.delete(id)\n}\n\nconst addToFavorites = (id: string) => {\n  includedIds.value.add(id)\n}\n\nconst updateDndDisabledConfig = (disabled: boolean) => {\n  updateConfig(dndParentRef.value, { disabled })\n}\n</script>\n\n<template>\n  <div class=\"mx-4 mt-6\">\n    <div v-if=\"overviewsLoading\" class=\"flex items-center justify-center\">\n      <CommonIcon name=\"loading\" animation=\"spin\" />\n    </div>\n\n    <CommonSectionMenu\n      v-if=\"!overviewsLoading\"\n      :header-label=\"__('Included ticket overviews')\"\n      data-test-id=\"includedOverviews\"\n    >\n      <div ref=\"dndParentRef\">\n        <TicketOverviewEditItem\n          v-for=\"overview in includedOverviews\"\n          :key=\"overview.id\"\n          action=\"delete\"\n          :overview=\"overview\"\n          draggable\n          @action=\"removeFromFavorites(overview.id)\"\n          @action-active=\"updateDndDisabledConfig\"\n        />\n      </div>\n      <div\n        v-if=\"!includedOverviews.length\"\n        class=\"ms-3 flex min-h-[54px] items-center\"\n      >\n        <p>{{ $t('No entries') }}</p>\n      </div>\n    </CommonSectionMenu>\n\n    <CommonSectionMenu\n      v-if=\"!overviewsLoading\"\n      :header-label=\"__('More ticket overviews')\"\n      data-test-id=\"excludedOverviews\"\n    >\n      <TicketOverviewEditItem\n        v-for=\"overview of excludedOverviews\"\n        :key=\"overview.id\"\n        action=\"add\"\n        :overview=\"overview\"\n        @action=\"addToFavorites(overview.id)\"\n      />\n      <div\n        v-if=\"!excludedOverviews.length\"\n        class=\"ms-3 flex min-h-[54px] items-center\"\n      >\n        <p>{{ $t('No entries') }}</p>\n      </div>\n    </CommonSectionMenu>\n  </div>\n</template>\n"],"names":["TicketOverviewOrderDocument","gql","OverviewAttributesFragmentDoc","useTicketOverviewOrderQuery","variables","options","VueApolloComposable.useQuery","useTicketOverviewOrderStore","defineStore","ticketOverviewOrderHandler","QueryHandler","TicketOverviewUpdatesDocument","_","subscriptionData","ticketOverviews","_a","overviewsRaw","overviewsLoading","overviews","computed","overview","overviewsByKey","keyBy","storage","getTicketOverviewStorage","includedIds","ref","includedOverviews","id","saveOverviews","ids","populateIncludeIds","watchOnce","tryOnScopeDispose","props","__props","emit","__emit","icon","hasTooltip","tooltipMessages","messages","overviewOrderStore","storeToRefs","watch","value","dndParentRef","dragAndDrop","animations","notify","useNotifications","walker","useWalker","useHeader","NotificationTypes","useTicketOverviewsStore","excludedOverviews","removeFromFavorites","addToFavorites","updateDndDisabledConfig","disabled","updateConfig"],"mappings":"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"}