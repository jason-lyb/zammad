{"version":3,"file":"user.api-BwewaCks.js","sources":["../../../../../app/frontend/shared/graphql/fragments/userDetailAttributes.api.ts","../../../../../app/frontend/shared/entities/user/graphql/queries/user.api.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ObjectAttributeValuesFragmentDoc } from './objectAttributeValues.api';\nexport const UserDetailAttributesFragmentDoc = gql`\n    fragment userDetailAttributes on User {\n  id\n  internalId\n  firstname\n  lastname\n  fullname\n  outOfOffice\n  outOfOfficeStartAt\n  outOfOfficeEndAt\n  image\n  email\n  web\n  vip\n  phone\n  mobile\n  fax\n  note\n  active\n  objectAttributeValues {\n    ...objectAttributeValues\n  }\n  organization {\n    id\n    internalId\n    name\n    active\n    vip\n    ticketsCount {\n      open\n      closed\n    }\n  }\n  secondaryOrganizations(first: $secondaryOrganizationsCount) {\n    edges {\n      node {\n        id\n        internalId\n        active\n        name\n      }\n    }\n    totalCount\n  }\n  hasSecondaryOrganizations\n  ticketsCount {\n    open\n    closed\n  }\n}\n    ${ObjectAttributeValuesFragmentDoc}`;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserDetailAttributesFragmentDoc } from '../../../../graphql/fragments/userDetailAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserDocument = gql`\n    query user($userId: ID, $userInternalId: Int, $secondaryOrganizationsCount: Int) {\n  user(user: {userId: $userId, userInternalId: $userInternalId}) {\n    ...userDetailAttributes\n    policy {\n      update\n    }\n  }\n}\n    ${UserDetailAttributesFragmentDoc}`;\nexport function useUserQuery(variables: Types.UserQueryVariables | VueCompositionApi.Ref<Types.UserQueryVariables> | ReactiveFunction<Types.UserQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.UserQuery, Types.UserQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserQuery, Types.UserQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserQuery, Types.UserQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.UserQuery, Types.UserQueryVariables>(UserDocument, variables, options);\n}\nexport function useUserLazyQuery(variables: Types.UserQueryVariables | VueCompositionApi.Ref<Types.UserQueryVariables> | ReactiveFunction<Types.UserQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.UserQuery, Types.UserQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserQuery, Types.UserQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserQuery, Types.UserQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.UserQuery, Types.UserQueryVariables>(UserDocument, variables, options);\n}\nexport type UserQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.UserQuery, Types.UserQueryVariables>;"],"names":["UserDetailAttributesFragmentDoc","gql","ObjectAttributeValuesFragmentDoc","UserDocument","useUserQuery","variables","options","VueApolloComposable.useQuery"],"mappings":"2HAIO,MAAMA,EAAkCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkDzCC,CAAgC,GC9CzBC,EAAeF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAStBD,CAA+B,GAC9B,SAASI,EAAaC,EAAqI,GAAIC,EAAqS,CAAA,EAAI,CAC7c,OAAOC,EAAwEJ,EAAcE,EAAWC,CAAO,CACjH"}