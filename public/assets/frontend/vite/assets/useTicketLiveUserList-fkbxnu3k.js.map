{"version":3,"file":"useTicketLiveUserList-fkbxnu3k.js","sources":["../../../../../app/frontend/shared/entities/ticket/graphql/mutations/update.api.ts","../../../../../app/frontend/shared/entities/ticket/composables/useTicketEdit.ts","../../../../../app/frontend/shared/entities/ticket/composables/useTicketEditForm.ts","../../../../../app/frontend/shared/entities/ticket/graphql/fragments/ticketLiveUserAttributes.api.ts","../../../../../app/frontend/shared/entities/ticket/graphql/subscriptions/ticketLiveUserUpdates.api.ts","../../../../../app/frontend/shared/entities/ticket/composables/useTicketLiveUserList.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketAttributesFragmentDoc } from '../fragments/ticketAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketUpdateDocument = gql`\n    mutation ticketUpdate($ticketId: ID!, $input: TicketUpdateInput!, $meta: TicketUpdateMetaInput!) {\n  ticketUpdate(ticketId: $ticketId, input: $input, meta: $meta) {\n    ticket {\n      ...ticketAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${TicketAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useTicketUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketUpdateMutation, Types.TicketUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketUpdateMutation, Types.TicketUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketUpdateMutation, Types.TicketUpdateMutationVariables>(TicketUpdateDocument, options);\n}\nexport type TicketUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketUpdateMutation, Types.TicketUpdateMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { isEqual } from 'lodash-es'\nimport { computed, ref, watch } from 'vue'\n\nimport { populateEditorNewLines } from '#shared/components/Form/fields/FieldEditor/utils.ts'\nimport type {\n  FormValues,\n  FormRef,\n  FormSubmitData,\n} from '#shared/components/Form/types.ts'\nimport { getNodeByName } from '#shared/components/Form/utils.ts'\nimport { useObjectAttributeFormData } from '#shared/entities/object-attributes/composables/useObjectAttributeFormData.ts'\nimport { useObjectAttributes } from '#shared/entities/object-attributes/composables/useObjectAttributes.ts'\nimport { useTicketUpdateMutation } from '#shared/entities/ticket/graphql/mutations/update.api.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport type { TicketArticleFormValues } from '#shared/entities/ticket-article/action/plugins/types.ts'\nimport type {\n  TicketUpdateInput,\n  TicketUpdateMetaInput,\n} from '#shared/graphql/types.ts'\nimport { EnumObjectManagerObjects } from '#shared/graphql/types.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { GraphQLHandlerError } from '#shared/types/error.ts'\nimport type { PartialRequired } from '#shared/types/utils.ts'\nimport { convertFilesToAttachmentInput } from '#shared/utils/files.ts'\n\nimport type { ComputedRef, ShallowRef } from 'vue'\n\ntype TicketArticleReceivedFormValues = PartialRequired<\n  TicketArticleFormValues,\n  // form always has these values\n  'articleType' | 'body' | 'internal'\n>\n\nconst TICKET_FORM_RELEVANT_KEYS = [\n  'id',\n  'group',\n  'owner',\n  'state',\n  'pending_time',\n  'priority',\n  'customer',\n  'organization',\n  'objectAttributeValues',\n]\n\nexport const useTicketEdit = (\n  ticket: ComputedRef<TicketById | undefined>,\n  form: ShallowRef<FormRef | undefined>,\n  errorCallback?: (error: GraphQLHandlerError) => boolean,\n) => {\n  const initialTicketValue = ref<FormValues>()\n\n  const mutationUpdate = new MutationHandler(useTicketUpdateMutation(), {\n    errorCallback,\n    errorNotificationMessage: __('Ticket update failed.'),\n  })\n\n  const ticketFormRelatedData = computed<Partial<TicketById>>(\n    (currentTicketFormRelatedData) => {\n      if (!ticket.value) return {}\n\n      const newTicketFormRelatedData = (\n        TICKET_FORM_RELEVANT_KEYS as Array<keyof TicketById>\n      ).reduce<Partial<TicketById>>((relevantData, key) => {\n        if (!ticket.value || !(key in ticket.value)) return relevantData\n\n        relevantData[key] = ticket.value[key]\n\n        return relevantData\n      }, {})\n\n      if (\n        currentTicketFormRelatedData &&\n        isEqual(newTicketFormRelatedData, currentTicketFormRelatedData)\n      ) {\n        return currentTicketFormRelatedData\n      }\n\n      return newTicketFormRelatedData\n    },\n  )\n\n  watch(\n    ticketFormRelatedData,\n    () => {\n      if (!ticket.value) {\n        return\n      }\n\n      const { internalId: ownerInternalId } = ticket.value.owner\n\n      initialTicketValue.value = {\n        id: ticket.value.id,\n        owner_id: ownerInternalId === 1 ? null : ownerInternalId,\n        isDefaultFollowUpStateSet: undefined, // the default value for reset situations.\n      }\n\n      if (!form.value?.formInitialSettled) return\n\n      form.value?.resetForm(\n        {\n          values: initialTicketValue.value,\n          object: ticket.value,\n        },\n        {\n          resetDirty: false,\n        },\n      )\n    },\n    { immediate: true },\n  )\n\n  const isTicketFormGroupValid = computed(() => {\n    const ticketGroup = form.value?.formNode?.at('ticket')\n    return !!ticketGroup?.context?.state.valid\n  })\n\n  const { attributesLookup: ticketObjectAttributesLookup } =\n    useObjectAttributes(EnumObjectManagerObjects.Ticket)\n\n  const processArticle = (\n    formId: string,\n    article: TicketArticleReceivedFormValues | undefined,\n  ) => {\n    if (!article) return null\n\n    const contentType =\n      getNodeByName(formId, 'body')?.context?.contentType || 'text/html'\n\n    if (contentType === 'text/html') {\n      article.body = populateEditorNewLines(article.body)\n    }\n\n    return {\n      type: article.articleType,\n      body: article.body,\n      internal: article.internal,\n      cc: article.cc,\n      to: article.to,\n      subject: article.subject,\n      subtype: article.subtype,\n      inReplyTo: article.inReplyTo,\n      contentType,\n      attachments: convertFilesToAttachmentInput(formId, article.attachments),\n      security: article.security,\n      timeUnit: article.timeUnit,\n      accountedTimeTypeId: article.accountedTimeTypeId,\n    }\n  }\n\n  const editTicket = async (\n    formData: FormSubmitData,\n    meta?: TicketUpdateMetaInput,\n  ) => {\n    if (!ticket.value || !form.value) return undefined\n\n    if (!formData.owner_id) {\n      formData.owner_id = 1\n    }\n\n    const { internalObjectAttributeValues, additionalObjectAttributeValues } =\n      useObjectAttributeFormData(ticketObjectAttributesLookup.value, formData)\n\n    const formArticle = formData.article as\n      | TicketArticleReceivedFormValues\n      | undefined\n    const article = processArticle(form.value.formId, formArticle)\n\n    const ticketMeta = meta || {}\n\n    return mutationUpdate.send({\n      ticketId: ticket.value.id,\n      input: {\n        ...internalObjectAttributeValues,\n        objectAttributeValues: additionalObjectAttributeValues,\n        article,\n      } as TicketUpdateInput,\n      meta: ticketMeta,\n    })\n  }\n\n  return {\n    initialTicketValue,\n    isTicketFormGroupValid,\n    editTicket,\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { keyBy } from 'lodash-es'\nimport { computed, shallowRef } from 'vue'\n\nimport type { FieldEditorContext } from '#shared/components/Form/fields/FieldEditor/types.ts'\nimport { FormHandlerExecution } from '#shared/components/Form/types.ts'\nimport type {\n  ChangedField,\n  ReactiveFormSchemData,\n  FormHandlerFunction,\n  FormRef,\n} from '#shared/components/Form/types.ts'\nimport { useAppName } from '#shared/composables/useAppName.ts'\nimport { useTicketView } from '#shared/entities/ticket/composables/useTicketView.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { createArticleTypes } from '#shared/entities/ticket-article/action/plugins/index.ts'\nimport type {\n  AppSpecificTicketArticleType,\n  TicketArticleTypeFields,\n} from '#shared/entities/ticket-article/action/plugins/types.ts'\nimport { EnumObjectManagerObjects } from '#shared/graphql/types.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport type { FormKitNode } from '@formkit/core'\nimport type { Ref } from 'vue'\n\nexport const useTicketEditForm = (\n  ticket: Ref<TicketById | undefined>,\n  form: Ref<FormRef | undefined>,\n) => {\n  const appName = useAppName()\n\n  const ticketArticleTypes = computed(() => {\n    return ticket.value ? createArticleTypes(ticket.value, appName) : []\n  })\n\n  const ticketArticleTypeValueLookup = computed(() =>\n    keyBy(ticketArticleTypes.value, 'value'),\n  )\n\n  const currentArticleType = shallowRef<AppSpecificTicketArticleType>()\n\n  const recipientContact = computed(\n    () => currentArticleType.value?.options?.recipientContact,\n  )\n  const editorType = computed(() => currentArticleType.value?.contentType)\n\n  const editorMeta = computed(() => {\n    return {\n      mentionText: {\n        groupNodeName: 'group_id',\n      },\n      mentionUser: {\n        groupNodeName: 'group_id',\n      },\n      mentionKnowledgeBase: {\n        attachmentsNodeName: 'attachments',\n      },\n      ...currentArticleType.value?.editorMeta,\n    }\n  })\n\n  const articleTypeFields = [\n    'to',\n    'cc',\n    'subject',\n    'body',\n    'attachments',\n    'security',\n  ] as const\n\n  const articleTypeFieldProps = articleTypeFields.reduce((acc, field) => {\n    acc[field] = {\n      validation: computed(\n        () => currentArticleType.value?.fields?.[field]?.validation || null,\n      ),\n      required: computed(\n        () => !!currentArticleType.value?.fields?.[field]?.required,\n      ),\n    }\n\n    return acc\n  }, {} as TicketArticleTypeFields)\n\n  const { isTicketAgent, isTicketCustomer, isTicketEditable } =\n    useTicketView(ticket)\n\n  const isMobileApp = appName === 'mobile'\n\n  const ticketSchema = {\n    type: 'group',\n    name: 'ticket', // will be flattened in the form submit result\n    isGroupOrList: true,\n    children: [\n      ...(isMobileApp\n        ? [\n            {\n              name: 'title',\n              type: 'text',\n              label: __('Ticket title'),\n              required: true,\n            },\n          ]\n        : []),\n      {\n        type: 'hidden',\n        name: 'isDefaultFollowUpStateSet',\n      },\n      {\n        screen: 'edit',\n        object: EnumObjectManagerObjects.Ticket,\n      },\n    ],\n  }\n\n  const articleSchema = {\n    // Desktop is handling the condition on top for the teleport.\n    if: isMobileApp\n      ? '$newTicketArticleRequested || $newTicketArticlePresent'\n      : undefined,\n    type: 'group',\n    name: 'article',\n    isGroupOrList: true,\n    children: [\n      {\n        type: 'hidden',\n        name: 'inReplyTo',\n      },\n      {\n        if: '$currentArticleType.fields.subtype',\n        type: 'hidden',\n        name: 'subtype',\n      },\n      {\n        name: 'articleType',\n        label: __('Channel'),\n        labelSrOnly: isMobileApp,\n        type: 'select',\n        hidden: computed(() => ticketArticleTypes.value.length === 1),\n        props: {\n          // We need to disable the auto preselection when the field\n          // is initialized, so that we have a correct dirty state.\n          noInitialAutoPreselect: true,\n          options: ticketArticleTypes,\n        },\n      },\n      {\n        name: 'internal',\n        label: __('Visibility'),\n        labelSrOnly: isMobileApp,\n        hidden: isTicketCustomer,\n        type: 'select',\n        props: {\n          options: [\n            {\n              value: true,\n              label: __('Internal'),\n              icon: 'lock',\n            },\n            {\n              value: false,\n              label: __('Public'),\n              icon: 'unlock',\n            },\n          ],\n        },\n      },\n      {\n        if: '$currentArticleType.fields.to',\n        name: 'to',\n        label: __('To'),\n        type: 'recipient',\n        validation: articleTypeFieldProps.to.validation,\n        props: {\n          contact: recipientContact,\n          multiple: true,\n        },\n        required: articleTypeFieldProps.to.required,\n      },\n      {\n        if: '$currentArticleType.fields.cc',\n        name: 'cc',\n        label: __('CC'),\n        type: 'recipient',\n        validation: articleTypeFieldProps.cc.validation,\n        props: {\n          contact: recipientContact,\n          multiple: true,\n        },\n      },\n      {\n        if: '$currentArticleType.fields.subject',\n        name: 'subject',\n        label: __('Subject'),\n        type: 'text',\n        validation: articleTypeFieldProps.subject.validation,\n        props: {\n          maxlength: 200,\n        },\n        required: articleTypeFieldProps.subject.required,\n      },\n      {\n        if: '$securityIntegration === true && $currentArticleType.fields.security',\n        name: 'security',\n        label: __('Security'),\n        type: 'security',\n        validation: articleTypeFieldProps.security.validation,\n      },\n      {\n        name: 'body',\n        screen: 'edit',\n        object: EnumObjectManagerObjects.TicketArticle,\n        validation: articleTypeFieldProps.body.validation,\n        props: {\n          ticketId: computed(() => ticket.value?.internalId),\n          customerId: computed(() => ticket.value?.customer.internalId),\n          contentType: editorType,\n          meta: editorMeta,\n        },\n        required: articleTypeFieldProps.body.required,\n      },\n      {\n        if: '$currentArticleType.fields.attachments',\n        type: 'file',\n        name: 'attachments',\n        label: __('Attachment'),\n        labelSrOnly: true,\n        validation: articleTypeFieldProps.attachments.validation,\n        props: {\n          multiple: computed(() =>\n            Boolean(\n              typeof currentArticleType.value?.fields?.attachments?.multiple ===\n                'boolean'\n                ? currentArticleType.value?.fields?.attachments?.multiple\n                : true,\n            ),\n          ),\n          allowedFiles: computed(\n            () =>\n              currentArticleType.value?.fields?.attachments?.allowedFiles ||\n              null,\n          ),\n          accept: computed(\n            () => currentArticleType.value?.fields?.attachments?.accept || null,\n          ),\n        },\n        required: articleTypeFieldProps.attachments.required,\n      },\n    ],\n  }\n\n  const articleTypeChangeHandler = () => {\n    const executeTypeChangeHandler = (\n      execution: FormHandlerExecution,\n      schemaData: ReactiveFormSchemData,\n      changedField?: ChangedField,\n    ) => {\n      if (!schemaData.fields.articleType) return false\n      return !(\n        execution === FormHandlerExecution.FieldChange &&\n        (!changedField || changedField.name !== 'articleType')\n      )\n    }\n\n    const handleArticleType: FormHandlerFunction = (\n      execution,\n      reactivity,\n      data,\n    ) => {\n      const { formNode, changedField, formUpdaterData } = data\n      const { schemaData } = reactivity\n\n      if (\n        execution === FormHandlerExecution.Initial &&\n        formUpdaterData?.fields.articleType?.value\n      ) {\n        currentArticleType.value =\n          ticketArticleTypeValueLookup.value[\n            formUpdaterData.fields.articleType.value\n          ]\n      }\n\n      if (\n        !executeTypeChangeHandler(execution, schemaData, changedField) ||\n        !ticket.value ||\n        !formNode\n      )\n        return\n\n      const body = formNode.find('body', 'name')\n      const context = {\n        body: body?.context as unknown as FieldEditorContext,\n      }\n\n      if (changedField?.newValue !== changedField?.oldValue) {\n        currentArticleType.value?.onDeselected?.(ticket.value, context)\n      }\n\n      if (!changedField?.newValue) return\n      const newType =\n        ticketArticleTypeValueLookup.value[changedField?.newValue as string]\n      if (!newType) return\n\n      if (!formNode.context?._open) {\n        newType.onSelected?.(ticket.value, context, form.value)\n      }\n      currentArticleType.value = newType\n\n      formNode.find('internal')?.input(newType.internal, false)\n    }\n\n    return {\n      execution: [\n        FormHandlerExecution.Initial,\n        FormHandlerExecution.FieldChange,\n      ],\n      callback: handleArticleType,\n    }\n  }\n\n  const articleTypeSelectHandler = (formNode: FormKitNode) => {\n    // this is called only when user replied to an article, but the type inside form did not change\n    // (because dialog was opened before, and type was changed then, but we still need to trigger select, because visually it's what happens)\n    formNode.on('article-reply-open', ({ payload }) => {\n      if (!payload || !ticket.value) return\n\n      const articleType = ticketArticleTypeValueLookup.value[payload as string]\n\n      if (!articleType) return\n      const body = formNode.find('body', 'name') as FormKitNode\n      const context = {\n        body: body.context as unknown as FieldEditorContext,\n      }\n      articleType.onOpened?.(ticket.value, context, form.value)\n    })\n  }\n\n  const application = useApplicationStore()\n\n  const securityIntegration = computed<boolean>(\n    () =>\n      (application.config.smime_integration ||\n        application.config.pgp_integration) ??\n      false,\n  )\n\n  return {\n    ticketSchema,\n    articleSchema,\n    currentArticleType,\n    ticketArticleTypes,\n    securityIntegration,\n    isTicketAgent,\n    isTicketCustomer,\n    isTicketEditable,\n    articleTypeHandler: articleTypeChangeHandler,\n    articleTypeSelectHandler,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const TicketLiveUserAttributesFragmentDoc = gql`\n    fragment ticketLiveUserAttributes on TicketLiveUser {\n  user {\n    id\n    firstname\n    lastname\n    fullname\n    email\n    vip\n    outOfOffice\n    outOfOfficeStartAt\n    outOfOfficeEndAt\n    active\n    image\n  }\n  apps {\n    name\n    editing\n    lastInteraction\n  }\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketLiveUserAttributesFragmentDoc } from '../fragments/ticketLiveUserAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketLiveUserUpdatesDocument = gql`\n    subscription ticketLiveUserUpdates($key: String!, $app: EnumTaskbarApp!) {\n  ticketLiveUserUpdates(key: $key, app: $app) {\n    liveUsers {\n      ...ticketLiveUserAttributes\n    }\n  }\n}\n    ${TicketLiveUserAttributesFragmentDoc}`;\nexport function useTicketLiveUserUpdatesSubscription(variables: Types.TicketLiveUserUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.TicketLiveUserUpdatesSubscriptionVariables> | ReactiveFunction<Types.TicketLiveUserUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.TicketLiveUserUpdatesSubscription, Types.TicketLiveUserUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.TicketLiveUserUpdatesSubscription, Types.TicketLiveUserUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.TicketLiveUserUpdatesSubscription, Types.TicketLiveUserUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.TicketLiveUserUpdatesSubscription, Types.TicketLiveUserUpdatesSubscriptionVariables>(TicketLiveUserUpdatesDocument, variables, options);\n}\nexport type TicketLiveUserUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.TicketLiveUserUpdatesSubscription, Types.TicketLiveUserUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { type Ref, type ComputedRef } from 'vue'\nimport { ref } from 'vue'\n\nimport { useAppName } from '#shared/composables/useAppName.ts'\nimport { useTicketLiveUserUpdatesSubscription } from '#shared/entities/ticket/graphql/subscriptions/ticketLiveUserUpdates.api.ts'\nimport type { TicketLiveAppUser } from '#shared/entities/ticket/types.ts'\nimport { EnumTaskbarApp } from '#shared/graphql/types.ts'\nimport type { TicketLiveUser } from '#shared/graphql/types.ts'\nimport { SubscriptionHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nexport const useTicketLiveUserList = (\n  ticketInternalId: Ref<string>,\n  isTicketAgent: ComputedRef<boolean>,\n  app: EnumTaskbarApp,\n) => {\n  const liveUserList = ref<TicketLiveAppUser[]>([])\n\n  const { userId } = useSessionStore()\n\n  const appName = useAppName()\n\n  const updateLiveUserList = (liveUsers: TicketLiveUser[]) => {\n    const mappedLiveUsers: TicketLiveAppUser[] = []\n\n    liveUsers.forEach((liveUser) => {\n      let appItems = liveUser.apps.filter((data) => data.editing)\n\n      // Skip own live user item, when it's holds only the current app and is not editing on the other one.\n      if (liveUser.user.id === userId) {\n        if (appItems.length === 0) return\n\n        appItems = appItems.filter((item) => item.name !== appName)\n\n        if (appItems.length === 0) return\n      }\n\n      if (appItems.length === 0) {\n        appItems = liveUser.apps\n      }\n\n      // Sort app items by last interaction.\n      appItems.sort((a, b) => {\n        return (\n          new Date(b.lastInteraction).getTime() -\n          new Date(a.lastInteraction).getTime()\n        )\n      })\n\n      mappedLiveUsers.push({\n        user: liveUser.user,\n        ...appItems[0],\n        app: appItems[0].name,\n      })\n    })\n\n    return mappedLiveUsers\n  }\n\n  const liveUserSubscription = new SubscriptionHandler(\n    useTicketLiveUserUpdatesSubscription(\n      () => ({\n        key: `Ticket-${ticketInternalId.value}`,\n        app,\n      }),\n      () => ({\n        // We need to disable the cache here, because otherwise we have the following error, when\n        // a ticket is open again which is already in the subscription cache:\n        // \"ApolloError: 'get' on proxy: property 'liveUsers' is a read-only and non-configurable data property on the proxy target but the proxy did not return its actual value (expected '[object Array]' but got '[object Array]')\"\n        // At the end a cache for the subscription is not really needed, but we should create an issue on\n        // apollo client side, when we have a minimal reproduction.\n        fetchPolicy: 'no-cache',\n        enabled: isTicketAgent.value,\n      }),\n    ),\n  )\n\n  liveUserSubscription.onResult((result) => {\n    liveUserList.value = updateLiveUserList(\n      (result.data?.ticketLiveUserUpdates.liveUsers as TicketLiveUser[]) || [],\n    )\n  })\n\n  return {\n    liveUserList,\n  }\n}\n"],"names":["TicketUpdateDocument","gql","TicketAttributesFragmentDoc","ErrorsFragmentDoc","useTicketUpdateMutation","options","VueApolloComposable.useMutation","TICKET_FORM_RELEVANT_KEYS","useTicketEdit","ticket","form","errorCallback","initialTicketValue","ref","mutationUpdate","MutationHandler","ticketFormRelatedData","computed","currentTicketFormRelatedData","newTicketFormRelatedData","relevantData","key","isEqual","watch","ownerInternalId","_a","_b","isTicketFormGroupValid","ticketGroup","_c","ticketObjectAttributesLookup","useObjectAttributes","EnumObjectManagerObjects","processArticle","formId","article","contentType","getNodeByName","populateEditorNewLines","convertFilesToAttachmentInput","formData","meta","internalObjectAttributeValues","additionalObjectAttributeValues","useObjectAttributeFormData","formArticle","ticketMeta","useTicketEditForm","appName","useAppName","ticketArticleTypes","createArticleTypes","ticketArticleTypeValueLookup","keyBy","currentArticleType","shallowRef","recipientContact","editorType","editorMeta","articleTypeFieldProps","acc","field","isTicketAgent","isTicketCustomer","isTicketEditable","useTicketView","isMobileApp","ticketSchema","articleSchema","_f","_e","_d","articleTypeChangeHandler","executeTypeChangeHandler","execution","schemaData","changedField","FormHandlerExecution","handleArticleType","reactivity","data","formNode","formUpdaterData","body","context","newType","articleTypeSelectHandler","payload","articleType","application","useApplicationStore","securityIntegration","TicketLiveUserAttributesFragmentDoc","TicketLiveUserUpdatesDocument","useTicketLiveUserUpdatesSubscription","variables","VueApolloComposable.useSubscription","useTicketLiveUserList","ticketInternalId","app","liveUserList","userId","useSessionStore","updateLiveUserList","liveUsers","mappedLiveUsers","liveUser","appItems","item","a","b","SubscriptionHandler","result"],"mappings":"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"}