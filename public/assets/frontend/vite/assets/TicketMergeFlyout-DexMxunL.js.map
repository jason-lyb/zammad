{"version":3,"file":"TicketMergeFlyout-DexMxunL.js","sources":["../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketDetailView/actions/TicketMerge/TicketMergeFlyout.vue"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { useTicketMergeMutation } from '#shared/entities/ticket/graphql/mutations/merge.api.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { getIdFromGraphQLId } from '#shared/graphql/utils.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport CommonFlyout from '#desktop/components/CommonFlyout/CommonFlyout.vue'\nimport type { ActionFooterOptions } from '#desktop/components/CommonFlyout/types.ts'\nimport { closeFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport { useUserCurrentTaskbarTabsStore } from '#desktop/entities/user/current/stores/taskbarTabs.ts'\nimport TicketRelationAndRecentLists from '#desktop/pages/ticket/components/TicketDetailView/TicketRelationAndRecentLists/TicketRelationAndRecentLists.vue'\nimport { useTargetTicketOptions } from '#desktop/pages/ticket/composables/useTargetTicketOptions.ts'\n\ninterface Props {\n  ticket: TicketById\n  currentTaskbarTabId?: string\n}\n\nconst { deleteTaskbarTab } = useUserCurrentTaskbarTabsStore()\n\nconst props = defineProps<Props>()\n\nconst { form, updateFieldValues, onChangedField } = useForm()\n\nconst { formListTargetTicketOptions, targetTicketId, handleTicketClick } =\n  useTargetTicketOptions(onChangedField, updateFieldValues)\n\nconst mergeFormSchema = [\n  {\n    name: 'targetTicketId',\n    type: 'ticket',\n    label: __('Target ticket'),\n    exceptTicketInternalId: props.ticket.internalId,\n    options: formListTargetTicketOptions,\n    clearable: true,\n    required: true,\n  },\n]\n\nconst mergeMutation = new MutationHandler(useTicketMergeMutation(), {\n  errorShowNotification: false,\n})\n\nconst router = useRouter()\n\nconst { notify } = useNotifications()\n\nconst fllyoutName = 'ticket-merge'\n\nconst submitMerge = async (formData: Record<'targetTicketId', string>) => {\n  const { targetTicketId } = formData\n\n  await mergeMutation.send({\n    sourceTicketId: props.ticket.id,\n    targetTicketId,\n  })\n\n  notify({\n    type: NotificationTypes.Success,\n    message: __('Ticket merged successfully'),\n  })\n\n  return () => {\n    closeFlyout(fllyoutName)\n    if (props.currentTaskbarTabId) deleteTaskbarTab(props.currentTaskbarTabId)\n    router.push(`/ticket/${getIdFromGraphQLId(targetTicketId)}`)\n  }\n}\n\nconst footerActionOptions = computed<ActionFooterOptions>(() => ({\n  actionButton: {\n    variant: 'submit',\n    type: 'submit',\n  },\n  actionLabel: __('Merge'),\n  form: form.value,\n}))\n</script>\n\n<template>\n  <CommonFlyout\n    :header-title=\"__('Merge Tickets')\"\n    header-icon=\"merge\"\n    size=\"large\"\n    no-close-on-action\n    :footer-action-options=\"footerActionOptions\"\n    :name=\"fllyoutName\"\n  >\n    <div class=\"space-y-6\">\n      <Form\n        ref=\"form\"\n        :schema=\"mergeFormSchema\"\n        should-autofocus\n        @submit=\"\n          submitMerge(\n            $event as FormSubmitData<Record<'targetTicketId', string>>,\n          )\n        \"\n      />\n\n      <TicketRelationAndRecentLists\n        :customer-id=\"ticket.customer.id\"\n        :internal-ticket-id=\"ticket.internalId\"\n        :selected-ticket-id=\"targetTicketId\"\n        @click-ticket=\"handleTicketClick\"\n      />\n    </div>\n  </CommonFlyout>\n</template>\n"],"names":["fllyoutName","deleteTaskbarTab","useUserCurrentTaskbarTabsStore","props","__props","form","updateFieldValues","onChangedField","useForm","formListTargetTicketOptions","targetTicketId","handleTicketClick","useTargetTicketOptions","mergeFormSchema","mergeMutation","MutationHandler","useTicketMergeMutation","router","useRouter","notify","useNotifications","submitMerge","formData","NotificationTypes","closeFlyout","getIdFromGraphQLId","footerActionOptions","computed"],"mappings":"w9CA2DMA,EAAc,kGA7Bd,KAAA,CAAE,iBAAAC,GAAqBC,IAEvBC,EAAQC,EAER,CAAE,KAAAC,EAAM,kBAAAC,EAAmB,eAAAC,GAAmBC,EAAQ,EAEtD,CAAE,4BAAAC,EAA6B,eAAAC,EAAgB,kBAAAC,CACnD,EAAAC,EAAuBL,EAAgBD,CAAiB,EAEpDO,EAAkB,CACtB,CACE,KAAM,iBACN,KAAM,SACN,MAAO,GAAG,eAAe,EACzB,uBAAwBV,EAAM,OAAO,WACrC,QAASM,EACT,UAAW,GACX,SAAU,EACZ,CAAA,EAGIK,EAAgB,IAAIC,EAAgBC,IAA0B,CAClE,sBAAuB,EAAA,CACxB,EAEKC,EAASC,IAET,CAAE,OAAAC,GAAWC,IAIbC,EAAc,MAAOC,GAA+C,CAClE,KAAA,CAAE,eAAAZ,CAAmB,EAAAY,EAE3B,aAAMR,EAAc,KAAK,CACvB,eAAgBX,EAAM,OAAO,GAC7B,eAAAO,CAAA,CACD,EAEMS,EAAA,CACL,KAAMI,EAAkB,QACxB,QAAS,GAAG,4BAA4B,CAAA,CACzC,EAEM,IAAM,CACXC,EAAYxB,CAAW,EACnBG,EAAM,qBAAsCF,EAAAE,EAAM,mBAAmB,EACzEc,EAAO,KAAK,WAAWQ,EAAmBf,CAAc,CAAC,EAAE,CAAA,CAC7D,EAGIgB,EAAsBC,EAA8B,KAAO,CAC/D,aAAc,CACZ,QAAS,SACT,KAAM,QACR,EACA,YAAa,GAAG,OAAO,EACvB,KAAMtB,EAAK,KACX,EAAA"}