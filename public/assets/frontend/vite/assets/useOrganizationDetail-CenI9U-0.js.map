{"version":3,"file":"useOrganizationDetail-CenI9U-0.js","sources":["../../../../../app/frontend/shared/entities/organization/graphql/fragments/organizationMembers.api.ts","../../../../../app/frontend/shared/entities/organization/graphql/queries/organization.api.ts","../../../../../app/frontend/shared/entities/organization/graphql/subscriptions/organizationUpdates.api.ts","../../../../../app/frontend/shared/entities/organization/composables/useOrganizationDetail.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const OrganizationMembersFragmentDoc = gql`\n    fragment organizationMembers on Organization {\n  allMembers(first: $membersCount) {\n    edges {\n      node {\n        id\n        internalId\n        image\n        firstname\n        lastname\n        fullname\n        email\n        phone\n        outOfOffice\n        outOfOfficeStartAt\n        outOfOfficeEndAt\n        active\n        vip\n      }\n    }\n    totalCount\n  }\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { OrganizationAttributesFragmentDoc } from '../fragments/organizationAttributes.api';\nimport { OrganizationMembersFragmentDoc } from '../fragments/organizationMembers.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const OrganizationDocument = gql`\n    query organization($organizationId: ID, $organizationInternalId: Int, $membersCount: Int) {\n  organization(\n    organization: {organizationId: $organizationId, organizationInternalId: $organizationInternalId}\n  ) {\n    policy {\n      update\n    }\n    ...organizationAttributes\n    ...organizationMembers\n  }\n}\n    ${OrganizationAttributesFragmentDoc}\n${OrganizationMembersFragmentDoc}`;\nexport function useOrganizationQuery(variables: Types.OrganizationQueryVariables | VueCompositionApi.Ref<Types.OrganizationQueryVariables> | ReactiveFunction<Types.OrganizationQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.OrganizationQuery, Types.OrganizationQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.OrganizationQuery, Types.OrganizationQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.OrganizationQuery, Types.OrganizationQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.OrganizationQuery, Types.OrganizationQueryVariables>(OrganizationDocument, variables, options);\n}\nexport function useOrganizationLazyQuery(variables: Types.OrganizationQueryVariables | VueCompositionApi.Ref<Types.OrganizationQueryVariables> | ReactiveFunction<Types.OrganizationQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.OrganizationQuery, Types.OrganizationQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.OrganizationQuery, Types.OrganizationQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.OrganizationQuery, Types.OrganizationQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.OrganizationQuery, Types.OrganizationQueryVariables>(OrganizationDocument, variables, options);\n}\nexport type OrganizationQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.OrganizationQuery, Types.OrganizationQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { OrganizationAttributesFragmentDoc } from '../fragments/organizationAttributes.api';\nimport { OrganizationMembersFragmentDoc } from '../fragments/organizationMembers.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const OrganizationUpdatesDocument = gql`\n    subscription organizationUpdates($organizationId: ID!, $membersCount: Int) {\n  organizationUpdates(organizationId: $organizationId) {\n    organization {\n      ...organizationAttributes\n      ...organizationMembers\n    }\n  }\n}\n    ${OrganizationAttributesFragmentDoc}\n${OrganizationMembersFragmentDoc}`;\nexport function useOrganizationUpdatesSubscription(variables: Types.OrganizationUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.OrganizationUpdatesSubscriptionVariables> | ReactiveFunction<Types.OrganizationUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.OrganizationUpdatesSubscription, Types.OrganizationUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.OrganizationUpdatesSubscription, Types.OrganizationUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.OrganizationUpdatesSubscription, Types.OrganizationUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.OrganizationUpdatesSubscription, Types.OrganizationUpdatesSubscriptionVariables>(OrganizationUpdatesDocument, variables, options);\n}\nexport type OrganizationUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.OrganizationUpdatesSubscription, Types.OrganizationUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { storeToRefs } from 'pinia'\nimport { computed, ref, type Ref } from 'vue'\n\nimport type {\n  OrganizationUpdatesSubscriptionVariables,\n  OrganizationUpdatesSubscription,\n} from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { GraphQLHandlerError } from '#shared/types/error.ts'\nimport { normalizeEdges } from '#shared/utils/helpers.ts'\n\nimport { useOrganizationQuery } from '../graphql/queries/organization.api.ts'\nimport { OrganizationUpdatesDocument } from '../graphql/subscriptions/organizationUpdates.api.ts'\nimport { useOrganizationObjectAttributesStore } from '../stores/objectAttributes.ts'\n\nimport type { WatchQueryFetchPolicy } from '@apollo/client/core'\n\nexport const useOrganizationDetail = (\n  internalId: Ref<number | undefined>,\n  errorCallback?: (error: GraphQLHandlerError) => boolean,\n  fetchPolicy?: WatchQueryFetchPolicy,\n) => {\n  const organizationId = computed(() => {\n    if (!internalId.value) return\n\n    return convertToGraphQLId('Organization', internalId.value)\n  })\n  const fetchMembersCount = ref<Maybe<number>>(3)\n\n  const organizationQuery = new QueryHandler(\n    useOrganizationQuery(\n      () => ({\n        organizationInternalId: internalId.value,\n        membersCount: 3,\n      }),\n      () => ({\n        enabled: Boolean(internalId.value),\n        fetchPolicy,\n      }),\n    ),\n    {\n      errorCallback,\n    },\n  )\n\n  organizationQuery.subscribeToMore<\n    OrganizationUpdatesSubscriptionVariables,\n    OrganizationUpdatesSubscription\n  >(() => ({\n    document: OrganizationUpdatesDocument,\n    variables: {\n      organizationId: organizationId.value!,\n      membersCount: fetchMembersCount.value,\n    },\n  }))\n\n  const organizationResult = organizationQuery.result()\n  const loading = organizationQuery.loading()\n\n  const organization = computed(() => organizationResult.value?.organization)\n\n  const loadAllMembers = () => {\n    const organizationInternalId = organization.value?.internalId\n    if (!organizationInternalId) {\n      return\n    }\n\n    organizationQuery\n      .refetch({\n        organizationInternalId,\n        membersCount: null,\n      })\n      .then(() => {\n        fetchMembersCount.value = null\n      })\n  }\n\n  const { viewScreenAttributes } = storeToRefs(\n    useOrganizationObjectAttributesStore(),\n  )\n\n  const organizationMembers = computed(\n    () => normalizeEdges(organization.value?.allMembers) || [],\n  )\n\n  return {\n    loading,\n    organizationQuery,\n    organization,\n    objectAttributes: viewScreenAttributes,\n    organizationMembers,\n    loadAllMembers,\n  }\n}\n"],"names":["OrganizationMembersFragmentDoc","gql","OrganizationDocument","OrganizationAttributesFragmentDoc","useOrganizationQuery","variables","options","VueApolloComposable.useQuery","OrganizationUpdatesDocument","useOrganizationDetail","internalId","errorCallback","fetchPolicy","organizationId","computed","convertToGraphQLId","fetchMembersCount","ref","organizationQuery","QueryHandler","organizationResult","loading","organization","_a","loadAllMembers","organizationInternalId","viewScreenAttributes","storeToRefs","useOrganizationObjectAttributesStore","organizationMembers","normalizeEdges"],"mappings":"6NAGO,MAAMA,EAAiCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MCMjCC,EAAuBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAY9BE,CAAiC;AAAA,EACrCH,CAA8B,GACzB,SAASI,EAAqBC,EAA6J,GAAIC,EAAqV,CAAA,EAAI,CAC7hB,OAAOC,EAAwFL,EAAsBG,EAAWC,CAAO,CACzI,CChBO,MAAME,EAA8BP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrCE,CAAiC;AAAA,EACrCH,CAA8B,GCCnBS,EAAwB,CACnCC,EACAC,EACAC,IACG,CACG,MAAAC,EAAiBC,EAAS,IAAM,CAChC,GAACJ,EAAW,MAET,OAAAK,EAAmB,eAAgBL,EAAW,KAAK,CAAA,CAC3D,EACKM,EAAoBC,EAAmB,CAAC,EAExCC,EAAoB,IAAIC,EAC5Bf,EACE,KAAO,CACL,uBAAwBM,EAAW,MACnC,aAAc,CAAA,GAEhB,KAAO,CACL,QAAS,EAAQA,EAAW,MAC5B,YAAAE,CAAA,EAEJ,EACA,CACE,cAAAD,CACF,CAAA,EAGFO,EAAkB,gBAGhB,KAAO,CACP,SAAUV,EACV,UAAW,CACT,eAAgBK,EAAe,MAC/B,aAAcG,EAAkB,KAClC,CACA,EAAA,EAEI,MAAAI,EAAqBF,EAAkB,SACvCG,EAAUH,EAAkB,UAE5BI,EAAeR,EAAS,IAAA,OAAM,OAAAS,EAAAH,EAAmB,QAAnB,YAAAG,EAA0B,aAAY,EAEpEC,EAAiB,IAAM,OACrB,MAAAC,GAAyBF,EAAAD,EAAa,QAAb,YAAAC,EAAoB,WAC9CE,GAILP,EACG,QAAQ,CACP,uBAAAO,EACA,aAAc,IAAA,CACf,EACA,KAAK,IAAM,CACVT,EAAkB,MAAQ,IAAA,CAC3B,CAAA,EAGC,CAAE,qBAAAU,GAAyBC,EAC/BC,EAAqC,CAAA,EAGjCC,EAAsBf,EAC1B,IAAA,OAAM,OAAAgB,GAAeP,EAAAD,EAAa,QAAb,YAAAC,EAAoB,UAAU,GAAK,CAAC,EAAA,EAGpD,MAAA,CACL,QAAAF,EACA,kBAAAH,EACA,aAAAI,EACA,iBAAkBI,EAClB,oBAAAG,EACA,eAAAL,CAAA,CAEJ"}