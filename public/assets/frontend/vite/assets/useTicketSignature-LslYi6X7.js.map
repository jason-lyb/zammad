{"version":3,"file":"useTicketSignature-LslYi6X7.js","sources":["../../../../../app/frontend/shared/graphql/queries/ticketSignature.api.ts","../../../../../app/frontend/shared/composables/useTicketSignature.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSignatureDocument = gql`\n    query ticketSignature($groupId: ID!, $ticketId: ID) {\n  ticketSignature(groupId: $groupId) {\n    id\n    renderedBody(ticketId: $ticketId)\n  }\n}\n    `;\nexport function useTicketSignatureQuery(variables: Types.TicketSignatureQueryVariables | VueCompositionApi.Ref<Types.TicketSignatureQueryVariables> | ReactiveFunction<Types.TicketSignatureQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>(TicketSignatureDocument, variables, options);\n}\nexport function useTicketSignatureLazyQuery(variables?: Types.TicketSignatureQueryVariables | VueCompositionApi.Ref<Types.TicketSignatureQueryVariables> | ReactiveFunction<Types.TicketSignatureQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>(TicketSignatureDocument, variables, options);\n}\nexport type TicketSignatureQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketSignatureQuery, Types.TicketSignatureQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { effectScope, type Ref } from 'vue'\n\nimport type { FieldEditorContext } from '#shared/components/Form/fields/FieldEditor/types.ts'\nimport type {\n  FormHandler,\n  FormHandlerFunction,\n  FormValues,\n  ChangedField,\n} from '#shared/components/Form/types.ts'\nimport { FormHandlerExecution } from '#shared/components/Form/types.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { useTicketSignatureLazyQuery } from '#shared/graphql/queries/ticketSignature.api.ts'\nimport type {\n  TicketSignatureQuery,\n  TicketSignatureQueryVariables,\n} from '#shared/graphql/types.ts'\nimport {\n  convertToGraphQLId,\n  getIdFromGraphQLId,\n} from '#shared/graphql/utils.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nlet signatureQuery: QueryHandler<\n  TicketSignatureQuery,\n  TicketSignatureQueryVariables\n>\n\nexport const getTicketSignatureQuery = () => {\n  if (signatureQuery) return signatureQuery\n\n  const scope = effectScope()\n\n  scope.run(() => {\n    signatureQuery = new QueryHandler(\n      useTicketSignatureLazyQuery({ groupId: '' }),\n    )\n  })\n\n  return signatureQuery\n}\n\n// TODO: can maybe be moved inside ticket entity?\nexport const useTicketSignature = (ticket?: Ref<TicketById | undefined>) => {\n  const signatureQuery = getTicketSignatureQuery()\n\n  const getValue = (\n    values: FormValues,\n    changedField: ChangedField,\n    name: string,\n  ) => {\n    return changedField.name === name ? changedField.newValue : values[name]\n  }\n\n  const signatureHandling = (editorName: string): FormHandler => {\n    const handleSignature: FormHandlerFunction = (\n      execution,\n      reactivity,\n      data,\n    ) => {\n      const { formNode, values, changedField } = data\n\n      if (\n        changedField?.name !== 'group_id' &&\n        changedField?.name !== 'articleSenderType'\n      )\n        return\n\n      const editorContext = formNode?.find(editorName, 'name')?.context as\n        | FieldEditorContext\n        | undefined\n      if (!editorContext) return\n\n      const groupId = getValue(values, changedField, 'group_id')\n\n      if (!groupId) {\n        editorContext.removeSignature()\n        return\n      }\n\n      const senderType = getValue(values, changedField, 'articleSenderType')\n\n      if (senderType !== 'email-out') {\n        editorContext.removeSignature?.()\n        return\n      }\n\n      signatureQuery\n        .query({\n          variables: {\n            groupId: convertToGraphQLId('Group', String(groupId)),\n            ticketId: ticket?.value?.id,\n          },\n        })\n        .then(({ data: signature }) => {\n          const body = signature?.ticketSignature?.renderedBody\n          const id = signature?.ticketSignature?.id\n          if (!body || !id) {\n            editorContext.removeSignature()\n            return\n          }\n          editorContext.addSignature({ body, id: getIdFromGraphQLId(id) })\n        })\n    }\n\n    return {\n      execution: [\n        FormHandlerExecution.Initial,\n        FormHandlerExecution.FieldChange,\n      ],\n      callback: handleSignature,\n    }\n  }\n\n  return {\n    signatureHandling,\n  }\n}\n"],"names":["TicketSignatureDocument","gql","useTicketSignatureLazyQuery","variables","options","VueApolloComposable.useLazyQuery","signatureQuery","getTicketSignatureQuery","effectScope","QueryHandler","useTicketSignature","ticket","getValue","values","changedField","name","editorName","handleSignature","execution","reactivity","data","formNode","editorContext","_a","groupId","_b","convertToGraphQLId","_c","signature","body","id","getIdFromGraphQLId","FormHandlerExecution"],"mappings":"yMAOO,MAAMA,EAA0BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWhC,SAASC,EAA4BC,EAAsKC,EAAuW,GAAI,CAC3jB,OAAOC,EAAkGL,EAAyBG,EAAWC,CAAO,CACtJ,CCIA,IAAIE,EAKG,MAAMC,EAA0B,IACjCD,IAEUE,IAER,IAAI,IAAM,CACdF,EAAiB,IAAIG,EACnBP,EAA4B,CAAE,QAAS,GAAI,CAAA,CAC7C,CACD,EAEMI,GAIII,EAAsBC,GAAyC,CAC1E,MAAML,EAAiBC,IAEjBK,EAAW,CACfC,EACAC,EACAC,IAEOD,EAAa,OAASC,EAAOD,EAAa,SAAWD,EAAOE,CAAI,EA+DlE,MAAA,CACL,kBA7DyBC,GAAoC,CAC7D,MAAMC,EAAuC,CAC3CC,EACAC,EACAC,IACG,WACH,KAAM,CAAE,SAAAC,EAAU,OAAAR,EAAQ,aAAAC,CAAA,EAAiBM,EAE3C,IACEN,GAAA,YAAAA,EAAc,QAAS,aACvBA,GAAA,YAAAA,EAAc,QAAS,oBAEvB,OAEF,MAAMQ,GAAgBC,EAAAF,GAAA,YAAAA,EAAU,KAAKL,EAAY,UAA3B,YAAAO,EAAoC,QAG1D,GAAI,CAACD,EAAe,OAEpB,MAAME,EAAUZ,EAASC,EAAQC,EAAc,UAAU,EAEzD,GAAI,CAACU,EAAS,CACZF,EAAc,gBAAgB,EAC9B,MACF,CAIA,GAFmBV,EAASC,EAAQC,EAAc,mBAAmB,IAElD,YAAa,EAC9BW,EAAAH,EAAc,kBAAd,MAAAG,EAAA,KAAAH,GACA,MACF,CAEAhB,EACG,MAAM,CACL,UAAW,CACT,QAASoB,EAAmB,QAAS,OAAOF,CAAO,CAAC,EACpD,UAAUG,EAAAhB,GAAA,YAAAA,EAAQ,QAAR,YAAAgB,EAAe,EAC3B,CACD,CAAA,EACA,KAAK,CAAC,CAAE,KAAMC,KAAgB,SACvB,MAAAC,GAAON,EAAAK,GAAA,YAAAA,EAAW,kBAAX,YAAAL,EAA4B,aACnCO,GAAKL,EAAAG,GAAA,YAAAA,EAAW,kBAAX,YAAAH,EAA4B,GACnC,GAAA,CAACI,GAAQ,CAACC,EAAI,CAChBR,EAAc,gBAAgB,EAC9B,MACF,CACAA,EAAc,aAAa,CAAE,KAAAO,EAAM,GAAIE,EAAmBD,CAAE,EAAG,CAAA,CAChE,CAAA,EAGE,MAAA,CACL,UAAW,CACTE,EAAqB,QACrBA,EAAqB,WACvB,EACA,SAAUf,CAAA,CACZ,CAIA,CAEJ"}