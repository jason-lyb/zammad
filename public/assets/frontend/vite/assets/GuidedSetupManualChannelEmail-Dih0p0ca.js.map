{"version":3,"file":"GuidedSetupManualChannelEmail-Dih0p0ca.js","sources":["../../../../../app/frontend/apps/desktop/entities/channel-email/composables/useEmailAccountForm.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/graphql/mutations/channelEmailAdd.api.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/graphql/mutations/channelEmailValidateConfigurationRoundtrip.api.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/graphql/mutations/channelEmailGuessConfiguration.api.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/graphql/mutations/channelEmailValidateConfigurationInbound.api.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/composables/useEmailChannelConfiguration.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/composables/useEmailInboundForm.ts","../../../../../app/frontend/apps/desktop/entities/channel-email/composables/useEmailInboundMessagesForm.ts","../../../../../app/frontend/apps/desktop/form/composables/useArchiveBeforeWarningHandler.ts","../../../../../app/frontend/apps/desktop/pages/guided-setup/views/GuidedSetupManual/GuidedSetupManualChannelEmail.vue"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { shallowRef } from 'vue'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\n\nimport type { EmailAccountData } from '../types/email-account.ts'\nimport type { ShallowRef } from 'vue'\n\nexport const useEmailAccountForm = () => {\n  const formEmailAccount: ShallowRef<FormRef | undefined> = shallowRef()\n\n  const emailAccountSchema = [\n    {\n      isLayout: true,\n      element: 'div',\n      attrs: {\n        class: 'grid grid-cols-1 gap-y-2.5 gap-x-3',\n      },\n      children: [\n        {\n          name: 'realname',\n          label: __('Full name'),\n          type: 'text',\n          props: {\n            placeholder: __('Organization Support'),\n          },\n          required: true,\n        },\n        {\n          name: 'email',\n          label: __('Email address'),\n          type: 'email',\n          props: {},\n          validation: 'email',\n          required: true,\n        },\n        {\n          name: 'password',\n          label: __('Password'),\n          type: 'password',\n          props: {},\n          required: true,\n        },\n      ],\n    },\n  ]\n\n  const { values, formSetErrors, updateFieldValues } =\n    useForm<EmailAccountData>(formEmailAccount)\n\n  return {\n    formEmailAccount,\n    emailAccountSchema,\n    formEmailAccountValues: values,\n    updateEmailAccountFieldValues: updateFieldValues,\n    formEmailAccountSetErrors: formSetErrors,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const ChannelEmailAddDocument = gql`\n    mutation channelEmailAdd($input: ChannelEmailAddInput!) {\n  channelEmailAdd(input: $input) {\n    channel {\n      options\n      group {\n        id\n      }\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useChannelEmailAddMutation(options: VueApolloComposable.UseMutationOptions<Types.ChannelEmailAddMutation, Types.ChannelEmailAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.ChannelEmailAddMutation, Types.ChannelEmailAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.ChannelEmailAddMutation, Types.ChannelEmailAddMutationVariables>(ChannelEmailAddDocument, options);\n}\nexport type ChannelEmailAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.ChannelEmailAddMutation, Types.ChannelEmailAddMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const ChannelEmailValidateConfigurationRoundtripDocument = gql`\n    mutation channelEmailValidateConfigurationRoundtrip($inboundConfiguration: ChannelEmailInboundConfigurationInput!, $outboundConfiguration: ChannelEmailOutboundConfigurationInput!, $emailAddress: String!) {\n  channelEmailValidateConfigurationRoundtrip(\n    inboundConfiguration: $inboundConfiguration\n    outboundConfiguration: $outboundConfiguration\n    emailAddress: $emailAddress\n  ) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useChannelEmailValidateConfigurationRoundtripMutation(options: VueApolloComposable.UseMutationOptions<Types.ChannelEmailValidateConfigurationRoundtripMutation, Types.ChannelEmailValidateConfigurationRoundtripMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.ChannelEmailValidateConfigurationRoundtripMutation, Types.ChannelEmailValidateConfigurationRoundtripMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.ChannelEmailValidateConfigurationRoundtripMutation, Types.ChannelEmailValidateConfigurationRoundtripMutationVariables>(ChannelEmailValidateConfigurationRoundtripDocument, options);\n}\nexport type ChannelEmailValidateConfigurationRoundtripMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.ChannelEmailValidateConfigurationRoundtripMutation, Types.ChannelEmailValidateConfigurationRoundtripMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const ChannelEmailGuessConfigurationDocument = gql`\n    mutation channelEmailGuessConfiguration($emailAddress: String!, $password: String!) {\n  channelEmailGuessConfiguration(emailAddress: $emailAddress, password: $password) {\n    result {\n      inboundConfiguration {\n        adapter\n        host\n        port\n        ssl\n        user\n        password\n        sslVerify\n        folder\n      }\n      outboundConfiguration {\n        adapter\n        host\n        port\n        user\n        password\n        sslVerify\n      }\n      mailboxStats {\n        contentMessages\n      }\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useChannelEmailGuessConfigurationMutation(options: VueApolloComposable.UseMutationOptions<Types.ChannelEmailGuessConfigurationMutation, Types.ChannelEmailGuessConfigurationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.ChannelEmailGuessConfigurationMutation, Types.ChannelEmailGuessConfigurationMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.ChannelEmailGuessConfigurationMutation, Types.ChannelEmailGuessConfigurationMutationVariables>(ChannelEmailGuessConfigurationDocument, options);\n}\nexport type ChannelEmailGuessConfigurationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.ChannelEmailGuessConfigurationMutation, Types.ChannelEmailGuessConfigurationMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const ChannelEmailValidateConfigurationInboundDocument = gql`\n    mutation channelEmailValidateConfigurationInbound($inboundConfiguration: ChannelEmailInboundConfigurationInput!) {\n  channelEmailValidateConfigurationInbound(\n    inboundConfiguration: $inboundConfiguration\n  ) {\n    success\n    mailboxStats {\n      contentMessages\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useChannelEmailValidateConfigurationInboundMutation(options: VueApolloComposable.UseMutationOptions<Types.ChannelEmailValidateConfigurationInboundMutation, Types.ChannelEmailValidateConfigurationInboundMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.ChannelEmailValidateConfigurationInboundMutation, Types.ChannelEmailValidateConfigurationInboundMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.ChannelEmailValidateConfigurationInboundMutation, Types.ChannelEmailValidateConfigurationInboundMutationVariables>(ChannelEmailValidateConfigurationInboundDocument, options);\n}\nexport type ChannelEmailValidateConfigurationInboundMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.ChannelEmailValidateConfigurationInboundMutation, Types.ChannelEmailValidateConfigurationInboundMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, ref, watch } from 'vue'\n\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useDebouncedLoading } from '#shared/composables/useDebouncedLoading.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport type {\n  ChannelEmailInboundConfiguration,\n  ChannelEmailOutboundConfiguration,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport type { MutationSendError } from '#shared/types/error.ts'\n\nimport { useChannelEmailAddMutation } from '#desktop/entities/channel-email/graphql/mutations/channelEmailAdd.api.ts'\nimport { useChannelEmailValidateConfigurationRoundtripMutation } from '#desktop/entities/channel-email/graphql/mutations/channelEmailValidateConfigurationRoundtrip.api.ts'\n\nimport { useChannelEmailGuessConfigurationMutation } from '../graphql/mutations/channelEmailGuessConfiguration.api.ts'\nimport { useChannelEmailValidateConfigurationInboundMutation } from '../graphql/mutations/channelEmailValidateConfigurationInbound.api.ts'\nimport { useChannelEmailValidateConfigurationOutboundMutation } from '../graphql/mutations/channelEmailValidateConfigurationOutbound.api.ts'\n\nimport type { EmailAccountData } from '../types/email-account.ts'\nimport type {\n  EmailChannelSteps,\n  EmailChannelForms,\n} from '../types/email-channel.ts'\nimport type {\n  UpdateMetaInformationInboundFunction,\n  EmailInboundMetaInformation,\n  EmailOutboundData,\n  EmailInboundData,\n  EmailInboundMessagesData,\n} from '../types/email-inbound-outbound.ts'\nimport type { SetNonNullable, SetOptional } from 'type-fest'\nimport type { Ref } from 'vue'\n\nexport const useEmailChannelConfiguration = (\n  emailChannelForms: EmailChannelForms,\n  metaInformationInbound: Ref<Maybe<EmailInboundMetaInformation>>,\n  updateMetaInformationInbound: UpdateMetaInformationInboundFunction,\n  onSuccessCallback: () => void,\n) => {\n  const { loading, debouncedLoading } = useDebouncedLoading()\n  const activeStep = ref<EmailChannelSteps>('account')\n  const pendingActiveStep = ref<Maybe<EmailChannelSteps>>(null)\n\n  const setActiveStep = (nextStep: EmailChannelSteps) => {\n    if (!debouncedLoading.value) {\n      activeStep.value = nextStep\n      return\n    }\n\n    pendingActiveStep.value = nextStep\n  }\n\n  watch(debouncedLoading, (newValue: boolean) => {\n    if (!newValue && pendingActiveStep.value) {\n      activeStep.value = pendingActiveStep.value\n      pendingActiveStep.value = null\n    }\n  })\n\n  const stepTitle = computed(() => {\n    switch (activeStep.value) {\n      case 'inbound':\n        return __('Email Inbound')\n      case 'inbound-messages':\n        return __('Archive Emails')\n      case 'outbound':\n        return __('Email Outbound')\n      default:\n        return __('Email Account')\n    }\n  })\n\n  const activeForm = computed(() => {\n    switch (activeStep.value) {\n      case 'inbound':\n        return emailChannelForms.emailInbound.form.value\n      case 'inbound-messages':\n        return emailChannelForms.emailInboundMessages.form.value\n      case 'outbound':\n        return emailChannelForms.emailOutbound.form.value\n      default:\n        return emailChannelForms.emailAccount.form.value\n    }\n  })\n\n  const validateConfigurationRoundtripAndChannelAdd = async (\n    account: EmailAccountData,\n    inboundConfiguration: EmailInboundData,\n    outboundConfiguration: EmailOutboundData,\n  ) => {\n    const validateConfigurationRoundtripMutation = new MutationHandler(\n      useChannelEmailValidateConfigurationRoundtripMutation(),\n    )\n    const addEmailChannelMutation = new MutationHandler(\n      useChannelEmailAddMutation(),\n    )\n\n    // Transform port field to real number for usage in the mutation.\n    inboundConfiguration.port = Number(inboundConfiguration.port)\n    outboundConfiguration.port = Number(outboundConfiguration.port)\n\n    // Extend inbound configuration with archive information when needed.\n    if (metaInformationInbound.value?.archive) {\n      inboundConfiguration = {\n        ...inboundConfiguration,\n        archive: true,\n        archiveBefore: metaInformationInbound.value.archiveBefore,\n        archiveStateId: metaInformationInbound.value.archiveStateId,\n      }\n    }\n\n    try {\n      const roundTripResult = await validateConfigurationRoundtripMutation.send(\n        {\n          inboundConfiguration,\n          outboundConfiguration,\n          emailAddress: account.email,\n        },\n      )\n\n      if (\n        roundTripResult?.channelEmailValidateConfigurationRoundtrip?.success\n      ) {\n        try {\n          const addChannelResult = await addEmailChannelMutation.send({\n            input: {\n              inboundConfiguration,\n              outboundConfiguration,\n              emailAddress: account.email,\n              emailRealname: account.realname,\n            },\n          })\n\n          if (addChannelResult?.channelEmailAdd?.channel) {\n            onSuccessCallback()\n          }\n        } catch (errors) {\n          emailChannelForms.emailAccount.setErrors(errors as MutationSendError)\n          setActiveStep('account')\n        }\n      }\n    } catch (errors) {\n      if (\n        errors instanceof UserError &&\n        Object.keys(errors.getFieldErrorList()).length > 0\n      ) {\n        if (\n          Object.keys(errors.getFieldErrorList()).some((key) =>\n            key.startsWith('outbound'),\n          )\n        ) {\n          setActiveStep('outbound')\n          emailChannelForms.emailOutbound.setErrors(errors as MutationSendError)\n        } else {\n          setActiveStep('inbound')\n          emailChannelForms.emailInbound.setErrors(errors as MutationSendError)\n        }\n        return\n      }\n\n      emailChannelForms.emailAccount.setErrors(\n        new UserError([\n          {\n            message: i18n.t(\n              'Email sending and receiving could not be verified. Please check your settings.',\n            ),\n          },\n        ]),\n      )\n      setActiveStep('account')\n    }\n  }\n\n  const guessEmailAccount = (data: FormSubmitData<EmailAccountData>) => {\n    loading.value = true\n\n    const guessConfigurationMutation = new MutationHandler(\n      useChannelEmailGuessConfigurationMutation(),\n    )\n\n    return guessConfigurationMutation\n      .send({\n        emailAddress: data.email,\n        password: data.password,\n      })\n      .then(async (result) => {\n        if (\n          result?.channelEmailGuessConfiguration?.result.inboundConfiguration &&\n          result?.channelEmailGuessConfiguration?.result.outboundConfiguration\n        ) {\n          const inboundConfiguration = result.channelEmailGuessConfiguration\n            .result.inboundConfiguration as SetOptional<\n            SetNonNullable<Required<ChannelEmailInboundConfiguration>>,\n            '__typename'\n          >\n          delete inboundConfiguration.__typename\n\n          const outboundConfiguration = result.channelEmailGuessConfiguration\n            .result.outboundConfiguration as SetOptional<\n            SetNonNullable<Required<ChannelEmailOutboundConfiguration>>,\n            '__typename'\n          >\n          delete outboundConfiguration.__typename\n\n          emailChannelForms.emailInbound.updateFieldValues(inboundConfiguration)\n          emailChannelForms.emailOutbound.updateFieldValues(\n            outboundConfiguration,\n          )\n\n          const mailboxStats =\n            result?.channelEmailGuessConfiguration?.result.mailboxStats\n\n          if (\n            mailboxStats?.contentMessages &&\n            mailboxStats?.contentMessages > 0\n          ) {\n            updateMetaInformationInbound(mailboxStats, 'roundtrip')\n            setActiveStep('inbound-messages')\n            return\n          }\n\n          await validateConfigurationRoundtripAndChannelAdd(\n            data,\n            inboundConfiguration,\n            outboundConfiguration,\n          )\n        } else {\n          emailChannelForms.emailInbound.updateFieldValues({\n            user: data.email,\n            password: data.password,\n          })\n          emailChannelForms.emailOutbound.updateFieldValues({\n            user: data.email,\n            password: data.password,\n          })\n\n          emailChannelForms.emailInbound.setErrors(\n            new UserError([\n              {\n                message: i18n.t(\n                  'The server settings could not be automatically detected. Please configure them manually.',\n                ),\n              },\n            ]),\n          )\n\n          setActiveStep('inbound')\n        }\n      })\n      .finally(() => {\n        loading.value = false\n      })\n  }\n\n  const validateEmailInbound = (data: FormSubmitData<EmailInboundData>) => {\n    loading.value = true\n\n    const validationConfigurationInbound = new MutationHandler(\n      useChannelEmailValidateConfigurationInboundMutation(),\n    )\n\n    return validationConfigurationInbound\n      .send({\n        inboundConfiguration: {\n          ...data,\n          port: Number(data.port),\n        },\n      })\n      .then((result) => {\n        if (result?.channelEmailValidateConfigurationInbound?.success) {\n          emailChannelForms.emailOutbound.updateFieldValues({\n            host: data.host,\n            user: data.user,\n            password: data.password,\n          })\n\n          const mailboxStats =\n            result?.channelEmailValidateConfigurationInbound?.mailboxStats\n\n          if (\n            mailboxStats?.contentMessages &&\n            mailboxStats?.contentMessages > 0\n          ) {\n            updateMetaInformationInbound(mailboxStats, 'outbound')\n            setActiveStep('inbound-messages')\n            return\n          }\n\n          setActiveStep('outbound')\n        }\n      })\n      .finally(() => {\n        loading.value = false\n      })\n  }\n\n  const importEmailInboundMessages = async (\n    data: FormSubmitData<EmailInboundMessagesData>,\n  ) => {\n    if (metaInformationInbound.value && data.archive) {\n      metaInformationInbound.value.archive = true\n      metaInformationInbound.value.archiveBefore = data.archive_before as string\n      metaInformationInbound.value.archiveStateId =\n        data.archive_state_id as number\n    }\n\n    if (metaInformationInbound.value?.nextAction === 'outbound') {\n      setActiveStep('outbound')\n    }\n\n    if (metaInformationInbound.value?.nextAction === 'roundtrip') {\n      loading.value = true\n\n      await validateConfigurationRoundtripAndChannelAdd(\n        emailChannelForms.emailAccount.values.value,\n        emailChannelForms.emailInbound.values.value,\n        emailChannelForms.emailOutbound.values.value,\n      )\n\n      loading.value = false\n    }\n  }\n\n  const validateEmailOutbound = (data: FormSubmitData<EmailOutboundData>) => {\n    loading.value = true\n\n    const validationConfigurationOutbound = new MutationHandler(\n      useChannelEmailValidateConfigurationOutboundMutation(),\n    )\n\n    return validationConfigurationOutbound\n      .send({\n        outboundConfiguration: {\n          ...data,\n          port: Number(data.port),\n        },\n        emailAddress: emailChannelForms.emailAccount.values.value\n          ?.email as string,\n      })\n      .then(async (result) => {\n        if (result?.channelEmailValidateConfigurationOutbound?.success) {\n          await validateConfigurationRoundtripAndChannelAdd(\n            emailChannelForms.emailAccount.values.value,\n            emailChannelForms.emailInbound.values.value,\n            emailChannelForms.emailOutbound.values.value,\n          )\n        }\n      })\n      .finally(() => {\n        loading.value = false\n      })\n  }\n\n  return {\n    debouncedLoading,\n    stepTitle,\n    activeStep,\n    activeForm,\n    guessEmailAccount,\n    validateEmailInbound,\n    importEmailInboundMessages,\n    validateEmailOutbound,\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { shallowRef, computed, ref, reactive } from 'vue'\n\nimport type {\n  FormFieldValue,\n  FormRef,\n  FormSchemaField,\n  FormValues,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport type { ChannelEmailInboundMailboxStats } from '#shared/graphql/types.ts'\n\nimport type {\n  EmailInboundData,\n  EmailInboundMetaInformation,\n  EmailInboundMetaInformationNextAction,\n} from '../types/email-inbound-outbound.ts'\nimport type { ShallowRef } from 'vue'\n\nexport const useEmailInboundForm = () => {\n  const formEmailInbound: ShallowRef<FormRef | undefined> = shallowRef()\n\n  const { values, updateFieldValues, formSetErrors, onChangedField } =\n    useForm<EmailInboundData>(formEmailInbound)\n\n  const metaInformationInbound = ref<Maybe<EmailInboundMetaInformation>>(null)\n\n  const updateMetaInformationInbound = (\n    data: ChannelEmailInboundMailboxStats,\n    nextAction: EmailInboundMetaInformationNextAction,\n  ) => {\n    metaInformationInbound.value = {\n      contentMessages: data.contentMessages || 0,\n      nextAction,\n    }\n  }\n\n  const inboundSSLOptions = computed(() => {\n    const options = [\n      {\n        value: 'off',\n        label: __('No SSL'),\n      },\n      {\n        value: 'ssl',\n        label: __('SSL'),\n      },\n    ]\n\n    if (values.value.adapter === 'imap') {\n      options.push({\n        value: 'starttls',\n        label: __('STARTTLS'),\n      })\n    }\n\n    return options\n  })\n\n  const emailInboundFormChangeFields = reactive<\n    Record<string, Partial<FormSchemaField>>\n  >({\n    sslVerify: {},\n    port: {},\n  })\n\n  onChangedField('ssl', (newValue: FormFieldValue) => {\n    const disabled = Boolean(newValue === 'off')\n    emailInboundFormChangeFields.sslVerify = {\n      disabled,\n    }\n\n    const newValues: FormValues = {\n      sslVerify: !disabled,\n    }\n\n    if (newValue === 'off') {\n      newValues.port = 143\n    } else if (newValue === 'ssl') {\n      newValues.port = 993\n    }\n\n    updateFieldValues(newValues)\n  })\n\n  const emailInboundSchema = [\n    {\n      isLayout: true,\n      element: 'div',\n      attrs: {\n        class: 'grid grid-cols-2 gap-y-2.5 gap-x-3',\n      },\n      children: [\n        {\n          type: 'group',\n          name: 'inbound',\n          isGroupOrList: true,\n          children: [\n            {\n              name: 'adapter',\n              label: __('Type'),\n              type: 'select',\n              outerClass: 'col-span-2',\n              required: true,\n            },\n            {\n              name: 'host',\n              label: __('Host'),\n              type: 'text',\n              outerClass: 'col-span-2',\n              props: {\n                maxLength: 120,\n              },\n              required: true,\n            },\n            {\n              name: 'user',\n              label: __('User'),\n              type: 'text',\n              outerClass: 'col-span-2',\n              props: {\n                maxLength: 120,\n              },\n              required: true,\n            },\n            {\n              name: 'password',\n              label: __('Password'),\n              type: 'password',\n              outerClass: 'col-span-2',\n              props: {\n                maxLength: 120,\n              },\n              required: true,\n            },\n            {\n              name: 'ssl',\n              label: __('SSL/STARTTLS'),\n              type: 'select',\n              outerClass: 'col-span-1',\n              value: 'ssl',\n              options: inboundSSLOptions,\n            },\n            {\n              name: 'sslVerify',\n              label: __('SSL verification'),\n              type: 'toggle',\n              outerClass: 'col-span-1',\n              wrapperClass: 'mt-6',\n              value: true,\n              props: {\n                variants: {\n                  true: 'yes',\n                  false: 'no',\n                },\n              },\n            },\n            {\n              name: 'port',\n              label: __('Port'),\n              type: 'text',\n              outerClass: 'col-span-1',\n              validation: 'number',\n              props: {\n                maxLength: 6,\n              },\n              value: 993,\n              required: true,\n            },\n            {\n              if: '$values.adapter === \"imap\"',\n              name: 'folder',\n              label: __('Folder'),\n              type: 'text',\n              outerClass: 'col-span-1',\n              props: {\n                maxLength: 120,\n              },\n            },\n            {\n              if: '$values.adapter === \"imap\"',\n              name: 'keepOnServer',\n              label: __('Keep messages on server'),\n              type: 'toggle',\n              outerClass: 'col-span-2',\n              value: false,\n              props: {\n                variants: {\n                  true: 'yes',\n                  false: 'no',\n                },\n              },\n            },\n          ],\n        },\n      ],\n    },\n  ]\n\n  return {\n    formEmailInbound,\n    emailInboundSchema,\n    formEmailInboundValues: values,\n    updateEmailInboundFieldValues: updateFieldValues,\n    formEmailInboundSetErrors: formSetErrors,\n    metaInformationInbound,\n    emailInboundFormChangeFields,\n    updateMetaInformationInbound,\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { shallowRef, reactive } from 'vue'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\n\nimport type { EmailInboundMetaInformation } from '../types/email-inbound-outbound.ts'\nimport type { ShallowRef, Ref } from 'vue'\n\nexport const useEmailInboundMessagesForm = (\n  metaInformationInbound: Ref<Maybe<EmailInboundMetaInformation>>,\n) => {\n  const formEmailInboundMessages: ShallowRef<FormRef | undefined> = shallowRef()\n\n  const emailInboundMessageSchema = [\n    {\n      isLayout: true,\n      element: 'div',\n      attrs: {\n        class: 'flex flex-col gap-y-2.5 gap-x-3',\n      },\n      children: [\n        {\n          isLayout: true,\n          component: 'CommonLabel',\n          children:\n            '$t(\"%s email(s) were found in your mailbox. They will all be moved from your mailbox into Zammad.\", $metaInformationInbound.contentMessages)',\n        },\n        {\n          isLayout: true,\n          component: 'CommonLabel',\n          children:\n            '$t(\\'You can import some of your emails as an \"archive\", which means that no notifications are sent and the tickets will be in a target state that you define.\\')',\n        },\n        {\n          isLayout: true,\n          component: 'CommonLabel',\n          children:\n            '$t(\"You can find archived emails in Zammad anytime using the search function, like for any other ticket.\")',\n        },\n        {\n          name: 'archive',\n          label: __('Archive emails'),\n          type: 'toggle',\n          value: true,\n          props: {\n            variants: {\n              true: __('yes'),\n              false: __('no'),\n            },\n          },\n        },\n        {\n          name: 'archive_before',\n          if: '$values.archive',\n          type: 'datetime',\n          label: __('Archive cut-off time'),\n          required: true,\n          help: __(\n            'Emails before the cut-off time are imported as archived tickets. Emails after the cut-off time are imported as regular tickets.',\n          ),\n        },\n        {\n          name: 'archive_state_id',\n          if: '$values.archive',\n          label: __('Archive ticket target state'),\n          type: 'select',\n        },\n      ],\n    },\n  ]\n\n  const emailInboundMessageSchemaData = reactive({\n    metaInformationInbound,\n  })\n\n  return {\n    formEmailInboundMessages,\n    emailInboundMessageSchema,\n    emailInboundMessageSchemaData,\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { isFuture, parseISO } from 'date-fns'\n\nimport { i18n } from '#shared/i18n.ts'\n\nimport { useAlertFormHandler } from './useAlertFormHandler.ts'\n\nexport const useArchiveBeforeWarningHandler = () =>\n  useAlertFormHandler(\n    'archive_before',\n    {\n      key: 'archiveBeforeWarning',\n      value: i18n.t(\n        'You have selected a cut-off time in the future. Be aware that all emails (including future ones) are going to be archived until the selected time is reached.',\n      ),\n    },\n    (field, fields) =>\n      Boolean(\n        fields.archive.props.value &&\n          field.props.value &&\n          isFuture(parseISO(field.props.value as string)),\n      ),\n    (changedField, fields) =>\n      Boolean(\n        fields.archive.props.value &&\n          changedField?.name === 'archive_before' &&\n          changedField.newValue &&\n          isFuture(parseISO(changedField.newValue as string)),\n      ),\n    (node, addAlert, clearAlert) => {\n      const { value } = node\n\n      if (value && isFuture(parseISO(value as string))) addAlert()\n      else clearAlert()\n    },\n  )\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, watch } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport Form from '#shared/components/Form/Form.vue'\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { EnumFormUpdaterId } from '#shared/graphql/types.ts'\n\nimport { useEmailAccountForm } from '#desktop/entities/channel-email/composables/useEmailAccountForm.ts'\nimport { useEmailChannelConfiguration } from '#desktop/entities/channel-email/composables/useEmailChannelConfiguration.ts'\nimport { useEmailInboundForm } from '#desktop/entities/channel-email/composables/useEmailInboundForm.ts'\nimport { useEmailInboundMessagesForm } from '#desktop/entities/channel-email/composables/useEmailInboundMessagesForm.ts'\nimport { useEmailOutboundForm } from '#desktop/entities/channel-email/composables/useEmailOutboundForm.ts'\nimport type { EmailAccountData } from '#desktop/entities/channel-email/types/email-account.ts'\nimport type {\n  EmailInboundData,\n  EmailOutboundData,\n  EmailInboundMessagesData,\n} from '#desktop/entities/channel-email/types/email-inbound-outbound.ts'\nimport { useArchiveBeforeWarningHandler } from '#desktop/form/composables/useArchiveBeforeWarningHandler.ts'\nimport { useSSLVerificationWarningHandler } from '#desktop/form/composables/useSSLVerificationWarningHandler.ts'\n\nimport GuidedSetupActionFooter from '../../components/GuidedSetupActionFooter.vue'\nimport GuidedSetupStatusMessage from '../../components/GuidedSetupStatusMessage.vue'\nimport { useSystemSetup } from '../../composables/useSystemSetup.ts'\nimport { emailBeforeRouteEnterGuard } from '../../router/guards/emailBeforeRouteEnterGuard.ts'\n\ndefineOptions({\n  beforeRouteEnter: emailBeforeRouteEnterGuard,\n})\n\nconst router = useRouter()\n\nconst { setTitle } = useSystemSetup()\n\nconst {\n  formEmailAccount,\n  emailAccountSchema,\n  formEmailAccountValues,\n  formEmailAccountSetErrors,\n  updateEmailAccountFieldValues,\n} = useEmailAccountForm()\n\nconst {\n  formEmailInbound,\n  emailInboundSchema,\n  formEmailInboundValues,\n  formEmailInboundSetErrors,\n  updateEmailInboundFieldValues,\n  metaInformationInbound,\n  emailInboundFormChangeFields,\n  updateMetaInformationInbound,\n} = useEmailInboundForm()\n\nconst {\n  formEmailInboundMessages,\n  emailInboundMessageSchema,\n  emailInboundMessageSchemaData,\n} = useEmailInboundMessagesForm(metaInformationInbound)\n\nconst {\n  formEmailOutbound,\n  emailOutboundSchema,\n  formEmailOutboundValues,\n  formEmailOutboundSetErrors,\n  updateEmailOutboundFieldValues,\n  emailOutboundFormChangeFields,\n} = useEmailOutboundForm()\n\nconst {\n  activeStep,\n  activeForm,\n  stepTitle,\n  debouncedLoading,\n  guessEmailAccount,\n  validateEmailInbound,\n  validateEmailOutbound,\n  importEmailInboundMessages,\n} = useEmailChannelConfiguration(\n  {\n    emailAccount: {\n      form: formEmailAccount,\n      values: formEmailAccountValues,\n      updateFieldValues: updateEmailAccountFieldValues,\n      setErrors: formEmailAccountSetErrors,\n    },\n    emailInbound: {\n      form: formEmailInbound,\n      values: formEmailInboundValues,\n      setErrors: formEmailInboundSetErrors,\n      updateFieldValues: updateEmailInboundFieldValues,\n    },\n    emailInboundMessages: {\n      form: formEmailInboundMessages,\n    },\n    emailOutbound: {\n      form: formEmailOutbound,\n      values: formEmailOutboundValues,\n      setErrors: formEmailOutboundSetErrors,\n      updateFieldValues: updateEmailOutboundFieldValues,\n    },\n  },\n  metaInformationInbound,\n  updateMetaInformationInbound,\n  () => router.push('/guided-setup/manual/invite'),\n)\n\nwatch(stepTitle, setTitle, { immediate: true })\n\nconst activeInboundMessageNextRoundtrip = computed(\n  () =>\n    activeStep.value === 'inbound-messages' &&\n    metaInformationInbound.value?.nextAction === 'roundtrip',\n)\n\nconst goBack = () => {\n  if (\n    activeStep.value === 'inbound' ||\n    activeInboundMessageNextRoundtrip.value\n  ) {\n    activeStep.value = 'account'\n  } else if (activeStep.value === 'outbound' && metaInformationInbound.value) {\n    activeStep.value = 'inbound-messages'\n  } else if (['outbound', 'inbound-messages'].includes(activeStep.value)) {\n    activeStep.value = 'inbound'\n  } else {\n    router.push('/guided-setup/manual/channels')\n  }\n}\n\nconst submitButtonText = computed(() => {\n  if (activeStep.value === 'account') {\n    return __('Connect and Continue')\n  }\n\n  if (\n    activeStep.value === 'inbound' ||\n    (activeStep.value !== 'outbound' &&\n      !activeInboundMessageNextRoundtrip.value)\n  ) {\n    return __('Continue')\n  }\n\n  if (['outbound', 'inbound-messages'].includes(activeStep.value)) {\n    return __('Save and Continue')\n  }\n\n  return __('Connect and Continue')\n})\n\nconst submitButtonVariant = computed(() => {\n  if (activeStep.value === 'account') {\n    return 'submit'\n  }\n\n  if (\n    activeStep.value === 'inbound' ||\n    (activeStep.value !== 'outbound' &&\n      !activeInboundMessageNextRoundtrip.value)\n  ) {\n    return 'primary'\n  }\n\n  return 'submit'\n})\n\nconst emailConfigurationCheck = computed(() => {\n  if (activeStep.value === 'account') {\n    return __('Verifying and saving your configuration…')\n  }\n\n  if (\n    activeStep.value === 'inbound' ||\n    (activeStep.value !== 'outbound' &&\n      !activeInboundMessageNextRoundtrip.value)\n  ) {\n    return __('Verifying your configuration…')\n  }\n\n  return __('Verifying and saving your configuration…')\n})\n</script>\n\n<template>\n  <GuidedSetupStatusMessage\n    v-if=\"debouncedLoading\"\n    :message=\"emailConfigurationCheck\"\n  />\n  <div v-show=\"!debouncedLoading\" class=\"flex flex-col gap-2.5\">\n    <div v-show=\"activeStep === 'account'\">\n      <Form\n        id=\"channel-email-account\"\n        ref=\"formEmailAccount\"\n        data-test-id=\"channel-email-account\"\n        form-class=\"mb-2.5\"\n        :schema=\"emailAccountSchema\"\n        @submit=\"guessEmailAccount($event as FormSubmitData<EmailAccountData>)\"\n      />\n    </div>\n    <div v-show=\"activeStep === 'inbound'\">\n      <Form\n        id=\"channel-email-inbound\"\n        ref=\"formEmailInbound\"\n        data-test-id=\"channel-email-inbound\"\n        form-class=\"mb-2.5\"\n        :handlers=\"[useSSLVerificationWarningHandler()]\"\n        :flatten-form-groups=\"['inbound']\"\n        :form-updater-id=\"\n          EnumFormUpdaterId.FormUpdaterUpdaterGuidedSetupEmailInbound\n        \"\n        :schema=\"emailInboundSchema\"\n        :change-fields=\"emailInboundFormChangeFields\"\n        @submit=\"\n          validateEmailInbound($event as FormSubmitData<EmailInboundData>)\n        \"\n      />\n    </div>\n    <div v-show=\"activeStep === 'inbound-messages'\">\n      <Form\n        id=\"channel-email-inbound-messages\"\n        ref=\"formEmailInboundMessages\"\n        data-test-id=\"channel-email-inbound-messages\"\n        form-class=\"mb-2.5\"\n        :handlers=\"[useArchiveBeforeWarningHandler()]\"\n        :form-updater-id=\"\n          EnumFormUpdaterId.FormUpdaterUpdaterGuidedSetupEmailArchive\n        \"\n        :schema=\"emailInboundMessageSchema\"\n        :schema-data=\"emailInboundMessageSchemaData\"\n        @submit=\"\n          importEmailInboundMessages(\n            $event as FormSubmitData<EmailInboundMessagesData>,\n          )\n        \"\n      />\n    </div>\n    <div v-show=\"activeStep === 'outbound'\">\n      <Form\n        id=\"channel-email-outbound\"\n        ref=\"formEmailOutbound\"\n        data-test-id=\"channel-email-outbound\"\n        form-class=\"mb-2.5\"\n        :handlers=\"[useSSLVerificationWarningHandler()]\"\n        :flatten-form-groups=\"['outbound']\"\n        :form-updater-id=\"\n          EnumFormUpdaterId.FormUpdaterUpdaterGuidedSetupEmailOutbound\n        \"\n        :schema=\"emailOutboundSchema\"\n        :change-fields=\"emailOutboundFormChangeFields\"\n        @submit=\"\n          validateEmailOutbound($event as FormSubmitData<EmailOutboundData>)\n        \"\n      />\n    </div>\n    <GuidedSetupActionFooter\n      :form=\"activeForm\"\n      :submit-button-variant=\"submitButtonVariant\"\n      :submit-button-text=\"submitButtonText\"\n      @go-back=\"goBack\"\n    />\n  </div>\n</template>\n"],"names":["useEmailAccountForm","formEmailAccount","shallowRef","emailAccountSchema","values","formSetErrors","updateFieldValues","useForm","ChannelEmailAddDocument","gql","ErrorsFragmentDoc","useChannelEmailAddMutation","options","VueApolloComposable.useMutation","ChannelEmailValidateConfigurationRoundtripDocument","useChannelEmailValidateConfigurationRoundtripMutation","ChannelEmailGuessConfigurationDocument","useChannelEmailGuessConfigurationMutation","ChannelEmailValidateConfigurationInboundDocument","useChannelEmailValidateConfigurationInboundMutation","useEmailChannelConfiguration","emailChannelForms","metaInformationInbound","updateMetaInformationInbound","onSuccessCallback","loading","debouncedLoading","useDebouncedLoading","activeStep","ref","pendingActiveStep","setActiveStep","nextStep","watch","newValue","stepTitle","computed","activeForm","validateConfigurationRoundtripAndChannelAdd","account","inboundConfiguration","outboundConfiguration","validateConfigurationRoundtripMutation","MutationHandler","addEmailChannelMutation","_a","roundTripResult","_b","addChannelResult","_c","errors","UserError","key","i18n","data","result","mailboxStats","useChannelEmailValidateConfigurationOutboundMutation","useEmailInboundForm","formEmailInbound","onChangedField","nextAction","inboundSSLOptions","emailInboundFormChangeFields","reactive","disabled","newValues","emailInboundSchema","useEmailInboundMessagesForm","formEmailInboundMessages","emailInboundMessageSchema","emailInboundMessageSchemaData","useArchiveBeforeWarningHandler","useAlertFormHandler","field","fields","isFuture","parseISO","changedField","node","addAlert","clearAlert","value","router","useRouter","setTitle","useSystemSetup","formEmailAccountValues","formEmailAccountSetErrors","updateEmailAccountFieldValues","formEmailInboundValues","formEmailInboundSetErrors","updateEmailInboundFieldValues","formEmailOutbound","emailOutboundSchema","formEmailOutboundValues","formEmailOutboundSetErrors","updateEmailOutboundFieldValues","emailOutboundFormChangeFields","useEmailOutboundForm","guessEmailAccount","validateEmailInbound","validateEmailOutbound","importEmailInboundMessages","activeInboundMessageNextRoundtrip","goBack","submitButtonText","submitButtonVariant","emailConfigurationCheck"],"mappings":"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"}