{"version":3,"file":"PersonalSettingOverviews-DFzswbk0.js","sources":["../../../../../app/frontend/apps/desktop/entities/ticket/graphql/subscriptions/userCurrentOverviewOrderingUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/components/PersonalSettingOverviewOrder.vue","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentOverviewResetOrder.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentOverviewUpdateOrder.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/queries/userCurrentOverviewList.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingOverviews.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentOverviewOrderingUpdatesDocument = gql`\n    subscription userCurrentOverviewOrderingUpdates($ignoreUserConditions: Boolean!) {\n  userCurrentOverviewOrderingUpdates(ignoreUserConditions: $ignoreUserConditions) {\n    overviews {\n      id\n      name\n      organizationShared\n      outOfOffice\n    }\n  }\n}\n    `;\nexport function useUserCurrentOverviewOrderingUpdatesSubscription(variables: Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables> | ReactiveFunction<Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentOverviewOrderingUpdatesSubscription, Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentOverviewOrderingUpdatesSubscription, Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentOverviewOrderingUpdatesSubscription, Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserCurrentOverviewOrderingUpdatesSubscription, Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables>(UserCurrentOverviewOrderingUpdatesDocument, variables, options);\n}\nexport type UserCurrentOverviewOrderingUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserCurrentOverviewOrderingUpdatesSubscription, Types.UserCurrentOverviewOrderingUpdatesSubscriptionVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { animations, parents } from '@formkit/drag-and-drop'\nimport { dragAndDrop } from '@formkit/drag-and-drop/vue'\nimport { cloneDeep, isEqual } from 'lodash-es'\nimport { ref, watch, useTemplateRef, type Ref } from 'vue'\n\nimport { startAndEndEventsDNDPlugin } from '#shared/utils/startAndEndEventsDNDPlugin.ts'\n\nexport interface OverviewItem {\n  id: string\n  name: string\n  organizationShared?: boolean | null\n  outOfOffice?: boolean | null\n}\n\nconst localValue = defineModel<OverviewItem[]>({\n  required: true,\n})\n\nconst dndEndCallback = (parent: HTMLElement) => {\n  const parentData = parents.get(parent)\n  if (!parentData) return\n\n  localValue.value = cloneDeep(parentData.getValues(parent))\n}\n\nconst dndParentElement = useTemplateRef('dnd-parent')\nconst dndLocalValue = ref(localValue.value || [])\n\nwatch(localValue, (newValue) => {\n  if (isEqual(dndLocalValue.value, newValue)) return\n\n  dndLocalValue.value = cloneDeep(newValue || [])\n})\n\ndragAndDrop({\n  parent: dndParentElement as Ref<HTMLElement>,\n  values: dndLocalValue,\n  plugins: [\n    startAndEndEventsDNDPlugin(undefined, dndEndCallback),\n    animations(),\n  ],\n  dropZoneClass: 'opacity-0',\n  touchDropZoneClass: 'opacity-0',\n})\n</script>\n\n<template>\n  <div v-if=\"localValue\" class=\"rounded-lg bg-blue-200 dark:bg-gray-700\">\n    <!-- :TODO if we add proper a11y support   -->\n    <!--    <span class=\"hidden\" aria-live=\"assertive\" >{{assistiveText}}</span>-->\n    <span id=\"drag-and-drop-ticket-overviews\" class=\"sr-only\">\n      {{ $t('Drag and drop to reorder ticket overview list items.') }}\n    </span>\n\n    <ul ref=\"dnd-parent\" class=\"flex flex-col p-1\">\n      <li\n        v-for=\"value in dndLocalValue\"\n        :key=\"value.id\"\n        class=\"draggable flex min-h-9 cursor-grab items-start gap-2.5 p-2.5 active:cursor-grabbing\"\n        draggable=\"true\"\n        aria-describedby=\"drag-and-drop-ticket-overviews\"\n      >\n        <CommonIcon\n          class=\"mt-1 shrink-0 fill-stone-200 dark:fill-neutral-500\"\n          name=\"grip-vertical\"\n          size=\"tiny\"\n          decorative\n        />\n        <div class=\"grow\">\n          <CommonLabel class=\"inline text-black dark:text-white\">\n            {{ $t(value.name) }}\n          </CommonLabel>\n          <CommonBadge\n            v-if=\"value.organizationShared\"\n            variant=\"info\"\n            class=\"ms-1.5\"\n            >{{ $t('Only when shared organization member') }}</CommonBadge\n          >\n          <CommonBadge v-if=\"value.outOfOffice\" variant=\"info\" class=\"ms-1.5\">{{\n            $t('Only when out of office replacement')\n          }}</CommonBadge>\n        </div>\n      </li>\n    </ul>\n  </div>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentOverviewResetOrderDocument = gql`\n    mutation userCurrentOverviewResetOrder {\n  userCurrentOverviewResetOrder {\n    success\n    overviews {\n      id\n      name\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentOverviewResetOrderMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentOverviewResetOrderMutation, Types.UserCurrentOverviewResetOrderMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentOverviewResetOrderMutation, Types.UserCurrentOverviewResetOrderMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentOverviewResetOrderMutation, Types.UserCurrentOverviewResetOrderMutationVariables>(UserCurrentOverviewResetOrderDocument, options);\n}\nexport type UserCurrentOverviewResetOrderMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentOverviewResetOrderMutation, Types.UserCurrentOverviewResetOrderMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentOverviewUpdateOrderDocument = gql`\n    mutation userCurrentOverviewUpdateOrder($overviewIds: [ID!]!) {\n  userCurrentOverviewUpdateOrder(overviewIds: $overviewIds) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentOverviewUpdateOrderMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentOverviewUpdateOrderMutation, Types.UserCurrentOverviewUpdateOrderMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentOverviewUpdateOrderMutation, Types.UserCurrentOverviewUpdateOrderMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentOverviewUpdateOrderMutation, Types.UserCurrentOverviewUpdateOrderMutationVariables>(UserCurrentOverviewUpdateOrderDocument, options);\n}\nexport type UserCurrentOverviewUpdateOrderMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentOverviewUpdateOrderMutation, Types.UserCurrentOverviewUpdateOrderMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentOverviewListDocument = gql`\n    query userCurrentOverviewList($ignoreUserConditions: Boolean!) {\n  userCurrentTicketOverviews(ignoreUserConditions: $ignoreUserConditions) {\n    id\n    name\n    organizationShared\n    outOfOffice\n  }\n}\n    `;\nexport function useUserCurrentOverviewListQuery(variables: Types.UserCurrentOverviewListQueryVariables | VueCompositionApi.Ref<Types.UserCurrentOverviewListQueryVariables> | ReactiveFunction<Types.UserCurrentOverviewListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>(UserCurrentOverviewListDocument, variables, options);\n}\nexport function useUserCurrentOverviewListLazyQuery(variables?: Types.UserCurrentOverviewListQueryVariables | VueCompositionApi.Ref<Types.UserCurrentOverviewListQueryVariables> | ReactiveFunction<Types.UserCurrentOverviewListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>(UserCurrentOverviewListDocument, variables, options);\n}\nexport type UserCurrentOverviewListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.UserCurrentOverviewListQuery, Types.UserCurrentOverviewListQueryVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { ref, watch, onActivated } from 'vue'\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport type {\n  UserCurrentOverviewListQuery,\n  UserCurrentOverviewOrderingUpdatesSubscription,\n  UserCurrentOverviewOrderingUpdatesSubscriptionVariables,\n} from '#shared/graphql/types.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\nimport { UserCurrentOverviewOrderingUpdatesDocument } from '#desktop/entities/ticket/graphql/subscriptions/userCurrentOverviewOrderingUpdates.api.ts'\n\nimport PersonalSettingOverviewOrder, {\n  type OverviewItem,\n} from '../components/PersonalSettingOverviewOrder.vue'\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\nimport { useUserCurrentOverviewResetOrderMutation } from '../graphql/mutations/userCurrentOverviewResetOrder.api.ts'\nimport { useUserCurrentOverviewUpdateOrderMutation } from '../graphql/mutations/userCurrentOverviewUpdateOrder.api.ts'\nimport { useUserCurrentOverviewListQuery } from '../graphql/queries/userCurrentOverviewList.api.ts'\n\nconst { breadcrumbItems } = useBreadcrumb(__('Overviews'))\n\nconst overviewList = ref<OverviewItem[]>([])\n\nconst overviewListQuery = new QueryHandler(\n  useUserCurrentOverviewListQuery({ ignoreUserConditions: true }),\n)\n\nconst overviewListQueryLoading = overviewListQuery.loading()\n\nonActivated(() => overviewListQuery.refetch())\n\noverviewListQuery.subscribeToMore<\n  UserCurrentOverviewOrderingUpdatesSubscriptionVariables,\n  UserCurrentOverviewOrderingUpdatesSubscription\n>({\n  document: UserCurrentOverviewOrderingUpdatesDocument,\n  variables: { ignoreUserConditions: true },\n  updateQuery: (prev, { subscriptionData }) => {\n    if (!subscriptionData.data?.userCurrentOverviewOrderingUpdates.overviews) {\n      return null as unknown as UserCurrentOverviewListQuery\n    }\n\n    return {\n      userCurrentTicketOverviews:\n        subscriptionData.data.userCurrentOverviewOrderingUpdates.overviews,\n    }\n  },\n})\n\nwatch(overviewListQuery.result(), (newValue) => {\n  overviewList.value = newValue?.userCurrentTicketOverviews || []\n})\n\nconst { notify } = useNotifications()\n\nconst updateOverviewList = (newValue: OverviewItem[]) => {\n  // Update the local order immediately, in order to avoid laggy UX.\n  overviewList.value = newValue\n\n  const overviewUpdateOrderMutation = new MutationHandler(\n    useUserCurrentOverviewUpdateOrderMutation(),\n    {\n      errorNotificationMessage: __(\n        'Updating the order of your ticket overviews failed.',\n      ),\n    },\n  )\n\n  overviewUpdateOrderMutation\n    .send({\n      overviewIds: newValue.map((overview) => overview.id),\n    })\n    .then(() => {\n      notify({\n        id: 'overview-ordering-success',\n        type: NotificationTypes.Success,\n        message: __('The order of your ticket overviews was updated.'),\n      })\n    })\n}\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst resetOverviewOrder = () => {\n  const userCurrentOverviewResetOrderMutation = new MutationHandler(\n    useUserCurrentOverviewResetOrderMutation(),\n    {\n      errorNotificationMessage: __(\n        'Resetting the order of your ticket overviews failed.',\n      ),\n    },\n  )\n\n  userCurrentOverviewResetOrderMutation.send().then((data) => {\n    if (data?.userCurrentOverviewResetOrder?.success) {\n      notify({\n        id: 'overview-ordering-delete-success',\n        type: NotificationTypes.Success,\n        message: __('The order of your ticket overviews was reset.'),\n      })\n\n      if (data.userCurrentOverviewResetOrder.overviews) {\n        overviewList.value = data.userCurrentOverviewResetOrder.overviews\n      }\n    }\n  })\n}\n\nconst confirmResetOverviewOrder = async () => {\n  const confirmed = await waitForVariantConfirmation('confirm')\n\n  if (confirmed) resetOverviewOrder()\n}\n</script>\n\n<template>\n  <LayoutContent :breadcrumb-items=\"breadcrumbItems\" width=\"narrow\">\n    <CommonLoader class=\"mt-5 mb-3\" :loading=\"overviewListQueryLoading\">\n      <div class=\"mb-4\">\n        <CommonLabel\n          id=\"label-ticket-overview-order\"\n          class=\"!mt-0.5 mb-1 !block\"\n          >{{ $t('Order of ticket overviews') }}\n        </CommonLabel>\n\n        <PersonalSettingOverviewOrder\n          :model-value=\"overviewList\"\n          aria-labelledby=\"label-ticket-overview-order\"\n          @update:model-value=\"updateOverviewList\"\n        />\n\n        <div class=\"flex flex-col items-end\">\n          <CommonButton\n            :aria-label=\"$t('Reset Overview Order')\"\n            class=\"mt-4\"\n            variant=\"danger\"\n            size=\"medium\"\n            @click.stop=\"confirmResetOverviewOrder\"\n          >\n            {{ $t('Reset Overview Order') }}\n          </CommonButton>\n        </div>\n      </div>\n    </CommonLoader>\n  </LayoutContent>\n</template>\n"],"names":["UserCurrentOverviewOrderingUpdatesDocument","gql","localValue","_useModel","__props","dndEndCallback","parent","parentData","parents","cloneDeep","dndParentElement","useTemplateRef","dndLocalValue","ref","watch","newValue","isEqual","dragAndDrop","startAndEndEventsDNDPlugin","animations","UserCurrentOverviewResetOrderDocument","ErrorsFragmentDoc","useUserCurrentOverviewResetOrderMutation","options","VueApolloComposable.useMutation","UserCurrentOverviewUpdateOrderDocument","useUserCurrentOverviewUpdateOrderMutation","UserCurrentOverviewListDocument","useUserCurrentOverviewListQuery","variables","VueApolloComposable.useQuery","breadcrumbItems","useBreadcrumb","overviewList","overviewListQuery","QueryHandler","overviewListQueryLoading","onActivated","prev","subscriptionData","_a","notify","useNotifications","updateOverviewList","MutationHandler","overview","NotificationTypes","waitForVariantConfirmation","useConfirmation","resetOverviewOrder","data","confirmResetOverviewOrder"],"mappings":"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"}