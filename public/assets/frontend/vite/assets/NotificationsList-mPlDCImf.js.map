{"version":3,"file":"NotificationsList-mPlDCImf.js","sources":["../../../../../app/frontend/apps/mobile/pages/online-notification/components/ActivityMessage.vue","../../../../../app/frontend/apps/mobile/pages/online-notification/components/NotificationItem.vue","../../../../../app/frontend/apps/mobile/pages/online-notification/views/NotificationsList.vue"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { toRef } from 'vue'\n\nimport CommonAvatar from '#shared/components/CommonAvatar/CommonAvatar.vue'\nimport CommonUserAvatar from '#shared/components/CommonUserAvatar/CommonUserAvatar.vue'\nimport { useActivityMessage } from '#shared/composables/activity-message/useActivityMessage.ts'\nimport type { OnlineNotification } from '#shared/graphql/types.ts'\nimport { markup } from '#shared/utils/markup.ts'\n\ninterface Props {\n  activity: OnlineNotification\n}\n\nconst props = defineProps<Props>()\n\nconst { builder, message, link } = useActivityMessage(toRef(props, 'activity'))\n\ndefineEmits<{\n  seen: []\n}>()\n</script>\n\n<template>\n  <component\n    :is=\"link ? 'CommonLink' : 'div'\"\n    v-if=\"builder\"\n    class=\"flex flex-1 border-b border-white/10 py-4\"\n    :link=\"link\"\n    @click=\"!activity.seen ? $emit('seen') : undefined\"\n  >\n    <div class=\"flex items-center ltr:mr-4 rtl:ml-4\">\n      <CommonUserAvatar\n        v-if=\"activity.createdBy\"\n        :entity=\"activity.createdBy\"\n        no-indicator\n      />\n      <CommonAvatar v-else class=\"bg-red-bright text-white\" icon=\"lock\" />\n    </div>\n\n    <div class=\"flex flex-col\">\n      <!--  eslint-disable vue/no-v-html -->\n      <div class=\"text-lg leading-5\" v-html=\"markup(message)\" />\n      <div class=\"text-gray mt-1 flex\">\n        <CommonDateTime :date-time=\"activity.createdAt\" type=\"relative\" />\n      </div>\n    </div>\n  </component>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { useOnlineNotificationActions } from '#shared/entities/online-notification/composables/useOnlineNotificationActions.ts'\nimport type { OnlineNotification, Scalars } from '#shared/graphql/types.ts'\n\nimport ActivityMessage from './ActivityMessage.vue'\n\ninterface Props {\n  activity: OnlineNotification\n}\n\nconst props = defineProps<Props>()\n\nconst emit = defineEmits<{\n  remove: [id: Scalars['ID']['output']]\n  seen: [id: Scalars['ID']['output']]\n}>()\n\nconst { deleteNotification, deleteNotificationMutation } =\n  useOnlineNotificationActions()\n\nconst loading = deleteNotificationMutation.loading()\n\nconst removeNotification = () => {\n  emit('remove', props.activity.id)\n\n  return deleteNotification(props.activity.id)\n}\n</script>\n\n<template>\n  <div class=\"flex\">\n    <button\n      class=\"flex items-center ltr:pr-2 rtl:pl-2\"\n      :class=\"{ 'cursor-pointer': !loading, 'opacity-50': loading }\"\n      :disabled=\"loading\"\n      @click=\"removeNotification()\"\n    >\n      <CommonIcon name=\"delete\" class=\"text-red\" size=\"tiny\" />\n    </button>\n    <div class=\"flex items-center ltr:pr-2 rtl:pl-2\">\n      <div\n        role=\"status\"\n        class=\"h-3 w-3 rounded-full\"\n        :class=\"{ 'bg-blue': !activity.seen }\"\n        :aria-label=\"\n          activity.seen ? $t('Notification read') : $t('Unread notification')\n        \"\n      ></div>\n    </div>\n    <ActivityMessage :activity=\"activity\" @seen=\"$emit('seen', activity.id)\" />\n  </div>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\n\nimport { useOnlineNotificationActions } from '#shared/entities/online-notification/composables/useOnlineNotificationActions.ts'\nimport { useOnlineNotificationCount } from '#shared/entities/online-notification/composables/useOnlineNotificationCount.ts'\nimport { useOnlineNotificationsQuery } from '#shared/entities/online-notification/graphql/queries/onlineNotifications.api.ts'\nimport type { OnlineNotification, Scalars } from '#shared/graphql/types.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\nimport { edgesToArray } from '#shared/utils/helpers.ts'\n\nimport CommonLoader from '#mobile/components/CommonLoader/CommonLoader.vue'\nimport { useHeader } from '#mobile/composables/useHeader.ts'\n\nimport NotificationItem from '../components/NotificationItem.vue'\n\nconst notificationsHandler = new QueryHandler(useOnlineNotificationsQuery())\n\nconst loading = notificationsHandler.loading()\nconst notificationsResult = notificationsHandler.result()\nlet mutationTriggered = false\n\nuseHeader({\n  backUrl: '/',\n  backAvoidHomeButton: true,\n  refetch: computed(() => loading.value && notificationsResult.value != null),\n})\n\nconst notifications = computed(\n  () =>\n    edgesToArray(\n      notificationsResult.value?.onlineNotifications,\n    ) as OnlineNotification[],\n)\n\nconst { seenNotification, markAllRead } = useOnlineNotificationActions()\n\nconst runSeenNotification = (id: Scalars['ID']['output']) => {\n  mutationTriggered = true\n  seenNotification(id)\n}\n\nconst markingAsSeen = ref(false)\n\nconst runMarkAllRead = async () => {\n  markingAsSeen.value = true\n\n  const onlineNotificationIds = notifications.value\n    .filter((elem) => !elem.seen)\n    .map((elem) => elem.id)\n\n  mutationTriggered = true\n\n  await markAllRead(onlineNotificationIds)\n\n  markingAsSeen.value = false\n}\n\nconst notificationRemoved = () => {\n  mutationTriggered = true\n}\n\n// TODO: currently this triggered in some situtations a real subscription on the server: https://github.com/apollographql/apollo-client/issues/10117\nconst { unseenCount, notificationsCountSubscription } =\n  useOnlineNotificationCount()\n\nnotificationsCountSubscription.watchOnResult(() => {\n  notificationsHandler.refetch()\n  if (!mutationTriggered) notificationsHandler.refetch()\n  mutationTriggered = false\n})\n\nconst haveUnread = computed(() => unseenCount.value > 0)\n</script>\n\n<template>\n  <CommonLoader :loading=\"!notifications.length && loading\">\n    <div class=\"ltr:pr-4 ltr:pl-3 rtl:pr-3 rtl:pl-4\">\n      <NotificationItem\n        v-for=\"notification of notifications\"\n        :key=\"notification.id\"\n        :activity=\"notification\"\n        @remove=\"notificationRemoved\"\n        @seen=\"runSeenNotification\"\n      />\n\n      <div v-if=\"!notifications.length\" class=\"px-4 py-3 text-center text-base\">\n        {{ $t('No entries') }}\n      </div>\n\n      <!-- TODO: Add some better solution when mark as seen is running.\n        Maybe disabled state that it can not be clicked twice or hidding the action completley. -->\n      <div\n        v-if=\"haveUnread\"\n        class=\"text-blue flex flex-1 cursor-pointer justify-center px-4 py-3 text-base\"\n        :class=\"{ 'text-red': markingAsSeen }\"\n        role=\"button\"\n        tabindex=\"0\"\n        @keydown.enter=\"runMarkAllRead\"\n        @click=\"runMarkAllRead\"\n      >\n        {{ $t('Mark all as read') }}\n      </div>\n    </div>\n  </CommonLoader>\n</template>\n"],"names":["props","__props","builder","message","link","useActivityMessage","toRef","emit","__emit","deleteNotification","deleteNotificationMutation","useOnlineNotificationActions","loading","removeNotification","notificationsHandler","QueryHandler","useOnlineNotificationsQuery","notificationsResult","mutationTriggered","useHeader","computed","notifications","edgesToArray","_a","seenNotification","markAllRead","runSeenNotification","id","markingAsSeen","ref","runMarkAllRead","onlineNotificationIds","elem","notificationRemoved","unseenCount","notificationsCountSubscription","useOnlineNotificationCount","haveUnread"],"mappings":"++BAeA,MAAMA,EAAQC,EAER,CAAE,QAAAC,EAAS,QAAAC,EAAS,KAAAC,GAASC,EAAmBC,EAAMN,EAAO,UAAU,CAAC,+yBCL9E,MAAMA,EAAQC,EAERM,EAAOC,EAKP,CAAE,mBAAAC,EAAoB,2BAAAC,CAA2B,EACrDC,EAA6B,EAEzBC,EAAUF,EAA2B,UAErCG,EAAqB,KACpBN,EAAA,SAAUP,EAAM,SAAS,EAAE,EAEzBS,EAAmBT,EAAM,SAAS,EAAE,ysBCV7C,MAAMc,EAAuB,IAAIC,EAAaC,EAA6B,CAAA,EAErEJ,EAAUE,EAAqB,UAC/BG,EAAsBH,EAAqB,SACjD,IAAII,EAAoB,GAEdC,EAAA,CACR,QAAS,IACT,oBAAqB,GACrB,QAASC,EAAS,IAAMR,EAAQ,OAASK,EAAoB,OAAS,IAAI,CAAA,CAC3E,EAED,MAAMI,EAAgBD,EACpB,WACE,OAAAE,GACEC,EAAAN,EAAoB,QAApB,YAAAM,EAA2B,mBAC7B,EAAA,EAGE,CAAE,iBAAAC,EAAkB,YAAAC,CAAY,EAAId,EAA6B,EAEjEe,EAAuBC,GAAgC,CACvCT,EAAA,GACpBM,EAAiBG,CAAE,CAAA,EAGfC,EAAgBC,EAAI,EAAK,EAEzBC,EAAiB,SAAY,CACjCF,EAAc,MAAQ,GAEtB,MAAMG,EAAwBV,EAAc,MACzC,OAAQW,GAAS,CAACA,EAAK,IAAI,EAC3B,IAAKA,GAASA,EAAK,EAAE,EAEJd,EAAA,GAEpB,MAAMO,EAAYM,CAAqB,EAEvCH,EAAc,MAAQ,EAAA,EAGlBK,EAAsB,IAAM,CACZf,EAAA,EAAA,EAIhB,CAAE,YAAAgB,EAAa,+BAAAC,CAA+B,EAClDC,EAA2B,EAE7BD,EAA+B,cAAc,IAAM,CACjDrB,EAAqB,QAAQ,EACxBI,GAAmBJ,EAAqB,UACzBI,EAAA,EAAA,CACrB,EAED,MAAMmB,EAAajB,EAAS,IAAMc,EAAY,MAAQ,CAAC"}