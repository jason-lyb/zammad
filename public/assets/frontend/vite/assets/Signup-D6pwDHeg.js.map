{"version":3,"file":"Signup-D6pwDHeg.js","sources":["../../../../../app/frontend/apps/desktop/pages/authentication/graphql/mutations/userSignup.api.ts","../../../../../app/frontend/apps/desktop/pages/authentication/graphql/mutations/userSignupResend.api.ts","../../../../../app/frontend/apps/desktop/pages/authentication/views/Signup.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserSignupDocument = gql`\n    mutation userSignup($input: UserSignupInput!) {\n  userSignup(input: $input) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserSignupMutation(options: VueApolloComposable.UseMutationOptions<Types.UserSignupMutation, Types.UserSignupMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserSignupMutation, Types.UserSignupMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserSignupMutation, Types.UserSignupMutationVariables>(UserSignupDocument, options);\n}\nexport type UserSignupMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserSignupMutation, Types.UserSignupMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserSignupResendDocument = gql`\n    mutation userSignupResend($email: String!) {\n  userSignupResend(email: $email) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserSignupResendMutation(options: VueApolloComposable.UseMutationOptions<Types.UserSignupResendMutation, Types.UserSignupResendMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserSignupResendMutation, Types.UserSignupResendMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserSignupResendMutation, Types.UserSignupResendMutationVariables>(UserSignupResendDocument, options);\n}\nexport type UserSignupResendMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserSignupResendMutation, Types.UserSignupResendMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport type { SignupFormData } from '#shared/entities/user/types.ts'\nimport { EnumPublicLinksScreen } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonPublicLinks from '#desktop/components/CommonPublicLinks/CommonPublicLinks.vue'\nimport LayoutPublicPage from '#desktop/components/layout/LayoutPublicPage/LayoutPublicPage.vue'\nimport { useSignupForm } from '#desktop/composables/authentication/useSignupForm.ts'\n\nimport { useUserSignupMutation } from '../graphql/mutations/userSignup.api.ts'\nimport { useUserSignupResendMutation } from '../graphql/mutations/userSignupResend.api.ts'\n\ndefineOptions({\n  beforeRouteEnter(to) {\n    const application = useApplicationStore()\n    if (!application.config.user_create_account) {\n      return to.redirectedFrom ? false : '/'\n    }\n    return true\n  },\n})\n\nconst application = useApplicationStore()\n\nconst router = useRouter()\n\nconst { signupSchema } = useSignupForm()\n\nconst { form, isDisabled } = useForm()\n\nconst signupSent = ref(false)\nconst signupEmail = ref('')\n\nconst pageTitle = computed(() => {\n  if (signupSent.value) return __('Registration successful!')\n\n  return i18n.t('Join %s', application.config.product_name)\n})\n\nconst singup = async (data: SignupFormData) => {\n  const sendSignup = new MutationHandler(useUserSignupMutation())\n\n  return sendSignup\n    .send({\n      input: {\n        firstname: data.firstname,\n        lastname: data.lastname,\n        email: data.email,\n        password: data.password,\n      },\n    })\n    .then(() => {\n      signupSent.value = true\n      signupEmail.value = data.email\n    })\n}\n\nconst { notify } = useNotifications()\n\nconst resendVerifyEmail = () => {\n  const resendVerifyEmail = new MutationHandler(\n    useUserSignupResendMutation({\n      variables: {\n        email: signupEmail.value,\n      },\n    }),\n    {\n      errorShowNotification: false,\n    },\n  )\n\n  resendVerifyEmail\n    .send()\n    .then(() => {\n      notify({\n        id: 'resend-verify-email',\n        type: NotificationTypes.Success,\n        message: __('Email sent to \"%s\". Please verify your email account.'),\n        messagePlaceholder: [signupEmail.value],\n      })\n    })\n    .catch(() => {\n      notify({\n        id: 'resend-verify-email-error',\n        type: NotificationTypes.Error,\n        message: __('The verification email could not be resent.'),\n      })\n    })\n}\n\nconst goToLogin = () => {\n  router.replace('login')\n}\n</script>\n\n<template>\n  <LayoutPublicPage box-size=\"medium\" :show-logo=\"false\" :title=\"pageTitle\">\n    <Form\n      v-if=\"!signupSent\"\n      id=\"signup\"\n      ref=\"form\"\n      form-class=\"mb-2.5\"\n      :schema=\"signupSchema\"\n      @submit=\"singup($event as FormSubmitData<SignupFormData>)\"\n    />\n\n    <div v-else class=\"flex flex-col items-center gap-2.5\">\n      <CommonLabel class=\"py-5 text-center\">\n        {{ $t('Thanks for joining. Email sent to \"%s\".', signupEmail) }}\n      </CommonLabel>\n      <CommonLabel class=\"py-5 text-center\">\n        {{\n          $t(\n            \"Please click on the link in the verification email. If you don't see the email, check other places it might be, like your junk, spam, social, or other folders.\",\n          )\n        }}\n      </CommonLabel>\n    </div>\n\n    <template #boxActions>\n      <CommonButton\n        variant=\"secondary\"\n        size=\"medium\"\n        :disabled=\"isDisabled\"\n        @click=\"goToLogin()\"\n      >\n        {{ $t('Cancel & Go Back') }}\n      </CommonButton>\n\n      <CommonButton\n        v-if=\"!signupSent\"\n        variant=\"submit\"\n        type=\"submit\"\n        size=\"medium\"\n        form=\"signup\"\n        :disabled=\"isDisabled\"\n      >\n        {{ $t('Create my account') }}\n      </CommonButton>\n      <CommonButton\n        v-else\n        variant=\"submit\"\n        size=\"medium\"\n        @click=\"resendVerifyEmail()\"\n      >\n        {{ $t('Resend verification email') }}\n      </CommonButton>\n    </template>\n\n    <template #bottomContent>\n      <div\n        class=\"inline-flex flex-wrap items-center justify-center p-2 text-sm\"\n      >\n        <CommonLabel class=\"text-center text-stone-200 dark:text-neutral-500\">\n          {{\n            $t(\n              \"You're already registered with your email address if you've been in touch with our Support team.\",\n            )\n          }}\n        </CommonLabel>\n        <CommonLink v-if=\"$c.user_lost_password\" link=\"/reset-password\">{{\n          $t('You can request your password here.')\n        }}</CommonLink>\n      </div>\n      <CommonPublicLinks :screen=\"EnumPublicLinksScreen.Signup\" />\n    </template>\n  </LayoutPublicPage>\n</template>\n"],"names":["UserSignupDocument","gql","ErrorsFragmentDoc","useUserSignupMutation","options","VueApolloComposable.useMutation","UserSignupResendDocument","useUserSignupResendMutation","application","useApplicationStore","router","useRouter","signupSchema","useSignupForm","form","isDisabled","useForm","signupSent","ref","signupEmail","pageTitle","computed","i18n","singup","data","MutationHandler","notify","useNotifications","resendVerifyEmail","NotificationTypes","goToLogin"],"mappings":"ogDAQO,MAAMA,EAAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS5BC,CAAiB,GACP,SAAAC,EAAsBC,EAAuO,GAAI,CACxQ,OAAAC,EAA6FL,EAAoBI,CAAO,CACjI,CCZO,MAAME,EAA2BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlCC,CAAiB,GACP,SAAAK,EAA4BH,EAA+P,GAAI,CACtS,OAAAC,EAAyGC,EAA0BF,CAAO,CACnJ,2PCeA,MAAMI,EAAcC,IAEdC,EAASC,IAET,CAAE,aAAAC,GAAiBC,IAEnB,CAAE,KAAAC,EAAM,WAAAC,CAAW,EAAIC,EAAQ,EAE/BC,EAAaC,EAAI,EAAK,EACtBC,EAAcD,EAAI,EAAE,EAEpBE,EAAYC,EAAS,IACrBJ,EAAW,MAAc,GAAG,0BAA0B,EAEnDK,EAAK,EAAE,UAAWd,EAAY,OAAO,YAAY,CACzD,EAEKe,EAAS,MAAOC,GACD,IAAIC,EAAgBtB,EAAuB,CAAA,EAG3D,KAAK,CACJ,MAAO,CACL,UAAWqB,EAAK,UAChB,SAAUA,EAAK,SACf,MAAOA,EAAK,MACZ,SAAUA,EAAK,QACjB,CAAA,CACD,EACA,KAAK,IAAM,CACVP,EAAW,MAAQ,GACnBE,EAAY,MAAQK,EAAK,KAAA,CAC1B,EAGC,CAAE,OAAAE,GAAWC,IAEbC,EAAoB,IAAM,CACJ,IAAIH,EAC5BlB,EAA4B,CAC1B,UAAW,CACT,MAAOY,EAAY,KACrB,CAAA,CACD,EACD,CACE,sBAAuB,EACzB,CAAA,EAIC,OACA,KAAK,IAAM,CACHO,EAAA,CACL,GAAI,sBACJ,KAAMG,EAAkB,QACxB,QAAS,GAAG,uDAAuD,EACnE,mBAAoB,CAACV,EAAY,KAAK,CAAA,CACvC,CAAA,CACF,EACA,MAAM,IAAM,CACJO,EAAA,CACL,GAAI,4BACJ,KAAMG,EAAkB,MACxB,QAAS,GAAG,6CAA6C,CAAA,CAC1D,CAAA,CACF,CAAA,EAGCC,EAAY,IAAM,CACtBpB,EAAO,QAAQ,OAAO,CAAA"}