{"version":3,"mappings":"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","names":["UserCurrentAvatarSelectDocument","gql","ErrorsFragmentDoc","useUserCurrentAvatarSelectMutation","options","VueApolloComposable.useMutation","UserCurrentAvatarListDocument","useUserCurrentAvatarListQuery","VueApolloComposable.useQuery","UserCurrentAvatarUpdatesDocument","user","storeToRefs","useSessionStore","breadcrumbItems","useBreadcrumb","notify","useNotifications","application","useApplicationStore","apiUrl","isTouchDevice","useTouchDevice","avatarListQuery","QueryHandler","avatarListQueryResult","avatarListQueryLoading","prev","subscriptionData","_a","currentAvatars","computed","currentDefaultAvatar","avatar","fileUploadElement","useTemplateRef","cameraFlyout","useFlyout","cropImageFlyout","modifyDefaultAvatarCache","cache","newValue","storeAvatar","image","MutationHandler","useUserCurrentAvatarAddMutation","data","userCurrentAvatarAdd","existingAvatars","NotificationTypes","addAvatarByUpload","addAvatarByCamera","loadAvatar","input","files","convertFileList","selectAvatar","getApolloClient","oldDefaultAvatar","deleteAvatar","useUserCurrentAvatarDeleteMutation","waitForVariantConfirmation","useConfirmation","confirmDeleteAvatar","avatarButtonClasses","activeAvatarButtonClass","active"],"ignoreList":[],"sources":["../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentAvatarSelect.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/queries/userCurrentAvatarList.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/subscriptions/userCurrentAvatarUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingAvatar.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAvatarSelectDocument = gql`\n    mutation userCurrentAvatarSelect($id: ID!) {\n  userCurrentAvatarSelect(id: $id) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentAvatarSelectMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentAvatarSelectMutation, Types.UserCurrentAvatarSelectMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentAvatarSelectMutation, Types.UserCurrentAvatarSelectMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentAvatarSelectMutation, Types.UserCurrentAvatarSelectMutationVariables>(UserCurrentAvatarSelectDocument, options);\n}\nexport type UserCurrentAvatarSelectMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentAvatarSelectMutation, Types.UserCurrentAvatarSelectMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAvatarListDocument = gql`\n    query userCurrentAvatarList {\n  userCurrentAvatarList {\n    id\n    default\n    deletable\n    initial\n    imageHash\n    createdAt\n    updatedAt\n  }\n}\n    `;\nexport function useUserCurrentAvatarListQuery(options: VueApolloComposable.UseQueryOptions<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>(UserCurrentAvatarListDocument, {}, options);\n}\nexport function useUserCurrentAvatarListLazyQuery(options: VueApolloComposable.UseQueryOptions<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>(UserCurrentAvatarListDocument, {}, options);\n}\nexport type UserCurrentAvatarListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.UserCurrentAvatarListQuery, Types.UserCurrentAvatarListQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAvatarUpdatesDocument = gql`\n    subscription userCurrentAvatarUpdates {\n  userCurrentAvatarUpdates {\n    avatars {\n      id\n      default\n      deletable\n      initial\n      imageHash\n      createdAt\n      updatedAt\n    }\n  }\n}\n    `;\nexport function useUserCurrentAvatarUpdatesSubscription(options: VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentAvatarUpdatesSubscription, Types.UserCurrentAvatarUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentAvatarUpdatesSubscription, Types.UserCurrentAvatarUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentAvatarUpdatesSubscription, Types.UserCurrentAvatarUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserCurrentAvatarUpdatesSubscription, Types.UserCurrentAvatarUpdatesSubscriptionVariables>(UserCurrentAvatarUpdatesDocument, {}, options);\n}\nexport type UserCurrentAvatarUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserCurrentAvatarUpdatesSubscription, Types.UserCurrentAvatarUpdatesSubscriptionVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from 'pinia'\nimport { computed, useTemplateRef } from 'vue'\n\nimport CommonAvatar from '#shared/components/CommonAvatar/CommonAvatar.vue'\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport CommonUserAvatar from '#shared/components/CommonUserAvatar/CommonUserAvatar.vue'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useTouchDevice } from '#shared/composables/useTouchDevice.ts'\nimport { useUserCurrentAvatarAddMutation } from '#shared/entities/user/current/graphql/mutations/userCurrentAvatarAdd.api.ts'\nimport { useUserCurrentAvatarDeleteMutation } from '#shared/entities/user/current/graphql/mutations/userCurrentAvatarDelete.api.ts'\nimport type {\n  UserCurrentAvatarUpdatesSubscriptionVariables,\n  UserCurrentAvatarUpdatesSubscription,\n  Avatar,\n  UserCurrentAvatarListQuery,\n} from '#shared/graphql/types.ts'\nimport { getApolloClient } from '#shared/server/apollo/client.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\nimport type { ImageFileData } from '#shared/utils/files.ts'\nimport {\n  convertFileList,\n  allowedImageTypesString,\n} from '#shared/utils/files.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonDivider from '#desktop/components/CommonDivider/CommonDivider.vue'\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\n\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\nimport { useUserCurrentAvatarSelectMutation } from '../graphql/mutations/userCurrentAvatarSelect.api.ts'\nimport {\n  useUserCurrentAvatarListQuery,\n  UserCurrentAvatarListDocument,\n} from '../graphql/queries/userCurrentAvatarList.api.ts'\nimport { UserCurrentAvatarUpdatesDocument } from '../graphql/subscriptions/userCurrentAvatarUpdates.api.ts'\n\nimport type { ApolloCache, NormalizedCacheObject } from '@apollo/client/core'\n\nconst { user } = storeToRefs(useSessionStore())\n\nconst { breadcrumbItems } = useBreadcrumb(__('Avatar'))\n\nconst { notify } = useNotifications()\n\nconst application = useApplicationStore()\nconst apiUrl = String(application.config.api_path)\n\nconst { isTouchDevice } = useTouchDevice()\n\nconst avatarListQuery = new QueryHandler(useUserCurrentAvatarListQuery())\nconst avatarListQueryResult = avatarListQuery.result()\nconst avatarListQueryLoading = avatarListQuery.loading()\n\navatarListQuery.subscribeToMore<\n  UserCurrentAvatarUpdatesSubscriptionVariables,\n  UserCurrentAvatarUpdatesSubscription\n>({\n  document: UserCurrentAvatarUpdatesDocument,\n  updateQuery: (prev, { subscriptionData }) => {\n    if (!subscriptionData.data?.userCurrentAvatarUpdates.avatars) {\n      return null as unknown as UserCurrentAvatarListQuery\n    }\n\n    return {\n      userCurrentAvatarList:\n        subscriptionData.data.userCurrentAvatarUpdates.avatars,\n    }\n  },\n})\n\nconst currentAvatars = computed(() => {\n  return avatarListQueryResult.value?.userCurrentAvatarList || []\n})\n\nconst currentDefaultAvatar = computed(() => {\n  return currentAvatars.value.find((avatar) => avatar.default)\n})\n\nconst fileUploadElement = useTemplateRef('file-upload')\n\nconst cameraFlyout = useFlyout({\n  name: 'avatar-camera-capture',\n  component: () =>\n    import('../components/PersonalSettingAvatarCameraFlyout.vue'),\n})\n\nconst cropImageFlyout = useFlyout({\n  name: 'avatar-file-upload',\n  component: () =>\n    import('../components/PersonalSettingAvatarCropImageFlyout.vue'),\n})\n\nconst modifyDefaultAvatarCache = (\n  cache: ApolloCache<NormalizedCacheObject>,\n  avatar: Avatar | undefined,\n  newValue: boolean,\n) => {\n  if (!avatar) return\n\n  cache.modify({\n    id: cache.identify(avatar),\n    fields: {\n      default() {\n        return newValue\n      },\n    },\n  })\n}\n\nconst storeAvatar = (image: ImageFileData) => {\n  if (!image) return\n\n  const addAvatarMutation = new MutationHandler(\n    useUserCurrentAvatarAddMutation({\n      variables: {\n        images: {\n          original: image,\n          resized: {\n            name: 'resized_avatar.png',\n            type: 'image/png',\n            content: image.content,\n          },\n        },\n      },\n      update: (cache, { data }) => {\n        if (!data) return\n\n        const { userCurrentAvatarAdd } = data\n        if (!userCurrentAvatarAdd?.avatar) return\n\n        const newIdPresent = currentAvatars.value.find((avatar) => {\n          return avatar.id === userCurrentAvatarAdd.avatar?.id\n        })\n        if (newIdPresent) return\n\n        modifyDefaultAvatarCache(cache, currentDefaultAvatar.value, false)\n\n        let existingAvatars = cache.readQuery<UserCurrentAvatarListQuery>({\n          query: UserCurrentAvatarListDocument,\n        })\n\n        existingAvatars = {\n          ...existingAvatars,\n          userCurrentAvatarList: [\n            ...(existingAvatars?.userCurrentAvatarList || []),\n            userCurrentAvatarAdd.avatar,\n          ],\n        }\n\n        cache.writeQuery({\n          query: UserCurrentAvatarListDocument,\n          data: existingAvatars,\n        })\n      },\n    }),\n    {\n      errorNotificationMessage: __('The avatar could not be uploaded.'),\n    },\n  )\n\n  addAvatarMutation.send().then((data) => {\n    if (data?.userCurrentAvatarAdd?.avatar) {\n      if (user.value) {\n        user.value.image = data.userCurrentAvatarAdd.avatar.imageHash\n      }\n\n      notify({\n        id: 'avatar-upload-success',\n        type: NotificationTypes.Success,\n        message: __('Your avatar has been uploaded.'),\n      })\n    }\n  })\n}\n\nconst addAvatarByUpload = () => {\n  fileUploadElement.value?.click()\n}\n\nconst addAvatarByCamera = () => {\n  cameraFlyout.open({\n    onAvatarCaptured: (image: ImageFileData) => {\n      storeAvatar(image)\n    },\n  })\n}\n\nconst loadAvatar = async (input: HTMLInputElement | null) => {\n  const files = input?.files\n  if (!files) return\n\n  const [avatar] = await convertFileList(files)\n\n  cropImageFlyout.open({\n    image: avatar,\n    onImageCropped: (image: ImageFileData) => storeAvatar(image),\n  })\n\n  // Reset input value to allow selecting the same file again\n  input.value = ''\n}\n\nconst selectAvatar = (avatar: Avatar) => {\n  // Update the cache already before the\n  const { cache } = getApolloClient()\n  const oldDefaultAvatar = currentDefaultAvatar.value\n\n  modifyDefaultAvatarCache(cache, oldDefaultAvatar, false)\n  modifyDefaultAvatarCache(cache, avatar, true)\n\n  const accountAvatarSelectMutation = new MutationHandler(\n    useUserCurrentAvatarSelectMutation(() => ({\n      variables: { id: avatar.id },\n    })),\n    {\n      errorNotificationMessage: __('The avatar could not be selected.'),\n    },\n  )\n\n  accountAvatarSelectMutation\n    .send()\n    .then(() => {\n      notify({\n        id: 'avatar-select-success',\n        type: NotificationTypes.Success,\n        message: __('Your avatar has been changed.'),\n      })\n    })\n    .catch(() => {\n      // Reset the cache again if the mutation fails.\n      modifyDefaultAvatarCache(cache, oldDefaultAvatar, true)\n      modifyDefaultAvatarCache(cache, avatar, false)\n    })\n}\n\nconst deleteAvatar = (avatar: Avatar) => {\n  const accountAvatarDeleteMutation = new MutationHandler(\n    useUserCurrentAvatarDeleteMutation(() => ({\n      variables: { id: avatar.id },\n      update(cache) {\n        if (avatar.default) {\n          modifyDefaultAvatarCache(cache, currentAvatars.value[0], true)\n        }\n\n        cache.evict({ id: cache.identify(avatar) })\n        cache.gc()\n      },\n    })),\n    {\n      errorNotificationMessage: __('The avatar could not be deleted.'),\n    },\n  )\n\n  accountAvatarDeleteMutation.send().then(() => {\n    notify({\n      id: 'avatar-delete-success',\n      type: NotificationTypes.Success,\n      message: __('Your avatar has been deleted.'),\n    })\n  })\n}\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst confirmDeleteAvatar = async (avatar: Avatar) => {\n  const confirmed = await waitForVariantConfirmation('delete')\n\n  if (confirmed) deleteAvatar(avatar)\n}\n\nconst avatarButtonClasses = [\n  'cursor-pointer',\n  'outline-transparent',\n  'hover:outline-blue-900',\n  'rounded-full',\n  'outline',\n  'outline-3',\n  'focus:outline-blue-800',\n  'hover:focus:outline-blue-800',\n]\n\nconst activeAvatarButtonClass = (active: boolean) => {\n  return {\n    'outline-blue-800 hover:outline-blue-800': active,\n  }\n}\n</script>\n\n<template>\n  <LayoutContent :breadcrumb-items=\"breadcrumbItems\" width=\"narrow\">\n    <CommonLoader :loading=\"avatarListQueryLoading\">\n      <div class=\"mb-4\">\n        <CommonLabel class=\"!mt-0.5 mb-1 !block\"\n          >{{ $t('Your avatar') }}\n        </CommonLabel>\n\n        <div class=\"rounded-lg bg-blue-200 dark:bg-gray-700\">\n          <div class=\"flex flex-row flex-wrap gap-2.5 p-2.5\">\n            <template v-for=\"avatar in currentAvatars\" :key=\"avatar.id\">\n              <button\n                v-if=\"avatar.initial && user\"\n                :aria-label=\"$t('Select this avatar')\"\n                :class=\"[\n                  ...avatarButtonClasses,\n                  activeAvatarButtonClass(avatar.default),\n                ]\"\n                @click.stop=\"avatar.default ? void 0 : selectAvatar(avatar)\"\n              >\n                <CommonUserAvatar\n                  :class=\"{ 'avatar-selected': avatar.default }\"\n                  :entity=\"user\"\n                  class=\"!flex border-neutral-100 dark:border-gray-900\"\n                  size=\"large\"\n                  initials-only\n                  personal\n                  no-indicator\n                  no-muted\n                />\n              </button>\n              <div\n                v-else-if=\"avatar.imageHash\"\n                class=\"group/avatar relative flex\"\n              >\n                <button\n                  :aria-label=\"$t('Select this avatar')\"\n                  :class=\"[\n                    ...avatarButtonClasses,\n                    activeAvatarButtonClass(avatar.default),\n                  ]\"\n                  @click.stop=\"avatar.default ? void 0 : selectAvatar(avatar)\"\n                >\n                  <CommonAvatar\n                    :class=\"{ 'avatar-selected': avatar.default }\"\n                    :image=\"`${apiUrl}/users/image/${avatar.imageHash}`\"\n                    class=\"!flex border-neutral-100 dark:border-gray-900\"\n                    size=\"large\"\n                  >\n                  </CommonAvatar>\n                </button>\n                <CommonButton\n                  v-if=\"avatar.deletable\"\n                  :aria-label=\"$t('Delete this avatar')\"\n                  :class=\"{ 'opacity-0 transition-opacity': !isTouchDevice }\"\n                  class=\"absolute -end-2 -top-1 text-white group-hover/avatar:opacity-100 focus:opacity-100\"\n                  icon=\"x-lg\"\n                  size=\"small\"\n                  variant=\"remove\"\n                  @click.stop=\"confirmDeleteAvatar(avatar)\"\n                />\n              </div>\n            </template>\n          </div>\n\n          <CommonDivider padding />\n\n          <div class=\"w-full p-1 text-center\">\n            <input\n              ref=\"file-upload\"\n              :accept=\"allowedImageTypesString()\"\n              aria-hidden=\"true\"\n              class=\"hidden\"\n              data-test-id=\"fileUploadInput\"\n              type=\"file\"\n              @change=\"loadAvatar(fileUploadElement)\"\n            />\n\n            <CommonButton\n              class=\"m-1\"\n              size=\"medium\"\n              prefix-icon=\"image\"\n              @click=\"addAvatarByUpload\"\n            >\n              {{ $t('Upload') }}\n            </CommonButton>\n\n            <CommonButton\n              class=\"m-1\"\n              size=\"medium\"\n              prefix-icon=\"camera\"\n              @click=\"addAvatarByCamera\"\n            >\n              {{ $t('Camera') }}\n            </CommonButton>\n          </div>\n        </div>\n      </div>\n    </CommonLoader>\n  </LayoutContent>\n</template>\n"],"file":"assets/PersonalSettingAvatar-nNuPqfa2.js"}