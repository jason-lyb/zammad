{"version":3,"file":"PersonalSettingPassword-Cnu1MWkW.js","sources":["../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentChangePassword.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingPassword.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentChangePasswordDocument = gql`\n    mutation userCurrentChangePassword($currentPassword: String!, $newPassword: String!) {\n  userCurrentChangePassword(\n    currentPassword: $currentPassword\n    newPassword: $newPassword\n  ) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentChangePasswordMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentChangePasswordMutation, Types.UserCurrentChangePasswordMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentChangePasswordMutation, Types.UserCurrentChangePasswordMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentChangePasswordMutation, Types.UserCurrentChangePasswordMutationVariables>(UserCurrentChangePasswordDocument, options);\n}\nexport type UserCurrentChangePasswordMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentChangePasswordMutation, Types.UserCurrentChangePasswordMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { ErrorRouteType, redirectErrorRoute } from '#shared/router/error.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { ErrorStatusCodes } from '#shared/types/error.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\n\nimport { useCheckChangePassword } from '../composables/permission/useCheckChangePassword.ts'\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\nimport { useUserCurrentChangePasswordMutation } from '../graphql/mutations/userCurrentChangePassword.api.ts'\n\nimport type { ChangePasswordFormData } from '../types/change-password.ts'\n\ndefineOptions({\n  beforeRouteEnter() {\n    const { canChangePassword } = useCheckChangePassword()\n\n    if (!canChangePassword.value)\n      return redirectErrorRoute({\n        type: ErrorRouteType.AuthenticatedError,\n        title: __('Forbidden'),\n        message: __('Password change has been disabled by the administrator.'),\n        statusCode: ErrorStatusCodes.Forbidden,\n      })\n\n    return true\n  },\n})\n\nconst { form, isDisabled } = useForm()\n\nconst schema = [\n  {\n    isLayout: true,\n    element: 'div',\n    attrs: {\n      class: 'grid grid-cols-2 gap-2.5',\n    },\n    children: [\n      {\n        name: 'current_password',\n        label: __('Current password'),\n        type: 'password',\n        outerClass: 'col-span-2',\n        props: {\n          maxLength: 1001,\n          autocomplete: 'current-password',\n        },\n        required: true,\n      },\n      {\n        name: 'new_password',\n        label: __('New password'),\n        type: 'password',\n        outerClass: 'col-span-1',\n        props: {\n          maxLength: 1001,\n          autocomplete: 'new-password',\n        },\n        required: true,\n      },\n      {\n        name: 'new_password_confirm',\n        label: __('Confirm new password'),\n        type: 'password',\n        validation: 'confirm',\n        outerClass: 'col-span-1',\n        props: {\n          maxLength: 1001,\n          autocomplete: 'new-password',\n        },\n        required: true,\n      },\n    ],\n  },\n]\n\nconst { breadcrumbItems } = useBreadcrumb(__('Password'))\n\nconst { notify } = useNotifications()\n\nconst changePasswordMutation = new MutationHandler(\n  useUserCurrentChangePasswordMutation(),\n  {\n    errorNotificationMessage: __('Password could not be changed.'),\n  },\n)\n\nconst submitForm = async (formData: FormSubmitData<ChangePasswordFormData>) => {\n  return changePasswordMutation\n    .send({\n      currentPassword: formData.current_password as string,\n      newPassword: formData.new_password as string,\n    })\n    .then((data) => {\n      if (data?.userCurrentChangePassword?.success) {\n        notify({\n          id: 'password-changed',\n          type: NotificationTypes.Success,\n          message: __('Password changed successfully.'),\n        })\n      }\n    })\n}\n</script>\n\n<template>\n  <LayoutContent\n    :breadcrumb-items=\"breadcrumbItems\"\n    :help-text=\"\n      $t('Enter your current password, insert a new one and confirm it.')\n    \"\n    width=\"narrow\"\n  >\n    <div class=\"mb-4\">\n      <Form\n        ref=\"form\"\n        :schema=\"schema\"\n        clear-values-after-submit\n        @submit=\"submitForm($event as FormSubmitData<ChangePasswordFormData>)\"\n      >\n        <template #after-fields>\n          <div class=\"mt-5 flex items-center justify-end gap-2\">\n            <CommonButton\n              variant=\"submit\"\n              type=\"submit\"\n              size=\"medium\"\n              :disabled=\"isDisabled\"\n            >\n              {{ $t('Change Password') }}\n            </CommonButton>\n          </div>\n        </template>\n      </Form>\n    </div>\n  </LayoutContent>\n</template>\n"],"names":["UserCurrentChangePasswordDocument","gql","ErrorsFragmentDoc","useUserCurrentChangePasswordMutation","options","VueApolloComposable.useMutation","form","isDisabled","useForm","schema","breadcrumbItems","useBreadcrumb","notify","useNotifications","changePasswordMutation","MutationHandler","submitForm","formData","data","_a","NotificationTypes"],"mappings":"m4CAQO,MAAMA,EAAoCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAY3CC,CAAiB,GACP,SAAAC,EAAqCC,EAAmS,GAAI,CACnV,OAAAC,EAA2HL,EAAmCI,CAAO,CAC9K,oVCgBA,KAAM,CAAE,KAAAE,EAAM,WAAAC,CAAW,EAAIC,EAAQ,EAE/BC,EAAS,CACb,CACE,SAAU,GACV,QAAS,MACT,MAAO,CACL,MAAO,0BACT,EACA,SAAU,CACR,CACE,KAAM,mBACN,MAAO,GAAG,kBAAkB,EAC5B,KAAM,WACN,WAAY,aACZ,MAAO,CACL,UAAW,KACX,aAAc,kBAChB,EACA,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GAAG,cAAc,EACxB,KAAM,WACN,WAAY,aACZ,MAAO,CACL,UAAW,KACX,aAAc,cAChB,EACA,SAAU,EACZ,EACA,CACE,KAAM,uBACN,MAAO,GAAG,sBAAsB,EAChC,KAAM,WACN,WAAY,UACZ,WAAY,aACZ,MAAO,CACL,UAAW,KACX,aAAc,cAChB,EACA,SAAU,EACZ,CACF,CACF,CAAA,EAGI,CAAE,gBAAAC,CAAgB,EAAIC,EAAc,GAAG,UAAU,CAAC,EAElD,CAAE,OAAAC,GAAWC,IAEbC,EAAyB,IAAIC,EACjCZ,EAAqC,EACrC,CACE,yBAA0B,GAAG,gCAAgC,CAC/D,CAAA,EAGIa,EAAa,MAAOC,GACjBH,EACJ,KAAK,CACJ,gBAAiBG,EAAS,iBAC1B,YAAaA,EAAS,YAAA,CACvB,EACA,KAAMC,GAAS,QACVC,EAAAD,GAAA,YAAAA,EAAM,4BAAN,MAAAC,EAAiC,SAC5BP,EAAA,CACL,GAAI,mBACJ,KAAMQ,EAAkB,QACxB,QAAS,GAAG,gCAAgC,CAAA,CAC7C,CACH,CACD"}