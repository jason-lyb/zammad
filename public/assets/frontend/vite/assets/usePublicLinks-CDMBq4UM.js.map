{"version":3,"file":"usePublicLinks-CDMBq4UM.js","sources":["../../../../../app/frontend/shared/graphql/fragments/publicLinkAttributes.api.ts","../../../../../app/frontend/shared/entities/public-links/graphql/queries/links.api.ts","../../../../../app/frontend/shared/entities/public-links/graphql/subscriptions/currentLinks.api.ts","../../../../../app/frontend/shared/composables/usePublicLinks.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const PublicLinkAttributesFragmentDoc = gql`\n    fragment publicLinkAttributes on PublicLink {\n  id\n  link\n  title\n  description\n  newTab\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { PublicLinkAttributesFragmentDoc } from '../../../../graphql/fragments/publicLinkAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const PublicLinksDocument = gql`\n    query publicLinks($screen: EnumPublicLinksScreen!) {\n  publicLinks(screen: $screen) {\n    ...publicLinkAttributes\n  }\n}\n    ${PublicLinkAttributesFragmentDoc}`;\nexport function usePublicLinksQuery(variables: Types.PublicLinksQueryVariables | VueCompositionApi.Ref<Types.PublicLinksQueryVariables> | ReactiveFunction<Types.PublicLinksQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.PublicLinksQuery, Types.PublicLinksQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>(PublicLinksDocument, variables, options);\n}\nexport function usePublicLinksLazyQuery(variables?: Types.PublicLinksQueryVariables | VueCompositionApi.Ref<Types.PublicLinksQueryVariables> | ReactiveFunction<Types.PublicLinksQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.PublicLinksQuery, Types.PublicLinksQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>(PublicLinksDocument, variables, options);\n}\nexport type PublicLinksQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.PublicLinksQuery, Types.PublicLinksQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { PublicLinkAttributesFragmentDoc } from '../../../../graphql/fragments/publicLinkAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const PublicLinkUpdatesDocument = gql`\n    subscription publicLinkUpdates($screen: EnumPublicLinksScreen!) {\n  publicLinkUpdates(screen: $screen) {\n    publicLinks {\n      ...publicLinkAttributes\n    }\n  }\n}\n    ${PublicLinkAttributesFragmentDoc}`;\nexport function usePublicLinkUpdatesSubscription(variables: Types.PublicLinkUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.PublicLinkUpdatesSubscriptionVariables> | ReactiveFunction<Types.PublicLinkUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.PublicLinkUpdatesSubscription, Types.PublicLinkUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.PublicLinkUpdatesSubscription, Types.PublicLinkUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.PublicLinkUpdatesSubscription, Types.PublicLinkUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.PublicLinkUpdatesSubscription, Types.PublicLinkUpdatesSubscriptionVariables>(PublicLinkUpdatesDocument, variables, options);\n}\nexport type PublicLinkUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.PublicLinkUpdatesSubscription, Types.PublicLinkUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed } from 'vue'\n\nimport { usePublicLinksQuery } from '#shared/entities/public-links/graphql/queries/links.api.ts'\nimport { PublicLinkUpdatesDocument } from '#shared/entities/public-links/graphql/subscriptions/currentLinks.api.ts'\nimport {\n  EnumPublicLinksScreen,\n  type PublicLinkUpdatesSubscriptionVariables,\n  type PublicLinkUpdatesSubscription,\n  type PublicLinksQuery,\n} from '#shared/graphql/types.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\n\nexport const usePublicLinks = (screen: EnumPublicLinksScreen) => {\n  const publicLinksQuery = new QueryHandler(usePublicLinksQuery({ screen }))\n\n  publicLinksQuery.subscribeToMore<\n    PublicLinkUpdatesSubscriptionVariables,\n    PublicLinkUpdatesSubscription\n  >({\n    document: PublicLinkUpdatesDocument,\n    variables: {\n      screen,\n    },\n    updateQuery(_, { subscriptionData }) {\n      const publicLinks = subscriptionData.data.publicLinkUpdates?.publicLinks\n      // if we return empty array here, the actual query will be aborted, because we have fetchPolicy \"cache-and-network\"\n      // if we return existing value, it will throw an error, because \"publicLinks\" doesn't exist yet on the query result\n      if (!publicLinks) {\n        return null as unknown as PublicLinksQuery\n      }\n      return {\n        publicLinks,\n      }\n    },\n  })\n\n  const links = computed(() => {\n    const publicLinks = publicLinksQuery.result()\n\n    return publicLinks.value?.publicLinks || []\n  })\n\n  return { links }\n}\n"],"names":["PublicLinkAttributesFragmentDoc","gql","PublicLinksDocument","usePublicLinksQuery","variables","options","VueApolloComposable.useQuery","PublicLinkUpdatesDocument","usePublicLinks","screen","publicLinksQuery","QueryHandler","_","subscriptionData","publicLinks","_a","computed"],"mappings":"+HAGO,MAAMA,EAAkCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MCKlCC,EAAsBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM7BD,CAA+B,GAC9B,SAASG,EAAoBC,EAAyJC,EAA+U,GAAI,CAC9gB,OAAOC,EAAsFJ,EAAqBE,EAAWC,CAAO,CACtI,CCTO,MAAME,EAA4BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQnCD,CAA+B,GCFxBQ,EAAkBC,GAAkC,CAC/D,MAAMC,EAAmB,IAAIC,EAAaR,EAAoB,CAAE,OAAAM,CAAQ,CAAA,CAAC,EAEzE,OAAAC,EAAiB,gBAGf,CACA,SAAUH,EACV,UAAW,CACT,OAAAE,CACF,EACA,YAAYG,EAAG,CAAE,iBAAAC,GAAoB,OAC7B,MAAAC,GAAcC,EAAAF,EAAiB,KAAK,oBAAtB,YAAAE,EAAyC,YAG7D,OAAKD,EAGE,CACL,YAAAA,CAAA,EAHO,IAKX,CAAA,CACD,EAQM,CAAE,MANKE,EAAS,IAAM,OAGpB,QAAAD,EAFaL,EAAiB,SAElB,QAAZ,YAAAK,EAAmB,cAAe,EAAC,CAC3C,CAEc,CACjB"}