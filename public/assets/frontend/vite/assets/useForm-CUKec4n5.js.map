{"version":3,"file":"useForm-CUKec4n5.js","sources":["../../../../../app/frontend/shared/components/Form/useForm.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, shallowRef } from 'vue'\n\nimport type { MutationSendError } from '#shared/types/error.ts'\nimport type { FormUpdaterOptions } from '#shared/types/form.ts'\n\nimport { setErrors } from './utils.ts'\n\nimport type {\n  FormRef,\n  FormResetOptions,\n  FormFieldValue,\n  FormValues,\n  FormSchemaField,\n  FormResetData,\n} from './types.ts'\nimport type { FormKitNode } from '@formkit/core'\nimport type { ShallowRef, Ref } from 'vue'\n\nexport const useForm = <T = FormValues>(formRef?: Ref<FormRef | undefined>) => {\n  const form: ShallowRef<FormRef | undefined> = formRef || shallowRef()\n\n  const node = computed(() => form.value?.formNode)\n\n  const context = computed(() => node.value?.context)\n\n  const nodeValues = computed<FormValues>(() => context.value?.value)\n\n  const state = computed(() => context.value?.state)\n\n  const isValid = computed(() => !!state.value?.valid)\n\n  const isSettled = computed(() => !!state.value?.settled)\n\n  const isInitialSettled = computed(() => !!form.value?.formInitialSettled)\n\n  const isDirty = computed(() => !!state.value?.dirty)\n\n  const isComplete = computed(() => !!state.value?.complete)\n\n  const isSubmitted = computed(() => !!state.value?.submitted)\n\n  const isDisabled = computed(() => {\n    return !!context.value?.disabled\n  })\n\n  const isFormUpdaterRunning = computed(() => {\n    return !!state.value?.formUpdaterProcessing\n  })\n\n  const formNodeId = computed(() => {\n    return context.value?.id\n  })\n\n  /**\n   * User can submit form, if it is:\n   * - not disabled\n   * - has dirty values\n   * After submit, the values should be reset to new values, so \"dirty\" state can update.\n   * It is done automaticaly, if async `@submit` event is used. Otherwise, `formReset` should be used.\n   */\n  const canSubmit = computed(() => {\n    if (isDisabled.value) return false\n    return isDirty.value\n  })\n\n  const formReset = (data?: FormResetData, options?: FormResetOptions) => {\n    form.value?.resetForm(data, options)\n  }\n\n  const formGroupReset = (\n    groupNode: FormKitNode,\n    data: FormResetData,\n    options?: FormResetOptions,\n  ) => {\n    form.value?.resetForm(data, { groupNode, ...options })\n  }\n\n  const formSubmit = () => {\n    node.value?.submit()\n  }\n\n  const waitForFormSettled = () => {\n    return new Promise<FormKitNode>((resolve) => {\n      const interval = setInterval(() => {\n        if (!node.value) return\n\n        const formNode = node.value\n        clearInterval(interval)\n        formNode.settled.then(() => resolve(formNode))\n      })\n    })\n  }\n\n  const onChangedField = (\n    name: string,\n    callback: (\n      newValue: FormFieldValue,\n      oldValue: FormFieldValue,\n      node: FormKitNode,\n    ) => void,\n  ) => {\n    const registerChangeEvent = (node: FormKitNode) => {\n      node.on(`changed:${name}`, ({ payload }) => {\n        callback(payload.newValue, payload.oldValue, payload.fieldNode)\n      })\n    }\n\n    if (node.value) {\n      registerChangeEvent(node.value)\n    } else {\n      waitForFormSettled().then((node) => {\n        registerChangeEvent(node)\n      })\n    }\n  }\n\n  const updateFieldValues = (fieldValues: Record<string, FormFieldValue>) => {\n    const changedFieldValues: Record<\n      string,\n      Pick<FormSchemaField, 'value'>\n    > = {}\n\n    Object.keys(fieldValues).forEach((fieldName) => {\n      changedFieldValues[fieldName] = {\n        value: fieldValues[fieldName],\n      }\n    })\n\n    form.value?.updateChangedFields(changedFieldValues)\n  }\n\n  const values = computed<T>(() => {\n    return (form.value?.values || {}) as T\n  })\n\n  const flags = computed(() => form.value?.flags || {})\n\n  const formSetErrors = (errors: MutationSendError) => {\n    if (!node.value) return\n\n    setErrors(node.value, errors)\n  }\n\n  const triggerFormUpdater = (options?: FormUpdaterOptions) => {\n    form.value?.triggerFormUpdater(options)\n  }\n\n  return {\n    form,\n    node,\n    context,\n    nodeValues,\n    values,\n    flags,\n    state,\n    isValid,\n    isDirty,\n    isSettled,\n    isInitialSettled,\n    isComplete,\n    isSubmitted,\n    isDisabled,\n    isFormUpdaterRunning,\n    formNodeId,\n    canSubmit,\n    formSetErrors,\n    formReset,\n    formGroupReset,\n    formSubmit,\n    waitForFormSettled,\n    updateFieldValues,\n    onChangedField,\n    triggerFormUpdater,\n  }\n}\n"],"names":["useForm","formRef","form","shallowRef","node","computed","_a","context","nodeValues","state","isValid","isSettled","isInitialSettled","isDirty","isComplete","isSubmitted","isDisabled","isFormUpdaterRunning","formNodeId","canSubmit","formReset","data","options","formGroupReset","groupNode","formSubmit","waitForFormSettled","resolve","interval","formNode","onChangedField","name","callback","registerChangeEvent","payload","updateFieldValues","fieldValues","changedFieldValues","fieldName","values","flags","errors","setErrors"],"mappings":"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"}