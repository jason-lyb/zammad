{"version":3,"file":"GuidedSetupManualChannelEmailPreConfigured-rTfMt57c.js","sources":["../../../../../app/frontend/apps/desktop/entities/email-addresses/graphql/queries/emailAddresses.api.ts","../../../../../app/frontend/apps/desktop/pages/guided-setup/views/GuidedSetupManual/GuidedSetupManualChannelEmailPreConfigured.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const EmailAddressesDocument = gql`\n    query emailAddresses($onlyActive: Boolean = false) {\n  emailAddresses(onlyActive: $onlyActive) {\n    name\n    email\n    active\n  }\n}\n    `;\nexport function useEmailAddressesQuery(variables: Types.EmailAddressesQueryVariables | VueCompositionApi.Ref<Types.EmailAddressesQueryVariables> | ReactiveFunction<Types.EmailAddressesQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>(EmailAddressesDocument, variables, options);\n}\nexport function useEmailAddressesLazyQuery(variables: Types.EmailAddressesQueryVariables | VueCompositionApi.Ref<Types.EmailAddressesQueryVariables> | ReactiveFunction<Types.EmailAddressesQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>(EmailAddressesDocument, variables, options);\n}\nexport type EmailAddressesQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.EmailAddressesQuery, Types.EmailAddressesQueryVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport { useEmailAddressesQuery } from '#desktop/entities/email-addresses/graphql/queries/emailAddresses.api.ts'\n\nimport GuidedSetupActionFooter from '../../components/GuidedSetupActionFooter.vue'\nimport { useSystemSetup } from '../../composables/useSystemSetup.ts'\n\ndefineOptions({\n  beforeRouteEnter() {\n    const application = useApplicationStore()\n\n    if (!application.config.system_online_service) {\n      return '/guided-setup/manual/channels/email'\n    }\n\n    return true\n  },\n})\n\nconst router = useRouter()\n\nconst { setTitle } = useSystemSetup()\n\nsetTitle(__('Connect Channels'))\n\nconst emailAddressesQuery = new QueryHandler(\n  useEmailAddressesQuery({\n    onlyActive: true,\n  }),\n)\nconst emailAddressesResult = emailAddressesQuery.result()\n\nconst emailAddresses = computed(() => {\n  return (\n    emailAddressesResult.value?.emailAddresses.map((emailAddress) => {\n      return {\n        name: emailAddress.name,\n        email: emailAddress.email,\n      }\n    }) || []\n  )\n})\n\nconst finish = () => {\n  router.push('/guided-setup/manual/finish')\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2.5\">\n    <CommonLabel>\n      {{ $t('Your Zammad has the following email address:') }}\n    </CommonLabel>\n\n    <ul\n      class=\"list-disc gap-1 text-sm text-gray-100 ltr:ml-5 rtl:mr-5 dark:text-neutral-400\"\n    >\n      <li v-for=\"address in emailAddresses\" :key=\"address.email\">\n        {{ address.name }} &lt;{{ address.email }}&gt;\n      </li>\n    </ul>\n\n    <CommonLabel>\n      {{\n        $t(\n          'If you want to use additional email addresses, you can configure them later.',\n        )\n      }}\n    </CommonLabel>\n    <GuidedSetupActionFooter\n      go-back-route=\"/guided-setup/manual/system-information\"\n      :submit-button-text=\"__('Finish')\"\n      submit-button-type=\"button\"\n      @submit=\"finish\"\n    />\n  </div>\n</template>\n"],"names":["EmailAddressesDocument","gql","useEmailAddressesQuery","variables","options","VueApolloComposable.useQuery","router","useRouter","setTitle","useSystemSetup","emailAddressesResult","QueryHandler","emailAddresses","computed","_a","emailAddress","finish"],"mappings":"qsCAOO,MAAMA,EAAyBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS/B,SAASC,EAAuBC,EAAmK,GAAIC,EAAiW,CAAA,EAAI,CACjjB,OAAOC,EAA4FL,EAAwBG,EAAWC,CAAO,CAC/I,2SCQA,MAAME,EAASC,IAET,CAAE,SAAAC,GAAaC,IAEZD,EAAA,GAAG,kBAAkB,CAAC,EAOzB,MAAAE,EALsB,IAAIC,EAC9BT,EAAuB,CACrB,WAAY,EAAA,CACb,CAAA,EAE8C,SAE3CU,EAAiBC,EAAS,IAAM,OACpC,QACEC,EAAAJ,EAAqB,QAArB,YAAAI,EAA4B,eAAe,IAAKC,IACvC,CACL,KAAMA,EAAa,KACnB,MAAOA,EAAa,KAAA,MAElB,CAAA,CAAC,CAEV,EAEKC,EAAS,IAAM,CACnBV,EAAO,KAAK,6BAA6B,CAAA"}