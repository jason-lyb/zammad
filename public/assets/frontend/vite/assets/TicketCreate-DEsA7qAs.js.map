{"version":3,"file":"TicketCreate-DEsA7qAs.js","sources":["../../../../../app/frontend/apps/desktop/components/CommonContentPanel/CommonContentPanel.vue","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/templates.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/subscriptions/templateUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/stores/ticketTemplate.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useApplyTemplate.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketCreate/ApplyTemplate.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketCreate/TicketCreateContent.vue"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\"></script>\n\n<template>\n  <div\n    class=\"flex flex-col gap-2.5 rounded-xl border border-neutral-100 bg-neutral-50 p-3 dark:border-gray-900 dark:bg-gray-500\"\n  >\n    <slot />\n  </div>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TemplatesDocument = gql`\n    query templates($onlyActive: Boolean = false) {\n  templates(onlyActive: $onlyActive) {\n    id\n    name\n  }\n}\n    `;\nexport function useTemplatesQuery(variables: Types.TemplatesQueryVariables | VueCompositionApi.Ref<Types.TemplatesQueryVariables> | ReactiveFunction<Types.TemplatesQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TemplatesQuery, Types.TemplatesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TemplatesQuery, Types.TemplatesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TemplatesQuery, Types.TemplatesQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TemplatesQuery, Types.TemplatesQueryVariables>(TemplatesDocument, variables, options);\n}\nexport function useTemplatesLazyQuery(variables: Types.TemplatesQueryVariables | VueCompositionApi.Ref<Types.TemplatesQueryVariables> | ReactiveFunction<Types.TemplatesQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TemplatesQuery, Types.TemplatesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TemplatesQuery, Types.TemplatesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TemplatesQuery, Types.TemplatesQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TemplatesQuery, Types.TemplatesQueryVariables>(TemplatesDocument, variables, options);\n}\nexport type TemplatesQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TemplatesQuery, Types.TemplatesQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TemplateUpdatesDocument = gql`\n    subscription templateUpdates($onlyActive: Boolean!) {\n  templateUpdates(onlyActive: $onlyActive) {\n    templates {\n      id\n      name\n    }\n  }\n}\n    `;\nexport function useTemplateUpdatesSubscription(variables: Types.TemplateUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.TemplateUpdatesSubscriptionVariables> | ReactiveFunction<Types.TemplateUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.TemplateUpdatesSubscription, Types.TemplateUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.TemplateUpdatesSubscription, Types.TemplateUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.TemplateUpdatesSubscription, Types.TemplateUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.TemplateUpdatesSubscription, Types.TemplateUpdatesSubscriptionVariables>(TemplateUpdatesDocument, variables, options);\n}\nexport type TemplateUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.TemplateUpdatesSubscription, Types.TemplateUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { without } from 'lodash-es'\nimport { defineStore } from 'pinia'\nimport { computed, nextTick, ref } from 'vue'\n\nimport type {\n  TemplatesQuery,\n  TemplateUpdatesSubscription,\n  TemplateUpdatesSubscriptionVariables,\n} from '#shared/graphql/types.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport { useTemplatesQuery } from '../graphql/queries/templates.api.ts'\nimport { TemplateUpdatesDocument } from '../graphql/subscriptions/templateUpdates.api.ts'\n\nexport const useTicketTemplateStore = defineStore('ticketTemplate', () => {\n  const usageKeys = ref<string[]>([])\n\n  const activate = (usageKey: string) => {\n    usageKeys.value.push(usageKey)\n  }\n\n  const session = useSessionStore()\n\n  const enabled = computed(\n    () => session.hasPermission('ticket.agent') && usageKeys.value.length > 0,\n  )\n\n  const templateListQuery = new QueryHandler(\n    useTemplatesQuery(\n      () => ({\n        onlyActive: true,\n      }),\n      () => ({ enabled }),\n    ),\n  )\n\n  templateListQuery.subscribeToMore<\n    TemplateUpdatesSubscriptionVariables,\n    TemplateUpdatesSubscription\n  >({\n    document: TemplateUpdatesDocument,\n    variables: {\n      onlyActive: true,\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data?.templateUpdates.templates) {\n        return null as unknown as TemplatesQuery\n      }\n\n      return {\n        templates: subscriptionData.data.templateUpdates.templates,\n      }\n    },\n  })\n\n  const result = templateListQuery.result()\n\n  const templateList = computed(() => result.value?.templates || [])\n\n  const deactivate = (usageKey: string) => {\n    if (!usageKeys.value.includes(usageKey)) return\n\n    nextTick(() => {\n      usageKeys.value = without(usageKeys.value, usageKey)\n    })\n  }\n\n  return {\n    usageKeys,\n    templateList,\n    activate,\n    deactivate,\n  }\n})\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { storeToRefs } from 'pinia'\nimport { onBeforeUnmount } from 'vue'\nimport { useRoute } from 'vue-router'\n\nimport { useTicketTemplateStore } from '../stores/ticketTemplate.ts'\n\nexport const useApplyTemplate = () => {\n  const templateStore = useTicketTemplateStore()\n\n  const { templateList } = storeToRefs(templateStore)\n\n  const { activate, deactivate } = templateStore\n\n  const route = useRoute()\n\n  // TODO: Drop this mechanism once Apollo implements an effective deduplication of subscriptions on the client level.\n  //   More information: https://github.com/apollographql/apollo-client/issues/10117\n  const usageKey = route.meta.taskbarTabEntityKey ?? 'apply-template'\n\n  activate(usageKey)\n\n  onBeforeUnmount(() => {\n    deactivate(usageKey)\n  })\n\n  return {\n    templateList,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport CommonDropdown from '#desktop/components/CommonDropdown/CommonDropdown.vue'\nimport type { DropdownItem } from '#desktop/components/CommonDropdown/types.ts'\n\nimport { useApplyTemplate } from '../../composables/useApplyTemplate.ts'\n\nconst emit = defineEmits<{\n  'select-template': [string]\n}>()\n\nconst { hasPermission } = useSessionStore()\n\nconst { templateList } = useApplyTemplate()\n\nconst templateAccess = computed(\n  () =>\n    templateList &&\n    templateList.value.length > 0 &&\n    hasPermission('ticket.agent'),\n)\n\nconst items = computed<DropdownItem[]>(() =>\n  templateList.value.map((template) => ({\n    key: template.id,\n    label: template.name,\n  })),\n)\n</script>\n\n<template>\n  <template v-if=\"templateAccess\">\n    <CommonDropdown\n      :items=\"items\"\n      :action-label=\"$t('Apply Template')\"\n      orientation=\"top\"\n      @handle-action=\"emit('select-template', $event.key)\"\n    />\n  </template>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { isEqual } from 'lodash-es'\nimport { computed, markRaw, reactive } from 'vue'\nimport { useRouter, useRoute } from 'vue-router'\n\nimport Form from '#shared/components/Form/Form.vue'\nimport type { FormSubmitData } from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useTicketSignature } from '#shared/composables/useTicketSignature.ts'\nimport { useTicketCreate } from '#shared/entities/ticket/composables/useTicketCreate.ts'\nimport { useTicketCreateArticleType } from '#shared/entities/ticket/composables/useTicketCreateArticleType.ts'\nimport { useTicketFormOrganizationHandler } from '#shared/entities/ticket/composables/useTicketFormOrganizationHandler.ts'\nimport type { TicketFormData } from '#shared/entities/ticket/types.ts'\nimport { defineFormSchema } from '#shared/form/defineFormSchema.ts'\nimport {\n  EnumFormUpdaterId,\n  EnumObjectManagerObjects,\n} from '#shared/graphql/types.ts'\nimport { useWalker } from '#shared/router/walker.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonContentPanel from '#desktop/components/CommonContentPanel/CommonContentPanel.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\nimport { usePage } from '#desktop/composables/usePage.ts'\nimport { useTicketCreateTitle } from '#desktop/entities/ticket/composables/useTicketCreateTitle.ts'\nimport { useTaskbarTab } from '#desktop/entities/user/current/composables/useTaskbarTab.ts'\nimport { useTaskbarTabStateUpdates } from '#desktop/entities/user/current/composables/useTaskbarTabStateUpdates.ts'\nimport type { TaskbarTabContext } from '#desktop/entities/user/current/types.ts'\n\nimport {\n  useProvideTicketSidebar,\n  useTicketSidebar,\n} from '../../composables/useTicketSidebar.ts'\nimport {\n  TicketSidebarScreenType,\n  type TicketSidebarContext,\n} from '../../types/sidebar.ts'\nimport TicketSidebar from '../TicketSidebar.vue'\n\nimport ApplyTemplate from './ApplyTemplate.vue'\nimport TicketDuplicateDetectionAlert from './TicketDuplicateDetectionAlert.vue'\n\ninterface Props {\n  tabId?: string\n}\n\ndefineProps<Props>()\n\nconst router = useRouter()\nconst walker = useWalker()\nconst route = useRoute()\n\nconst {\n  form,\n  isDisabled,\n  isDirty,\n  isInitialSettled,\n  formNodeId,\n  values,\n  triggerFormUpdater,\n} = useForm()\n\nconst currentTitle = computed(() => values.value.title as string)\nconst currentArticleType = computed(\n  () => values.value.articleSenderType as string,\n)\n\nconst { currentViewTitle } = useTicketCreateTitle(\n  currentTitle,\n  currentArticleType,\n)\n\nusePage({\n  metaTitle: currentViewTitle,\n})\n\nconst application = useApplicationStore()\n\nconst redirectAfterCreate = (internalId?: number) => {\n  if (internalId) {\n    router.replace(`/tickets/${internalId}`)\n    return\n  }\n\n  // Fallback redirect, in case the user has no access to the ticket they just created.\n  router.replace({ name: 'Dashboard' })\n}\n\nconst goBack = () => {\n  walker.back('/')\n}\n\nconst { ticketArticleSenderTypeField } = useTicketCreateArticleType()\n\nconst { createTicket, isTicketCustomer } = useTicketCreate(\n  form,\n  redirectAfterCreate,\n)\n\nconst defaultTitle = __('New Ticket')\n\nconst formSchema = defineFormSchema([\n  {\n    isLayout: true,\n    component: 'CommonContentPanel',\n    children: [\n      {\n        isLayout: true,\n        element: 'h1',\n        attrs: {\n          class:\n            'py-2.5 text-center text-xl font-medium leading-snug text-black dark:text-white',\n          ariaCurrent: 'page',\n        },\n        children: '$values.title || $t($defaultTitle)',\n      },\n      {\n        if: '$isTicketCustomer === false',\n        ...ticketArticleSenderTypeField,\n        outerClass: 'flex justify-center',\n      },\n      {\n        isLayout: true,\n        element: 'div',\n        attrs: {\n          class: 'grid grid-cols-1 gap-2.5',\n          role: 'tabpanel',\n          ariaLabelledby: '$getTabLabel($values.articleSenderType)',\n          id: '$getTabPanelId($values.articleSenderType)',\n        },\n        children: [\n          {\n            if: '$existingAdditionalCreateNotes() && $getAdditionalCreateNote($values.articleSenderType) !== undefined',\n            isLayout: true,\n            component: 'CommonAlert',\n            props: {\n              variant: 'warning',\n            },\n            children: '$t($getAdditionalCreateNote($values.articleSenderType))',\n          },\n          {\n            if: '$values.ticket_duplicate_detection.count > 0',\n            isLayout: true,\n            component: 'TicketDuplicateDetectionAlert',\n            props: {\n              tickets: '$values.ticket_duplicate_detection.items',\n            },\n            children: '',\n          },\n          {\n            screen: 'create_top',\n            object: EnumObjectManagerObjects.Ticket,\n          },\n          // Because of the current field screen settings in the backend\n          // seed we need to add this manually.\n          {\n            if: '$values.articleSenderType === \"email-out\"',\n            name: 'cc',\n            label: __('CC'),\n            type: 'recipient',\n            props: {\n              multiple: true,\n              clearable: true,\n            },\n          },\n          {\n            if: '$securityIntegration === true && $values.articleSenderType === \"email-out\"',\n            name: 'security',\n            label: __('Security'),\n            type: 'security',\n          },\n          {\n            name: 'body',\n            screen: 'create_top',\n            object: EnumObjectManagerObjects.TicketArticle,\n            required: true,\n            props: {\n              meta: {\n                mentionText: {\n                  customerNodeName: 'customer_id',\n                  groupNodeName: 'group_id',\n                },\n                mentionUser: {\n                  groupNodeName: 'group_id',\n                },\n                mentionKnowledgeBase: {\n                  attachmentsNodeName: 'attachments',\n                },\n              },\n            },\n          },\n          {\n            type: 'file',\n            name: 'attachments',\n            label: __('Attachment'),\n            labelSrOnly: true,\n            props: {\n              multiple: true,\n            },\n          },\n          {\n            name: 'ticket_duplicate_detection',\n            type: 'hidden',\n            value: {\n              count: 0,\n              items: [],\n            },\n          },\n          {\n            name: 'link_ticket_id',\n            type: 'hidden',\n          },\n          {\n            name: 'shared_draft_id',\n            type: 'hidden',\n          },\n          {\n            name: 'externalReferences',\n            type: 'hidden',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    isLayout: true,\n    component: 'CommonContentPanel',\n    children: [\n      {\n        isLayout: true,\n        element: 'div',\n        attrs: {\n          class: 'grid grid-cols-2-uneven gap-2.5',\n        },\n        children: [\n          {\n            screen: 'create_middle',\n            object: EnumObjectManagerObjects.Ticket,\n          },\n        ],\n      },\n      {\n        screen: 'create_bottom',\n        object: EnumObjectManagerObjects.Ticket,\n      },\n    ],\n  },\n])\n\nconst securityIntegration = computed<boolean>(\n  () =>\n    (application.config.smime_integration ||\n      application.config.pgp_integration) ??\n    false,\n)\n\nconst additionalCreateNotes = computed(\n  () =>\n    (application.config.ui_ticket_create_notes as Record<string, string>) || {},\n)\n\nconst schemaData = reactive({\n  defaultTitle,\n  isTicketCustomer,\n  securityIntegration,\n  getTabLabel: (value: string) => `tab-label-${value}`,\n  getTabPanelId: (value: string) => `tab-panel-${value}`,\n  existingAdditionalCreateNotes: () => {\n    return Object.keys(additionalCreateNotes).length > 0\n  },\n  getAdditionalCreateNote: (value: string) => {\n    return additionalCreateNotes.value[value]\n  },\n})\n\nconst changedFields = reactive({\n  // Workaround until the object attribute for body is required so core worklow is returning it correctly.\n  body: {\n    required: true,\n  },\n})\n\nconst { signatureHandling } = useTicketSignature()\n\nconst tabContext = computed<TaskbarTabContext>((currentContext) => {\n  if (!isInitialSettled.value) return {}\n\n  const newContext = {\n    formValues: values.value,\n    formIsDirty: isDirty.value,\n  }\n\n  if (currentContext && isEqual(newContext, currentContext))\n    return currentContext\n\n  return newContext\n})\n\nconst {\n  currentTaskbarTab,\n  currentTaskbarTabId,\n  currentTaskbarTabFormId,\n  currentTaskbarTabDelete,\n} = useTaskbarTab(tabContext)\n\nconst { setSkipNextStateUpdate } = useTaskbarTabStateUpdates(\n  currentTaskbarTabId,\n  form,\n  triggerFormUpdater,\n)\n\nconst sidebarContext = computed<TicketSidebarContext>(() => ({\n  screenType: TicketSidebarScreenType.TicketCreate,\n  form: form.value,\n  formValues: values.value,\n  currentTaskbarTabId,\n}))\n\nuseProvideTicketSidebar(sidebarContext)\n\nconst { hasSidebar } = useTicketSidebar()\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst discardChanges = async () => {\n  const confirm = await waitForVariantConfirmation('unsaved')\n  if (!confirm) return\n\n  goBack()\n  currentTaskbarTabDelete()\n}\n\nconst applyTemplate = (templateId: string) => {\n  // Skip subscription for the current tab, to avoid not needed form updater requests.\n  setSkipNextStateUpdate(true)\n\n  triggerFormUpdater({\n    includeDirtyFields: true,\n    additionalParams: {\n      templateId,\n    },\n  })\n}\n\nconst formAdditionalRouteQueryParams = computed(() => ({\n  taskbarId: currentTaskbarTab.value?.taskbarTabId,\n  ...(route.query || {}),\n}))\n\nconst submitCreateTicket = async (event: FormSubmitData<TicketFormData>) => {\n  return createTicket(event).then((result) => {\n    if (!result || result === null || result === undefined) return\n    if (typeof result === 'function') result()\n\n    currentTaskbarTabDelete()\n  })\n}\n</script>\n\n<template>\n  <LayoutContent\n    name=\"ticket-create\"\n    background-variant=\"primary\"\n    content-alignment=\"center\"\n    :show-sidebar=\"hasSidebar\"\n  >\n    <div class=\"w-full max-w-screen-xl px-28 py-3.5\">\n      <Form\n        id=\"ticket-create\"\n        ref=\"form\"\n        :key=\"tabId\"\n        :form-id=\"currentTaskbarTabFormId\"\n        :schema=\"formSchema\"\n        :schema-component-library=\"{\n          CommonContentPanel: markRaw(CommonContentPanel),\n          TicketDuplicateDetectionAlert: markRaw(TicketDuplicateDetectionAlert),\n        }\"\n        :schema-data=\"schemaData\"\n        :form-updater-id=\"EnumFormUpdaterId.FormUpdaterUpdaterTicketCreate\"\n        :handlers=\"[\n          useTicketFormOrganizationHandler(),\n          signatureHandling('body'),\n        ]\"\n        :change-fields=\"changedFields\"\n        :form-updater-additional-params=\"formAdditionalRouteQueryParams\"\n        use-object-attributes\n        form-class=\"flex flex-col gap-3\"\n        @submit=\"submitCreateTicket($event as FormSubmitData<TicketFormData>)\"\n        @changed=\"setSkipNextStateUpdate(true)\"\n      />\n    </div>\n    <template #sideBar=\"{ isCollapsed, toggleCollapse }\">\n      <TicketSidebar\n        :context=\"sidebarContext\"\n        :is-collapsed=\"isCollapsed\"\n        :toggle-collapse=\"toggleCollapse\"\n      />\n    </template>\n    <template #bottomBar>\n      <template v-if=\"isInitialSettled\">\n        <CommonButton\n          v-if=\"isDirty\"\n          size=\"large\"\n          variant=\"danger\"\n          :disabled=\"isDisabled\"\n          @click=\"discardChanges\"\n          >{{ __('Discard Changes') }}</CommonButton\n        >\n        <CommonButton v-else size=\"large\" variant=\"secondary\" @click=\"goBack\">{{\n          __('Cancel & Go Back')\n        }}</CommonButton>\n      </template>\n\n      <ApplyTemplate @select-template=\"applyTemplate\" />\n\n      <CommonButton\n        size=\"large\"\n        variant=\"submit\"\n        type=\"submit\"\n        :form=\"formNodeId\"\n        :disabled=\"isDisabled\"\n        >{{ __('Create') }}</CommonButton\n      >\n    </template>\n  </LayoutContent>\n</template>\n"],"names":["_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","_hoisted_1","TemplatesDocument","gql","useTemplatesQuery","variables","options","VueApolloComposable.useQuery","TemplateUpdatesDocument","useTicketTemplateStore","defineStore","usageKeys","ref","activate","usageKey","session","useSessionStore","enabled","computed","templateListQuery","QueryHandler","prev","subscriptionData","_a","result","templateList","nextTick","without","useApplyTemplate","templateStore","storeToRefs","deactivate","useRoute","onBeforeUnmount","emit","__emit","hasPermission","templateAccess","items","template","router","useRouter","walker","useWalker","route","form","isDisabled","isDirty","isInitialSettled","formNodeId","values","triggerFormUpdater","useForm","currentTitle","currentArticleType","currentViewTitle","useTicketCreateTitle","usePage","application","useApplicationStore","redirectAfterCreate","internalId","goBack","ticketArticleSenderTypeField","useTicketCreateArticleType","createTicket","isTicketCustomer","useTicketCreate","defaultTitle","formSchema","defineFormSchema","EnumObjectManagerObjects","securityIntegration","additionalCreateNotes","schemaData","reactive","value","changedFields","signatureHandling","useTicketSignature","tabContext","currentContext","newContext","isEqual","currentTaskbarTab","currentTaskbarTabId","currentTaskbarTabFormId","currentTaskbarTabDelete","useTaskbarTab","setSkipNextStateUpdate","useTaskbarTabStateUpdates","sidebarContext","TicketSidebarScreenType","useProvideTicketSidebar","hasSidebar","useTicketSidebar","waitForVariantConfirmation","useConfirmation","discardChanges","applyTemplate","templateId","formAdditionalRouteQueryParams","submitCreateTicket","event"],"mappings":"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"}