{"version":3,"file":"PersonalSettingDevices-B0YI9VAK.js","sources":["../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentDeviceDelete.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/fragments/userDeviceAttributes.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/queries/userCurrentDeviceList.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/subscriptions/userCurrentDevicesUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingDevices.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentDeviceDeleteDocument = gql`\n    mutation userCurrentDeviceDelete($deviceId: ID!) {\n  userCurrentDeviceDelete(deviceId: $deviceId) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentDeviceDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentDeviceDeleteMutation, Types.UserCurrentDeviceDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentDeviceDeleteMutation, Types.UserCurrentDeviceDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentDeviceDeleteMutation, Types.UserCurrentDeviceDeleteMutationVariables>(UserCurrentDeviceDeleteDocument, options);\n}\nexport type UserCurrentDeviceDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentDeviceDeleteMutation, Types.UserCurrentDeviceDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const UserDeviceAttributesFragmentDoc = gql`\n    fragment userDeviceAttributes on UserDevice {\n  id\n  userId\n  name\n  os\n  browser\n  location\n  deviceDetails\n  locationDetails\n  fingerprint\n  userAgent\n  ip\n  createdAt\n  updatedAt\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserDeviceAttributesFragmentDoc } from '../fragments/userDeviceAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentDeviceListDocument = gql`\n    query userCurrentDeviceList {\n  userCurrentDeviceList {\n    ...userDeviceAttributes\n  }\n}\n    ${UserDeviceAttributesFragmentDoc}`;\nexport function useUserCurrentDeviceListQuery(options: VueApolloComposable.UseQueryOptions<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>(UserCurrentDeviceListDocument, {}, options);\n}\nexport function useUserCurrentDeviceListLazyQuery(options: VueApolloComposable.UseQueryOptions<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>(UserCurrentDeviceListDocument, {}, options);\n}\nexport type UserCurrentDeviceListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.UserCurrentDeviceListQuery, Types.UserCurrentDeviceListQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserDeviceAttributesFragmentDoc } from '../fragments/userDeviceAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentDevicesUpdatesDocument = gql`\n    subscription userCurrentDevicesUpdates {\n  userCurrentDevicesUpdates {\n    devices {\n      ...userDeviceAttributes\n    }\n  }\n}\n    ${UserDeviceAttributesFragmentDoc}`;\nexport function useUserCurrentDevicesUpdatesSubscription(options: VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentDevicesUpdatesSubscription, Types.UserCurrentDevicesUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentDevicesUpdatesSubscription, Types.UserCurrentDevicesUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentDevicesUpdatesSubscription, Types.UserCurrentDevicesUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserCurrentDevicesUpdatesSubscription, Types.UserCurrentDevicesUpdatesSubscriptionVariables>(UserCurrentDevicesUpdatesDocument, {}, options);\n}\nexport type UserCurrentDevicesUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserCurrentDevicesUpdatesSubscription, Types.UserCurrentDevicesUpdatesSubscriptionVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport useFingerprint from '#shared/composables/useFingerprint.ts'\nimport type {\n  UserCurrentDevicesUpdatesSubscription,\n  UserCurrentDevicesUpdatesSubscriptionVariables,\n  UserCurrentDeviceListQuery,\n  UserDevice,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n/index.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\n\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonSimpleTable from '#desktop/components/CommonTable/CommonSimpleTable.vue'\nimport type {\n  TableSimpleHeader,\n  TableItem,\n} from '#desktop/components/CommonTable/types.ts'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\n\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\nimport { useUserCurrentDeviceDeleteMutation } from '../graphql/mutations/userCurrentDeviceDelete.api.ts'\nimport { useUserCurrentDeviceListQuery } from '../graphql/queries/userCurrentDeviceList.api.ts'\nimport { UserCurrentDevicesUpdatesDocument } from '../graphql/subscriptions/userCurrentDevicesUpdates.api.ts'\n\nconst { breadcrumbItems } = useBreadcrumb(__('Devices'))\n\nconst { notify } = useNotifications()\n\nconst { fingerprint } = useFingerprint()\n\nconst deviceListQuery = new QueryHandler(useUserCurrentDeviceListQuery())\nconst deviceListQueryResult = deviceListQuery.result()\nconst deviceListQueryLoading = deviceListQuery.loading()\n\ndeviceListQuery.subscribeToMore<\n  UserCurrentDevicesUpdatesSubscriptionVariables,\n  UserCurrentDevicesUpdatesSubscription\n>({\n  document: UserCurrentDevicesUpdatesDocument,\n  updateQuery: (prev, { subscriptionData }) => {\n    if (!subscriptionData.data?.userCurrentDevicesUpdates.devices) {\n      return null as unknown as UserCurrentDeviceListQuery\n    }\n\n    return {\n      userCurrentDeviceList:\n        subscriptionData.data.userCurrentDevicesUpdates.devices,\n    }\n  },\n})\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst deleteDevice = (device: UserDevice) => {\n  const deviceDeleteMutation = new MutationHandler(\n    useUserCurrentDeviceDeleteMutation(() => ({\n      variables: {\n        deviceId: device.id,\n      },\n      update(cache) {\n        cache.evict({ id: cache.identify(device) })\n        cache.gc()\n      },\n    })),\n    {\n      errorNotificationMessage: __('The device could not be deleted.'),\n    },\n  )\n\n  deviceDeleteMutation.send().then(() => {\n    notify({\n      id: 'device-revoked',\n      type: NotificationTypes.Success,\n      message: __('Device has been revoked.'),\n    })\n  })\n}\n\nconst confirmDeleteDevice = async (device: UserDevice) => {\n  const confirmed = await waitForVariantConfirmation('delete')\n\n  if (confirmed) deleteDevice(device)\n}\n\nconst tableHeaders: TableSimpleHeader[] = [\n  {\n    key: 'name',\n    label: __('Name'),\n    truncate: true,\n  },\n  {\n    key: 'location',\n    label: __('Location'),\n    truncate: true,\n  },\n  {\n    key: 'updatedAt',\n    label: __('Most recent activity'),\n    type: 'timestamp',\n  },\n]\n\nconst tableActions: MenuItem[] = [\n  {\n    key: 'delete',\n    label: __('Delete this device'),\n    icon: 'trash3',\n    variant: 'danger',\n    show: (data) => !data?.current,\n    onClick: (data) => {\n      confirmDeleteDevice(data as UserDevice)\n    },\n  },\n]\n\nconst currentDevices = computed<TableItem[]>(() => {\n  return (deviceListQueryResult.value?.userCurrentDeviceList || []).map(\n    (device) => {\n      return {\n        ...device,\n        current: device.fingerprint && device.fingerprint === fingerprint.value,\n      }\n    },\n  )\n})\n\nconst helpText = computed(() =>\n  i18n.t(\n    'All computers and browsers from which you logged in to Zammad appear here.',\n  ),\n)\n</script>\n\n<template>\n  <LayoutContent\n    :breadcrumb-items=\"breadcrumbItems\"\n    :help-text=\"helpText\"\n    width=\"narrow\"\n    provide-default\n  >\n    <CommonLoader :loading=\"deviceListQueryLoading\">\n      <div class=\"mb-4\">\n        <CommonSimpleTable\n          :caption=\"$t('Used devices')\"\n          :headers=\"tableHeaders\"\n          :items=\"currentDevices\"\n          :actions=\"tableActions\"\n          class=\"min-w-150\"\n          :aria-label=\"helpText\"\n        >\n          <template #item-suffix-name=\"{ item }\">\n            <CommonBadge\n              v-if=\"item.current\"\n              variant=\"info\"\n              class=\"ltr:ml-2 rtl:mr-2\"\n              >{{ $t('This device') }}\n            </CommonBadge>\n          </template>\n        </CommonSimpleTable>\n      </div>\n    </CommonLoader>\n  </LayoutContent>\n</template>\n"],"names":["UserCurrentDeviceDeleteDocument","gql","ErrorsFragmentDoc","useUserCurrentDeviceDeleteMutation","options","VueApolloComposable.useMutation","UserDeviceAttributesFragmentDoc","UserCurrentDeviceListDocument","useUserCurrentDeviceListQuery","VueApolloComposable.useQuery","UserCurrentDevicesUpdatesDocument","breadcrumbItems","useBreadcrumb","notify","useNotifications","fingerprint","useFingerprint","deviceListQuery","QueryHandler","deviceListQueryResult","deviceListQueryLoading","prev","subscriptionData","_a","waitForVariantConfirmation","useConfirmation","deleteDevice","device","MutationHandler","cache","NotificationTypes","confirmDeleteDevice","tableHeaders","tableActions","data","currentDevices","computed","helpText","i18n"],"mappings":"m4CAQO,MAAMA,EAAkCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASzCC,CAAiB,GACP,SAAAC,EAAmCC,EAA2R,GAAI,CACzU,OAAAC,EAAuHL,EAAiCI,CAAO,CACxK,CCjBO,MAAME,EAAkCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MCKlCM,EAAgCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMvCK,CAA+B,GACrB,SAAAE,EAA8BJ,EAA2Y,GAAI,CAC3b,OAAOK,EAA0GF,EAA+B,GAAIH,CAAO,CAC7J,CCTO,MAAMM,EAAoCT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ3CK,CAA+B,mECiBrC,KAAM,CAAE,gBAAAK,CAAgB,EAAIC,EAAc,GAAG,SAAS,CAAC,EAEjD,CAAE,OAAAC,GAAWC,IAEb,CAAE,YAAAC,GAAgBC,IAElBC,EAAkB,IAAIC,EAAaV,EAA+B,CAAA,EAClEW,EAAwBF,EAAgB,SACxCG,EAAyBH,EAAgB,UAE/CA,EAAgB,gBAGd,CACA,SAAUP,EACV,YAAa,CAACW,EAAM,CAAE,iBAAAC,KAAuB,OAC3C,OAAKC,EAAAD,EAAiB,OAAjB,MAAAC,EAAuB,0BAA0B,QAI/C,CACL,sBACED,EAAiB,KAAK,0BAA0B,OAAA,EAL3C,IAOX,CAAA,CACD,EAEK,KAAA,CAAE,2BAAAE,GAA+BC,IAEjCC,EAAgBC,GAAuB,CACd,IAAIC,EAC/BzB,EAAmC,KAAO,CACxC,UAAW,CACT,SAAUwB,EAAO,EACnB,EACA,OAAOE,EAAO,CACZA,EAAM,MAAM,CAAE,GAAIA,EAAM,SAASF,CAAM,EAAG,EAC1CE,EAAM,GAAG,CACX,CAAA,EACA,EACF,CACE,yBAA0B,GAAG,kCAAkC,CACjE,CAAA,EAGmB,OAAO,KAAK,IAAM,CAC9BhB,EAAA,CACL,GAAI,iBACJ,KAAMiB,EAAkB,QACxB,QAAS,GAAG,0BAA0B,CAAA,CACvC,CAAA,CACF,CAAA,EAGGC,EAAsB,MAAOJ,GAAuB,CACtC,MAAMH,EAA2B,QAAQ,KAE/BG,CAAM,CAAA,EAG9BK,EAAoC,CACxC,CACE,IAAK,OACL,MAAO,GAAG,MAAM,EAChB,SAAU,EACZ,EACA,CACE,IAAK,WACL,MAAO,GAAG,UAAU,EACpB,SAAU,EACZ,EACA,CACE,IAAK,YACL,MAAO,GAAG,sBAAsB,EAChC,KAAM,WACR,CAAA,EAGIC,EAA2B,CAC/B,CACE,IAAK,SACL,MAAO,GAAG,oBAAoB,EAC9B,KAAM,SACN,QAAS,SACT,KAAOC,GAAS,EAACA,GAAA,MAAAA,EAAM,SACvB,QAAUA,GAAS,CACjBH,EAAoBG,CAAkB,CACxC,CACF,CAAA,EAGIC,EAAiBC,EAAsB,IAAM,OACjD,SAAQb,EAAAJ,EAAsB,QAAtB,YAAAI,EAA6B,wBAAyB,CAAI,GAAA,IAC/DI,IACQ,CACL,GAAGA,EACH,QAASA,EAAO,aAAeA,EAAO,cAAgBZ,EAAY,KAAA,EAEtE,CACF,CACD,EAEKsB,EAAWD,EAAS,IACxBE,EAAK,EACH,4EACF,CAAA"}