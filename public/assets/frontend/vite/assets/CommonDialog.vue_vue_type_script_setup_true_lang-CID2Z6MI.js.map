{"version":3,"file":"CommonDialog.vue_vue_type_script_setup_true_lang-CID2Z6MI.js","sources":["../../../../../app/frontend/apps/mobile/components/CommonDialog/CommonDialog.vue"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { onKeyUp, usePointerSwipe } from '@vueuse/core'\nimport { nextTick, onMounted, ref, type Events, useTemplateRef } from 'vue'\n\nimport { useTrapTab } from '#shared/composables/useTrapTab.ts'\nimport type { EventHandlers } from '#shared/types/utils.ts'\nimport stopEvent from '#shared/utils/events.ts'\nimport { getFirstFocusableElement } from '#shared/utils/getFocusableElements.ts'\n\nimport CommonButton from '#mobile/components/CommonButton/CommonButton.vue'\nimport { closeDialog } from '#mobile/composables/useDialog.ts'\n\nconst props = defineProps<{\n  name: string\n  label?: string\n  content?: string\n  // don't focus the first element inside a Dialog after being mounted\n  // if nothing is focusable, will focus \"Done\" button\n  noAutofocus?: boolean\n  listeners?: {\n    done?: EventHandlers<Events>\n  }\n}>()\n\nconst emit = defineEmits<{\n  close: []\n}>()\n\nconst PX_SWIPE_CLOSE = -150\n\nconst top = ref('0')\nconst dialogElement = useTemplateRef('dialog')\nconst contentElement = useTemplateRef('content')\n\nconst close = async () => {\n  emit('close')\n  await closeDialog(props.name)\n}\n\nconst canCloseDialog = () => {\n  const currentDialog = dialogElement.value\n  if (!currentDialog) {\n    return false\n  }\n  // close dialog only if this is the last one opened\n  const dialogs = document.querySelectorAll('[data-common-dialog]')\n  return dialogs[dialogs.length - 1] === currentDialog\n}\n\nonKeyUp('Escape', (e) => {\n  if (canCloseDialog()) {\n    stopEvent(e)\n    close()\n  }\n})\n\nconst { distanceY, isSwiping } = usePointerSwipe(dialogElement, {\n  onSwipe() {\n    if (distanceY.value < 0) {\n      const distance = Math.abs(distanceY.value)\n      top.value = `${distance}px`\n    } else {\n      top.value = '0'\n    }\n  },\n  onSwipeEnd() {\n    if (distanceY.value <= PX_SWIPE_CLOSE) {\n      close()\n    } else {\n      top.value = '0'\n    }\n  },\n  pointerTypes: ['touch', 'pen'],\n})\n\nuseTrapTab(dialogElement)\n\nonMounted(() => {\n  if (props.noAutofocus) return\n\n  // will try to find focusable element inside dialog\n  // if it won't find it, will try to find inside the header\n  // most likely will find \"Done\" button\n  const firstFocusable =\n    getFirstFocusableElement(contentElement.value) ||\n    getFirstFocusableElement(dialogElement.value)\n\n  nextTick(() => {\n    firstFocusable?.focus()\n    firstFocusable?.scrollIntoView({ block: 'nearest' })\n  })\n})\n</script>\n\n<script lang=\"ts\">\nexport default {\n  inheritAttrs: false,\n}\n</script>\n\n<template>\n  <div\n    :id=\"`dialog-${name}`\"\n    class=\"fixed inset-0 z-10 flex overflow-y-auto\"\n    :aria-label=\"$t(label || name)\"\n    role=\"dialog\"\n  >\n    <div\n      ref=\"dialog\"\n      data-common-dialog\n      class=\"flex h-full grow flex-col overflow-x-hidden bg-black\"\n      :class=\"{ 'transition-all duration-200 ease-linear': !isSwiping }\"\n      :style=\"{ transform: `translateY(${top})` }\"\n    >\n      <div class=\"bg-gray-150/40 mx-4 h-2.5 shrink-0 rounded-t-xl\" />\n      <div\n        class=\"relative flex h-16 shrink-0 items-center justify-center rounded-t-xl bg-gray-600/80 select-none\"\n      >\n        <div\n          class=\"absolute top-0 bottom-0 flex items-center ltr:left-0 ltr:pl-4 rtl:right-0 rtl:pr-4\"\n        >\n          <slot name=\"before-label\" />\n        </div>\n        <div\n          class=\"line-clamp-2 max-w-[65%] text-center text-base leading-[19px] font-semibold text-white\"\n        >\n          <slot name=\"label\">\n            {{ $t(label) }}\n          </slot>\n        </div>\n        <div\n          class=\"absolute top-0 bottom-0 flex items-center ltr:right-0 ltr:pr-4 rtl:left-0 rtl:pl-4\"\n        >\n          <slot name=\"after-label\">\n            <CommonButton\n              class=\"grow\"\n              variant=\"primary\"\n              transparent-background\n              v-bind=\"listeners?.done\"\n              @pointerdown.stop\n              @click=\"close()\"\n              @keypress.space.prevent=\"close()\"\n            >\n              {{ $t('Done') }}\n            </CommonButton>\n          </slot>\n        </div>\n      </div>\n      <div\n        ref=\"content\"\n        v-bind=\"$attrs\"\n        class=\"flex grow flex-col items-start overflow-y-auto bg-black text-white\"\n      >\n        <slot>{{ content }}</slot>\n      </div>\n    </div>\n  </div>\n</template>\n"],"names":["__default__","props","__props","emit","__emit","PX_SWIPE_CLOSE","top","ref","dialogElement","useTemplateRef","contentElement","close","closeDialog","canCloseDialog","currentDialog","dialogs","onKeyUp","stopEvent","distanceY","isSwiping","usePointerSwipe","distance","useTrapTab","onMounted","firstFocusable","getFirstFocusableElement","nextTick"],"mappings":"stBAiGeA,EAAA,CACb,aAAc,EAChB,gJArFA,MAAMC,EAAQC,EAYRC,EAAOC,EAIPC,EAAiB,KAEjBC,EAAMC,EAAI,GAAG,EACbC,EAAgBC,EAAe,QAAQ,EACvCC,EAAiBD,EAAe,SAAS,EAEzCE,EAAQ,SAAY,CACxBR,EAAK,OAAO,EACN,MAAAS,EAAYX,EAAM,IAAI,CAAA,EAGxBY,EAAiB,IAAM,CAC3B,MAAMC,EAAgBN,EAAc,MACpC,GAAI,CAACM,EACI,MAAA,GAGH,MAAAC,EAAU,SAAS,iBAAiB,sBAAsB,EAChE,OAAOA,EAAQA,EAAQ,OAAS,CAAC,IAAMD,CAAA,EAGjCE,EAAA,SAAW,GAAM,CACnBH,MACFI,EAAU,CAAC,EACLN,IACR,CACD,EAED,KAAM,CAAE,UAAAO,EAAW,UAAAC,GAAcC,EAAgBZ,EAAe,CAC9D,SAAU,CACJ,GAAAU,EAAU,MAAQ,EAAG,CACvB,MAAMG,EAAW,KAAK,IAAIH,EAAU,KAAK,EACrCZ,EAAA,MAAQ,GAAGe,CAAQ,IAAA,MAEvBf,EAAI,MAAQ,GAEhB,EACA,YAAa,CACPY,EAAU,OAASb,EACfM,IAENL,EAAI,MAAQ,GAEhB,EACA,aAAc,CAAC,QAAS,KAAK,CAAA,CAC9B,EAED,OAAAgB,EAAWd,CAAa,EAExBe,EAAU,IAAM,CACd,GAAItB,EAAM,YAAa,OAKvB,MAAMuB,EACJC,EAAyBf,EAAe,KAAK,GAC7Ce,EAAyBjB,EAAc,KAAK,EAE9CkB,EAAS,IAAM,CACbF,GAAA,MAAAA,EAAgB,QAChBA,GAAA,MAAAA,EAAgB,eAAe,CAAE,MAAO,SAAW,EAAA,CACpD,CAAA,CACF"}