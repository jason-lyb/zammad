{"version":3,"file":"useHtmlLinks-53b5zJaG.js","sources":["../../../../../app/frontend/shared/composables/useHtmlLinks.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useEventListener } from '@vueuse/core'\nimport { useRouter } from 'vue-router'\n\nimport { isStandalone } from '#shared/utils/pwa.ts'\n\nimport { useBaseUrl } from './useBaseUrl.ts'\n\nconst useHtmlLinks = (urlPrefix: '/desktop' | '/mobile') => {\n  const { baseUrl } = useBaseUrl()\n  const router = useRouter()\n\n  const getRedirectRoute = (url: URL): string | undefined => {\n    if (url.pathname.startsWith(urlPrefix)) {\n      return url.href.slice(`${url.origin}${urlPrefix}`.length)\n    }\n\n    const route = router.resolve(`/${url.hash.slice(1)}${url.search}`)\n    if (route.name !== 'Error') {\n      return route.fullPath\n    }\n  }\n  const openLink = (target: string, path: string) => {\n    // keep links inside PWA inside the app\n    if (!isStandalone() && target && target !== '_self') {\n      window.open(`${urlPrefix}${path}`, target)\n    } else {\n      router.push(path)\n    }\n  }\n\n  const handleLinkClick = (link: HTMLAnchorElement, event: Event) => {\n    try {\n      const url = new URL(link.href)\n\n      if (\n        url.origin === window.location.origin ||\n        url.origin === baseUrl.value\n      ) {\n        const redirectRoute = getRedirectRoute(url)\n        if (redirectRoute) {\n          event.preventDefault()\n          return openLink(link.target, redirectRoute)\n        }\n      }\n\n      if (link.hasAttribute('external')) return\n\n      if (!link.target) {\n        event.preventDefault()\n        window.open(link.href)\n      }\n    } catch {\n      // skip\n    }\n  }\n\n  // user links has fqdn in its href, but if it changes the link becomes invalid\n  // to bypass that we replace the href with the correct one\n  const patchUserMentionLinks = (link: HTMLAnchorElement) => {\n    const userId = link.dataset.mentionUserId\n\n    if (!userId) return\n\n    link.href = `${baseUrl.value}${urlPrefix}/users/${userId}`\n  }\n\n  const setupLinksHandlers = (element: HTMLDivElement) => {\n    element.querySelectorAll('a').forEach((link) => {\n      if ('__handled' in link) return\n      Object.defineProperty(link, '__handled', { value: true })\n      patchUserMentionLinks(link)\n\n      useEventListener(link, 'click', (event) => handleLinkClick(link, event))\n    })\n  }\n\n  return {\n    setupLinksHandlers,\n  }\n}\n\nexport { useHtmlLinks }\n"],"names":["useHtmlLinks","urlPrefix","baseUrl","useBaseUrl","router","useRouter","getRedirectRoute","url","route","openLink","target","path","isStandalone","handleLinkClick","link","event","redirectRoute","patchUserMentionLinks","userId","element","useEventListener"],"mappings":"kIASM,MAAAA,EAAgBC,GAAsC,CACpD,KAAA,CAAE,QAAAC,GAAYC,IACdC,EAASC,IAETC,EAAoBC,GAAiC,CACzD,GAAIA,EAAI,SAAS,WAAWN,CAAS,EAC5B,OAAAM,EAAI,KAAK,MAAM,GAAGA,EAAI,MAAM,GAAGN,CAAS,GAAG,MAAM,EAG1D,MAAMO,EAAQJ,EAAO,QAAQ,IAAIG,EAAI,KAAK,MAAM,CAAC,CAAC,GAAGA,EAAI,MAAM,EAAE,EAC7D,GAAAC,EAAM,OAAS,QACjB,OAAOA,EAAM,QACf,EAEIC,EAAW,CAACC,EAAgBC,IAAiB,CAE7C,CAACC,EAAkB,GAAAF,GAAUA,IAAW,QAC1C,OAAO,KAAK,GAAGT,CAAS,GAAGU,CAAI,GAAID,CAAM,EAEzCN,EAAO,KAAKO,CAAI,CAClB,EAGIE,EAAkB,CAACC,EAAyBC,IAAiB,CAC7D,GAAA,CACF,MAAMR,EAAM,IAAI,IAAIO,EAAK,IAAI,EAG3B,GAAAP,EAAI,SAAW,OAAO,SAAS,QAC/BA,EAAI,SAAWL,EAAQ,MACvB,CACM,MAAAc,EAAgBV,EAAiBC,CAAG,EAC1C,GAAIS,EACF,OAAAD,EAAM,eAAe,EACdN,EAASK,EAAK,OAAQE,CAAa,CAE9C,CAEI,GAAAF,EAAK,aAAa,UAAU,EAAG,OAE9BA,EAAK,SACRC,EAAM,eAAe,EACd,OAAA,KAAKD,EAAK,IAAI,EACvB,MACM,CAER,CAAA,EAKIG,EAAyBH,GAA4B,CACnD,MAAAI,EAASJ,EAAK,QAAQ,cAEvBI,IAELJ,EAAK,KAAO,GAAGZ,EAAQ,KAAK,GAAGD,CAAS,UAAUiB,CAAM,GAAA,EAanD,MAAA,CACL,mBAX0BC,GAA4B,CACtDA,EAAQ,iBAAiB,GAAG,EAAE,QAASL,GAAS,CAC1C,cAAeA,IACnB,OAAO,eAAeA,EAAM,YAAa,CAAE,MAAO,GAAM,EACxDG,EAAsBH,CAAI,EAE1BM,EAAiBN,EAAM,QAAUC,GAAUF,EAAgBC,EAAMC,CAAK,CAAC,EAAA,CACxE,CAAA,CAID,CAEJ"}