{"version":3,"file":"Login-BSDX7WFx.js","sources":["../../../../../app/frontend/apps/desktop/pages/authentication/components/LoginThirdParty.vue","../../../../../app/frontend/apps/desktop/pages/authentication/components/LoginRecoveryCode.vue","../../../../../app/frontend/apps/desktop/pages/authentication/components/LoginTwoFactor.vue","../../../../../app/frontend/apps/desktop/pages/authentication/components/LoginTwoFactorMethods.vue","../../../../../app/frontend/apps/desktop/pages/authentication/graphql/mutations/adminPasswordAuthVerify.api.ts","../../../../../app/frontend/apps/desktop/pages/authentication/composables/useAdminPasswordAuthVerify.ts","../../../../../app/frontend/apps/desktop/pages/authentication/views/Login.vue"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport useFingerprint from '#shared/composables/useFingerprint.ts'\nimport type { ThirdPartyAuthProvider } from '#shared/types/authentication.ts'\n\nimport CommonThirdPartyAuthenticationButton from '#desktop/components/CommonThirdPartyAuthenticationButton/CommonThirdPartyAuthenticationButton.vue'\n\nexport interface Props {\n  providers: ThirdPartyAuthProvider[]\n}\n\nconst props = defineProps<Props>()\n\nconst { fingerprint } = useFingerprint()\n</script>\n\n<template>\n  <section class=\"mt-2.5 w-full\" data-test-id=\"loginThirdParty\">\n    <div class=\"mb-2.5 flex justify-center\">\n      <CommonLabel>\n        {{\n          $c.user_show_password_login\n            ? $t('Or sign in using')\n            : $t('Sign in using')\n        }}\n      </CommonLabel>\n    </div>\n    <div class=\"flex flex-wrap gap-2\">\n      <CommonThirdPartyAuthenticationButton\n        v-for=\"provider of props.providers\"\n        :key=\"provider.name\"\n        class=\"grow basis-[calc(50%-theme(spacing.2))]\"\n        :url=\"`${provider.url}?fingerprint=${fingerprint}`\"\n        :button-prefix-icon=\"provider.icon\"\n        button-size=\"large\"\n        button-block\n        button-variant=\"primary\"\n        :button-label=\"provider.name\"\n      >\n        {{ $t(provider.label) }}\n      </CommonThirdPartyAuthenticationButton>\n    </div>\n  </section>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSubmitData,\n  FormSchemaNode,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport type {\n  RecoveryCodeFormData,\n  LoginCredentials,\n} from '#shared/entities/two-factor/types.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport { useAuthenticationStore } from '#shared/stores/authentication.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\n\nconst props = defineProps<{\n  credentials: LoginCredentials\n}>()\n\nconst emit = defineEmits<{\n  finish: []\n  error: [error: UserError]\n  'clear-error': []\n}>()\n\nconst schema: FormSchemaNode[] = [\n  {\n    type: 'text',\n    name: 'code',\n    label: __('Recovery Code'),\n    required: true,\n    props: {\n      help: __('Enter one of your unused recovery codes.'),\n    },\n  },\n]\n\nconst authentication = useAuthenticationStore()\nconst { form, isDisabled } = useForm()\n\nconst enterRecoveryCode = (formData: FormSubmitData<RecoveryCodeFormData>) => {\n  // Clear notifications to avoid duplicated error messages.\n  emit('clear-error')\n\n  const { login, password, rememberMe } = props.credentials\n\n  return authentication\n    .login({\n      login,\n      password,\n      rememberMe,\n      recoveryCode: formData.code,\n    })\n    .then(() => {\n      emit('finish')\n    })\n    .catch((error: UserError) => {\n      if (error instanceof UserError) {\n        emit('error', error)\n      }\n    })\n}\n</script>\n\n<template>\n  <Form\n    ref=\"form\"\n    :schema=\"schema\"\n    @submit=\"enterRecoveryCode($event as FormSubmitData<RecoveryCodeFormData>)\"\n  >\n    <template #after-fields>\n      <CommonButton\n        type=\"submit\"\n        variant=\"submit\"\n        size=\"large\"\n        class=\"mt-8\"\n        block\n        :disabled=\"isDisabled\"\n      >\n        {{ $t('Sign in') }}\n      </CommonButton>\n    </template>\n  </Form>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref } from 'vue'\n\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSubmitData,\n  FormSchemaNode,\n} from '#shared/components/Form/types.ts'\nimport type {\n  TwoFactorLoginFormData,\n  LoginCredentials,\n  TwoFactorPlugin,\n} from '#shared/entities/two-factor/types.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport { useTwoFactorMethodInitiateAuthenticationMutation } from '#shared/graphql/mutations/twoFactorMethodInitiateAuthentication.api.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport { useAuthenticationStore } from '#shared/stores/authentication.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\n\nexport interface Props {\n  credentials: LoginCredentials\n  twoFactor: TwoFactorPlugin\n}\n\nconst props = defineProps<Props>()\n\nconst emit = defineEmits<{\n  finish: []\n  error: [error: UserError]\n  'clear-error': []\n}>()\n\nconst twoFactorLoginOptions = computed(() => props.twoFactor.loginOptions)\n\nconst schema: FormSchemaNode[] = [\n  {\n    type: 'text',\n    name: 'code',\n    label: __('Security Code'),\n    required: true,\n    props: {\n      help: computed(() => twoFactorLoginOptions.value.helpMessage),\n      autocomplete: 'one-time-code',\n      autofocus: true,\n      inputmode: 'numeric',\n      pattern: '[0-9]*',\n    },\n  },\n]\n\nconst authentication = useAuthenticationStore()\n\nconst loading = ref(false)\nconst error = ref<string | null>(null)\nconst canRetry = ref(true)\n\nconst login = (payload: unknown) => {\n  emit('clear-error')\n\n  const { login, password, rememberMe } = props.credentials\n\n  return authentication\n    .login({\n      login,\n      password,\n      rememberMe,\n      twoFactorAuthentication: {\n        payload,\n        method: props.twoFactor.name,\n      },\n    })\n    .then(() => {\n      canRetry.value = false\n      emit('finish')\n    })\n    .catch((error: UserError) => {\n      if (error instanceof UserError) {\n        emit('error', error)\n      }\n    })\n}\n\nconst tryMethod = async () => {\n  if (!twoFactorLoginOptions.value.setup) return\n\n  const initialDataMutation = new MutationHandler(\n    useTwoFactorMethodInitiateAuthenticationMutation(),\n  )\n\n  emit('clear-error')\n\n  error.value = null\n  loading.value = true\n  try {\n    const initiated = await initialDataMutation.send({\n      twoFactorMethod: props.twoFactor.name,\n      password: props.credentials.password,\n      login: props.credentials.login,\n    })\n    if (!initiated?.twoFactorMethodInitiateAuthentication?.initiationData) {\n      error.value = __(\n        'Two-factor authentication method could not be initiated.',\n      )\n      return\n    }\n    const result = await twoFactorLoginOptions.value.setup(\n      initiated.twoFactorMethodInitiateAuthentication.initiationData,\n    )\n    canRetry.value = result.retry ?? true\n    if (result?.success) {\n      await login(result.payload)\n    } else if (result?.error) {\n      error.value = result.error\n    }\n  } catch (err) {\n    if (err instanceof UserError) {\n      error.value = err.errors[0].message\n    }\n  } finally {\n    loading.value = false\n  }\n}\n\nonMounted(async () => {\n  await tryMethod()\n})\n</script>\n\n<template>\n  <Form\n    v-if=\"twoFactorLoginOptions.form !== false\"\n    :schema=\"schema\"\n    @submit=\"login(($event as FormSubmitData<TwoFactorLoginFormData>).code)\"\n  >\n    <template #after-fields>\n      <CommonButton\n        type=\"submit\"\n        variant=\"submit\"\n        size=\"large\"\n        class=\"mt-8\"\n        block\n        :disabled=\"loading\"\n      >\n        {{ $t('Sign in') }}\n      </CommonButton>\n    </template>\n  </Form>\n  <section\n    v-else-if=\"twoFactorLoginOptions.setup\"\n    class=\"flex flex-col items-center justify-center\"\n  >\n    <CommonLabel\n      v-if=\"error && twoFactorLoginOptions.errorHelpMessage\"\n      class=\"mt-5\"\n    >\n      {{ $t(twoFactorLoginOptions.errorHelpMessage) }}\n    </CommonLabel>\n\n    <CommonLabel v-else-if=\"twoFactorLoginOptions.helpMessage\" class=\"mt-5\">\n      {{ $t(twoFactorLoginOptions.helpMessage) }}\n    </CommonLabel>\n\n    <CommonLoader class=\"mt-8 mb-3\" :loading=\"loading\" :error=\"error\" />\n\n    <CommonButton\n      v-if=\"!loading && canRetry\"\n      size=\"large\"\n      variant=\"primary\"\n      class=\"mt-5\"\n      block\n      @click=\"tryMethod\"\n    >\n      {{ $t('Retry') }}\n    </CommonButton>\n  </section>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport type { TwoFactorPlugin } from '#shared/entities/two-factor/types.ts'\nimport type { EnumTwoFactorAuthenticationMethod } from '#shared/graphql/types.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\n\ndefineProps<{\n  methods: TwoFactorPlugin[]\n  defaultMethod?: Maybe<EnumTwoFactorAuthenticationMethod>\n  recoveryCodesAvailable: boolean\n}>()\n\nconst emit = defineEmits<{\n  select: [twoFactorMethod: EnumTwoFactorAuthenticationMethod]\n  cancel: []\n  'use-recovery-code': []\n}>()\n</script>\n\n<template>\n  <section\n    v-for=\"method of methods\"\n    :key=\"method.name\"\n    class=\"mt-3 flex flex-col\"\n  >\n    <CommonButton\n      size=\"large\"\n      block\n      :prefix-icon=\"method.icon\"\n      :variant=\"method.name == defaultMethod ? 'primary' : 'tertiary'\"\n      @click=\"emit('select', method.name)\"\n    >\n      {{ $t(method.label) }}\n    </CommonButton>\n\n    <div v-if=\"method.description\" class=\"mt-2.5 text-center\">\n      <CommonLabel>\n        {{ $t(method.description) }}\n      </CommonLabel>\n    </div>\n  </section>\n\n  <div class=\"mt-8 text-center text-sm\">\n    <CommonLink\n      v-if=\"recoveryCodesAvailable\"\n      link=\"#\"\n      @click=\"emit('use-recovery-code')\"\n    >\n      {{ $t('Or use one of your recovery codes.') }}\n    </CommonLink>\n  </div>\n\n  <CommonButton class=\"mt-5\" size=\"large\" block @click=\"emit('cancel')\">\n    {{ $t('Cancel & Go Back') }}\n  </CommonButton>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const AdminPasswordAuthVerifyDocument = gql`\n    mutation adminPasswordAuthVerify($token: String!) {\n  adminPasswordAuthVerify(token: $token) {\n    login\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useAdminPasswordAuthVerifyMutation(options: VueApolloComposable.UseMutationOptions<Types.AdminPasswordAuthVerifyMutation, Types.AdminPasswordAuthVerifyMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.AdminPasswordAuthVerifyMutation, Types.AdminPasswordAuthVerifyMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.AdminPasswordAuthVerifyMutation, Types.AdminPasswordAuthVerifyMutationVariables>(AdminPasswordAuthVerifyDocument, options);\n}\nexport type AdminPasswordAuthVerifyMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.AdminPasswordAuthVerifyMutation, Types.AdminPasswordAuthVerifyMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, ref } from 'vue'\nimport { useRoute } from 'vue-router'\n\nimport type { AlertVariant } from '#shared/components/CommonAlert/types.ts'\nimport type {\n  FormSchemaField,\n  FormValues,\n} from '#shared/components/Form/types.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport { useAdminPasswordAuthVerifyMutation } from '../graphql/mutations/adminPasswordAuthVerify.api.ts'\n\ninterface AdminPasswordAuthVerifyOptions {\n  formChangeFields: Record<string, Partial<FormSchemaField>>\n  formInitialValues: FormValues\n}\n\nexport const useAdminPasswordAuthVerify = (\n  options: AdminPasswordAuthVerifyOptions,\n) => {\n  const route = useRoute()\n\n  const token = route.query.token as string\n\n  if (!token) return {}\n\n  const verifyToken = new MutationHandler(\n    useAdminPasswordAuthVerifyMutation({\n      variables: { token },\n    }),\n    {\n      errorShowNotification: false,\n    },\n  )\n\n  const verifyTokenResult = ref(false)\n  const verifyTokenMessage = ref('')\n\n  verifyToken\n    .send()\n    .then((data) => {\n      if (data?.adminPasswordAuthVerify?.login) {\n        options.formChangeFields.login = {\n          props: {\n            disabled: true,\n          },\n        }\n\n        options.formInitialValues.login = data.adminPasswordAuthVerify.login\n\n        verifyTokenMessage.value = __(\n          'The token is valid. You are now able to login via password once.',\n        )\n\n        verifyTokenResult.value = true\n      }\n    })\n    .catch(() => {\n      verifyTokenMessage.value = __(\n        'The token for the admin password login is invalid.',\n      )\n    })\n\n  const verifyTokenAlertVariant = computed<AlertVariant>(() => {\n    return verifyTokenResult.value ? 'success' : 'danger'\n  })\n\n  return {\n    verifyTokenResult,\n    verifyTokenMessage,\n    verifyTokenAlertVariant,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, ref, reactive } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nimport CommonLink from '#shared/components/CommonLink/CommonLink.vue'\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSubmitData,\n  FormSchemaField,\n  FormValues,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport useLoginTwoFactor from '#shared/composables/authentication/useLoginTwoFactor.ts'\nimport { useThirdPartyAuthentication } from '#shared/composables/authentication/useThirdPartyAuthentication.ts'\nimport type { LoginCredentials } from '#shared/entities/two-factor/types.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport { EnumPublicLinksScreen } from '#shared/graphql/types.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\nimport { useAuthenticationStore } from '#shared/stores/authentication.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonPublicLinks from '#desktop/components/CommonPublicLinks/CommonPublicLinks.vue'\nimport LayoutPublicPage from '#desktop/components/layout/LayoutPublicPage/LayoutPublicPage.vue'\nimport LoginThirdParty from '#desktop/pages/authentication/components/LoginThirdParty.vue'\n\nimport { ensureAfterAuth } from '../after-auth/composable/useAfterAuthPlugins.ts'\nimport LoginRecoveryCode from '../components/LoginRecoveryCode.vue'\nimport LoginTwoFactor from '../components/LoginTwoFactor.vue'\nimport LoginTwoFactorMethods from '../components/LoginTwoFactorMethods.vue'\nimport { useAdminPasswordAuthVerify } from '../composables/useAdminPasswordAuthVerify.ts'\n\nconst application = useApplicationStore()\n\nconst router = useRouter()\nconst route = useRoute()\n\nconst authentication = useAuthenticationStore()\n\nconst { enabledProviders, hasEnabledProviders } = useThirdPartyAuthentication()\n\nconst passwordLoginErrorMessage = ref('')\n\nconst showError = (error: UserError) => {\n  passwordLoginErrorMessage.value = error.generalErrors[0]\n}\n\nconst clearError = () => {\n  passwordLoginErrorMessage.value = ''\n}\n\nconst {\n  loginFlow,\n  askTwoFactor,\n  twoFactorPlugin,\n  twoFactorAllowedMethods,\n  updateState,\n  updateSecondFactor,\n  hasAlternativeLoginMethod,\n  loginPageTitle,\n  cancelAndGoBack,\n} = useLoginTwoFactor(clearError)\n\nconst finishLogin = () => {\n  const { redirect: redirectUrl } = route.query\n  if (typeof redirectUrl === 'string') {\n    router.replace(redirectUrl)\n  } else {\n    router.replace('/')\n  }\n}\n\nconst login = async (credentials: LoginCredentials) => {\n  try {\n    const { twoFactor, afterAuth } = await authentication.login(credentials)\n\n    if (afterAuth) {\n      ensureAfterAuth(router, afterAuth)\n      return\n    }\n\n    if (twoFactor?.defaultTwoFactorAuthenticationMethod) {\n      askTwoFactor(twoFactor, credentials)\n      return\n    }\n\n    finishLogin()\n  } catch (error) {\n    passwordLoginErrorMessage.value =\n      error instanceof UserError ? error.generalErrors[0] : String(error)\n  }\n}\n\nconst loginSchema = [\n  {\n    name: 'login',\n    type: 'text',\n    label: __('Username / Email'),\n    required: true,\n  },\n  {\n    name: 'password',\n    label: __('Password'),\n    type: 'password',\n    required: true,\n  },\n  {\n    isLayout: true,\n    element: 'div',\n    attrs: {\n      class: 'flex grow items-center justify-between',\n    },\n    children: [\n      {\n        type: 'checkbox',\n        name: 'rememberMe',\n        label: __('Remember me'),\n        value: false,\n      },\n      {\n        if: '$userLostPassword === true',\n        isLayout: true,\n        component: 'CommonLink',\n        props: {\n          class: 'text-right text-sm',\n          link: '/reset-password',\n        },\n        children: __('Forgot password?'),\n      },\n    ],\n  },\n]\n\nconst userLostPassword = computed(() => application.config.user_lost_password)\n\nconst schemaData = reactive({\n  userLostPassword,\n})\n\nconst { form, isDisabled } = useForm()\n\nconst formInitialValues: FormValues = {}\nconst formChangeFields = reactive<Record<string, Partial<FormSchemaField>>>({})\n\nconst { verifyTokenResult, verifyTokenMessage, verifyTokenAlertVariant } =\n  useAdminPasswordAuthVerify({\n    formChangeFields,\n    formInitialValues,\n  })\n\nconst showPasswordLogin = computed(\n  () =>\n    application.config.user_show_password_login ||\n    !hasEnabledProviders.value ||\n    verifyTokenResult?.value,\n)\n</script>\n\n<template>\n  <LayoutPublicPage box-size=\"small\" :title=\"loginPageTitle\" show-logo>\n    <div\n      v-if=\"$c.maintenance_mode\"\n      class=\"mb-1 rounded-lg bg-red-500 px-4 py-2 text-sm text-white\"\n    >\n      {{\n        $t(\n          'Zammad is currently in maintenance mode. Only administrators can log in. Please wait until the maintenance window is over.',\n        )\n      }}\n    </div>\n    <!-- eslint-disable vue/no-v-html -->\n    <div\n      v-if=\"$c.maintenance_login && $c.maintenance_login_message\"\n      class=\"mb-1 rounded-lg bg-green-500 px-4 py-2 text-sm text-white\"\n      v-html=\"$c.maintenance_login_message\"\n    ></div>\n\n    <CommonAlert v-if=\"verifyTokenMessage\" :variant=\"verifyTokenAlertVariant\">{{\n      $t(verifyTokenMessage)\n    }}</CommonAlert>\n\n    <template v-if=\"showPasswordLogin\">\n      <CommonAlert v-if=\"passwordLoginErrorMessage\" variant=\"danger\">{{\n        $t(passwordLoginErrorMessage)\n      }}</CommonAlert>\n\n      <Form\n        v-if=\"loginFlow.state === 'credentials' && showPasswordLogin\"\n        id=\"login\"\n        ref=\"form\"\n        form-class=\"mb-2.5 space-y-2.5\"\n        :schema=\"loginSchema\"\n        :schema-data=\"schemaData\"\n        :initial-values=\"formInitialValues\"\n        :change-fields=\"formChangeFields\"\n        @submit=\"login($event as FormSubmitData<LoginCredentials>)\"\n      >\n        <template #after-fields>\n          <div v-if=\"$c.user_create_account\" class=\"flex justify-center py-3\">\n            <CommonLabel>\n              {{ $t('New user?') }}\n              <CommonLink link=\"/signup\" class=\"select-none\" size=\"medium\">{{\n                $t('Register')\n              }}</CommonLink>\n            </CommonLabel>\n          </div>\n          <CommonButton\n            type=\"submit\"\n            variant=\"submit\"\n            size=\"large\"\n            block\n            :disabled=\"isDisabled\"\n          >\n            {{ $t('Sign in') }}\n          </CommonButton>\n        </template>\n      </Form>\n\n      <LoginTwoFactor\n        v-else-if=\"\n          loginFlow.state === '2fa' && twoFactorPlugin && loginFlow.credentials\n        \"\n        :credentials=\"loginFlow.credentials\"\n        :two-factor=\"twoFactorPlugin\"\n        @error=\"showError\"\n        @clear-error=\"clearError\"\n        @finish=\"finishLogin\"\n      />\n      <LoginRecoveryCode\n        v-else-if=\"loginFlow.state === 'recovery-code' && loginFlow.credentials\"\n        :credentials=\"loginFlow.credentials\"\n        @error=\"showError\"\n        @clear-error=\"clearError\"\n        @finish=\"finishLogin\"\n      />\n      <LoginTwoFactorMethods\n        v-else-if=\"loginFlow.state === '2fa-select'\"\n        :methods=\"twoFactorAllowedMethods\"\n        :default-method=\"loginFlow.defaultMethod\"\n        :recovery-codes-available=\"loginFlow.recoveryCodesAvailable\"\n        @select=\"updateSecondFactor\"\n        @use-recovery-code=\"updateState('recovery-code')\"\n        @cancel=\"cancelAndGoBack()\"\n      />\n\n      <section\n        v-if=\"\n          (loginFlow.state === '2fa' || loginFlow.state === 'recovery-code') &&\n          hasAlternativeLoginMethod\n        \"\n        class=\"mt-3 text-center\"\n      >\n        <CommonLabel>\n          {{ $t('Having problems?') }}\n          <CommonLink\n            link=\"#\"\n            class=\"select-none\"\n            @click=\"updateState('2fa-select')\"\n          >\n            {{ $t('Try another method') }}\n          </CommonLink>\n        </CommonLabel>\n      </section>\n    </template>\n\n    <LoginThirdParty\n      v-if=\"hasEnabledProviders && loginFlow.state === 'credentials'\"\n      :providers=\"enabledProviders\"\n    />\n\n    <template #bottomContent>\n      <div\n        v-if=\"!showPasswordLogin\"\n        class=\"inline-flex flex-wrap items-center justify-center p-2 text-sm\"\n      >\n        <CommonLabel class=\"text-center text-stone-200 dark:text-neutral-500\">\n          {{\n            $t(\n              'If you have problems with the third-party login you can request a one-time password login as an admin.',\n            )\n          }}\n        </CommonLabel>\n        <CommonLink link=\"/admin-password-auth\">{{\n          $t('Request the password login here.')\n        }}</CommonLink>\n      </div>\n\n      <CommonLabel\n        v-if=\"loginFlow.state === '2fa-select'\"\n        class=\"mt-3 mb-3 text-stone-200 dark:text-neutral-500\"\n      >\n        {{\n          $t('Contact the administrator if you have any problems logging in.')\n        }}\n      </CommonLabel>\n\n      <!-- TODO: Remember the choice when we have a switch between the two desktop apps -->\n      <CommonLink\n        v-if=\"loginFlow.state === 'credentials'\"\n        class=\"mt-3 text-sm\"\n        link=\"/mobile\"\n        external\n      >\n        {{ $t('Continue to mobile') }}\n      </CommonLink>\n      <CommonPublicLinks :screen=\"EnumPublicLinksScreen.Login\" />\n    </template>\n  </LayoutPublicPage>\n</template>\n"],"names":["props","__props","fingerprint","useFingerprint","emit","__emit","schema","authentication","useAuthenticationStore","form","isDisabled","useForm","enterRecoveryCode","formData","login","password","rememberMe","error","UserError","twoFactorLoginOptions","computed","loading","ref","canRetry","payload","tryMethod","initialDataMutation","MutationHandler","useTwoFactorMethodInitiateAuthenticationMutation","initiated","_a","result","err","onMounted","AdminPasswordAuthVerifyDocument","gql","ErrorsFragmentDoc","useAdminPasswordAuthVerifyMutation","options","VueApolloComposable.useMutation","useAdminPasswordAuthVerify","token","useRoute","verifyToken","verifyTokenResult","verifyTokenMessage","data","verifyTokenAlertVariant","application","useApplicationStore","router","useRouter","route","enabledProviders","hasEnabledProviders","useThirdPartyAuthentication","passwordLoginErrorMessage","showError","clearError","loginFlow","askTwoFactor","twoFactorPlugin","twoFactorAllowedMethods","updateState","updateSecondFactor","hasAlternativeLoginMethod","loginPageTitle","cancelAndGoBack","useLoginTwoFactor","finishLogin","redirectUrl","credentials","twoFactor","afterAuth","ensureAfterAuth","loginSchema","userLostPassword","schemaData","reactive","formInitialValues","formChangeFields","showPasswordLogin"],"mappings":"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"}