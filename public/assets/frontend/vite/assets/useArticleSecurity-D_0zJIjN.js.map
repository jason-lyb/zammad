{"version":3,"file":"useArticleSecurity-D_0zJIjN.js","sources":["../../../../../app/frontend/shared/composables/useArticleSecurity.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, type Ref } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport type { TicketArticle } from '#shared/entities/ticket/types.ts'\nimport { translateArticleSecurity } from '#shared/entities/ticket-article/composables/translateArticleSecurity.ts'\nimport { useTicketArticleRetrySecurityProcessMutation } from '#shared/entities/ticket-article/graphql/mutations/ticketArticleRetrySecurityProcess.api.ts'\nimport { i18n } from '#shared/i18n/index.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nexport const useArticleSecurity = (article: Ref<TicketArticle>) => {\n  const { notify } = useNotifications()\n\n  const signingSuccess = computed(\n    () => article.value?.securityState?.signingSuccess,\n  )\n\n  const signingMessage = computed(\n    () => article.value?.securityState?.signingMessage,\n  )\n\n  const encryptionSuccess = computed(\n    () => article.value?.securityState?.encryptionSuccess,\n  )\n\n  const encryptionMessage = computed(\n    () => article.value?.securityState?.encryptionMessage,\n  )\n\n  const isEncrypted = computed(\n    () =>\n      article.value.securityState?.encryptionSuccess ||\n      (article.value.securityState?.encryptionSuccess === false &&\n        article.value.securityState?.encryptionMessage),\n  )\n\n  const isSigned = computed(\n    () =>\n      article.value.securityState?.signingSuccess ||\n      (article.value.securityState?.signingSuccess === false &&\n        article.value.securityState?.signingMessage),\n  )\n\n  const hasSecurityAttribute = computed(\n    () => article.value.securityState && (isEncrypted.value || isSigned.value),\n  )\n\n  const hasError = computed(() => {\n    if (!article.value.securityState) return false\n\n    if (\n      article?.value.securityState?.signingSuccess === false &&\n      article?.value.securityState?.signingMessage\n    )\n      return true\n\n    return !!(\n      article?.value.securityState?.encryptionSuccess === false &&\n      article?.value.securityState?.encryptionMessage\n    )\n  })\n\n  const retrySecurityProcess = async () => {\n    const retryMutation = new MutationHandler(\n      useTicketArticleRetrySecurityProcessMutation(() => ({\n        variables: {\n          articleId: article.value.id,\n        },\n      })),\n    )\n\n    const result = await retryMutation.send()\n    const security = result?.ticketArticleRetrySecurityProcess?.retryResult\n\n    if (!security) {\n      return notify({\n        id: 'retry-security-error',\n        type: NotificationTypes.Error,\n        message: __('The retried security process failed!'),\n        timeout: 2000,\n      })\n    }\n\n    if (security.type !== article.value?.securityState?.type) {\n      // shouldn't be possible, we only support S/MIME\n      return notify({\n        id: 'security-mechanism-error',\n        type: NotificationTypes.Error,\n        message: __('Article uses different security mechanism.'),\n        timeout: 2000,\n      })\n    }\n\n    if (security.signingSuccess) {\n      notify({\n        id: 'signature-verified',\n        type: NotificationTypes.Success,\n        message: __('The signature was successfully verified.'),\n      })\n    } else if (security.signingMessage) {\n      notify({\n        id: 'signature-verification-failed',\n        type: NotificationTypes.Error,\n        message: __('Signature verification failed! %s'),\n        messagePlaceholder: [i18n.t(security.signingMessage)],\n        timeout: 2000,\n      })\n    }\n\n    if (security.encryptionSuccess) {\n      notify({\n        id: 'decryption-success',\n        type: NotificationTypes.Success,\n        message: __('Decryption was successful.'),\n      })\n    } else if (security.encryptionMessage) {\n      notify({\n        id: 'decryption-failed',\n        type: NotificationTypes.Error,\n        message: __('Decryption failed! %s'),\n        messagePlaceholder: [i18n.t(security.encryptionMessage)],\n        timeout: 2000,\n      })\n    }\n  }\n\n  const typeLabel = computed(() => {\n    if (!article.value?.securityState?.type) return\n\n    return translateArticleSecurity(article.value?.securityState?.type)\n  })\n\n  return {\n    hasError,\n    signingSuccess,\n    signingMessage,\n    encryptionSuccess,\n    encryptionMessage,\n    isEncrypted,\n    isSigned,\n    hasSecurityAttribute,\n    typeLabel,\n    signingIcon: computed(() =>\n      signingSuccess.value ? 'signing-success' : 'signing-fail',\n    ),\n    encryptionIcon: computed(() =>\n      encryptionSuccess.value ? 'encryption-success' : 'encryption-fail',\n    ),\n    signedStatusMessage: computed(() =>\n      signingSuccess.value ? __('Signed') : __('Sign error'),\n    ),\n    encryptedStatusMessage: computed(() =>\n      encryptionSuccess.value ? __('Encrypted') : __('Encryption error'),\n    ),\n    retrySecurityProcess,\n  }\n}\n"],"names":["useArticleSecurity","article","notify","useNotifications","signingSuccess","computed","_b","_a","signingMessage","encryptionSuccess","encryptionMessage","isEncrypted","_c","isSigned","hasSecurityAttribute","hasError","_d","retrySecurityProcess","result","MutationHandler","useTicketArticleRetrySecurityProcessMutation","security","NotificationTypes","i18n","typeLabel","translateArticleSecurity"],"mappings":"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"}