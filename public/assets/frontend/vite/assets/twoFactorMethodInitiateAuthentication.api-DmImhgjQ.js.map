{"version":3,"file":"twoFactorMethodInitiateAuthentication.api-DmImhgjQ.js","sources":["../../../../../app/frontend/shared/composables/authentication/useLoginTwoFactor.ts","../../../../../app/frontend/shared/graphql/mutations/twoFactorMethodInitiateAuthentication.api.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, ref, reactive } from 'vue'\n\nimport { useTwoFactorPlugins } from '#shared/entities/two-factor/composables/useTwoFactorPlugins.ts'\nimport type {\n  LoginFlow,\n  LoginCredentials,\n} from '#shared/entities/two-factor/types.ts'\nimport type {\n  EnumTwoFactorAuthenticationMethod,\n  UserLoginTwoFactorMethods,\n} from '#shared/graphql/types.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nconst { twoFactorMethodLookup, twoFactorMethods } = useTwoFactorPlugins()\n\nconst useLoginTwoFactor = (clearErrors: () => void) => {\n  const application = useApplicationStore()\n\n  const loginFlow = reactive<LoginFlow>({\n    state: 'credentials',\n    allowedMethods: [],\n    defaultMethod: undefined,\n    recoveryCodesAvailable: false,\n  })\n\n  const states = ref<LoginFlow['state'][]>([loginFlow.state])\n\n  const updateState = (state: LoginFlow['state'], skipClearErrors = false) => {\n    if (!skipClearErrors) clearErrors()\n    states.value.push(state)\n    loginFlow.state = state\n  }\n\n  const updateSecondFactor = (\n    factor: EnumTwoFactorAuthenticationMethod,\n    skipClearErrors = false,\n  ) => {\n    if (!skipClearErrors) clearErrors()\n    loginFlow.twoFactor = factor\n    updateState('2fa', true)\n  }\n\n  const askTwoFactor = (\n    twoFactor: UserLoginTwoFactorMethods,\n    formData: LoginCredentials,\n  ) => {\n    clearErrors()\n    loginFlow.credentials = formData\n    loginFlow.recoveryCodesAvailable = twoFactor.recoveryCodesAvailable\n    loginFlow.allowedMethods = twoFactor.availableTwoFactorAuthenticationMethods\n    loginFlow.defaultMethod = twoFactor.defaultTwoFactorAuthenticationMethod\n    updateSecondFactor(\n      twoFactor.defaultTwoFactorAuthenticationMethod as EnumTwoFactorAuthenticationMethod,\n      true,\n    )\n  }\n\n  const twoFactorAllowedMethods = computed(() => {\n    return twoFactorMethods.filter((method) =>\n      loginFlow.allowedMethods.includes(method.name),\n    )\n  })\n\n  const twoFactorPlugin = computed(() => {\n    return loginFlow.twoFactor\n      ? twoFactorMethodLookup[loginFlow.twoFactor]\n      : undefined\n  })\n\n  const hasAlternativeLoginMethod = computed(() => {\n    return (\n      twoFactorAllowedMethods.value.length > 1 ||\n      loginFlow.recoveryCodesAvailable\n    )\n  })\n\n  const statePreviousMap = {\n    credentials: null,\n    '2fa': 'credentials',\n    '2fa-select': '2fa',\n    'recovery-code': '2fa-select',\n  } satisfies Record<string, LoginFlow['state'] | null>\n\n  const goBack = () => {\n    clearErrors()\n    const previousState = statePreviousMap[loginFlow.state] || 'credentials'\n    loginFlow.state = previousState\n    // if we go to the first state, reset credentials\n    if (previousState === 'credentials') {\n      loginFlow.credentials = undefined\n    }\n  }\n\n  const cancelAndGoBack = () => {\n    clearErrors()\n    loginFlow.state = 'credentials'\n    loginFlow.credentials = undefined\n  }\n\n  const loginPageTitle = computed(() => {\n    const productName = application.config.product_name\n    if (loginFlow.state === 'credentials') return productName\n    if (loginFlow.state === 'recovery-code') return __('Recovery Code')\n    if (loginFlow.state === '2fa') {\n      return twoFactorPlugin.value?.label ?? productName\n    }\n    return __('Try Another Method')\n  })\n\n  return {\n    loginFlow,\n    hasAlternativeLoginMethod,\n    askTwoFactor,\n    twoFactorPlugin,\n    twoFactorAllowedMethods,\n    updateState,\n    updateSecondFactor,\n    goBack,\n    cancelAndGoBack,\n    statePreviousMap,\n    loginPageTitle,\n  }\n}\n\nexport default useLoginTwoFactor\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TwoFactorMethodInitiateAuthenticationDocument = gql`\n    mutation twoFactorMethodInitiateAuthentication($login: String!, $password: String!, $twoFactorMethod: EnumTwoFactorAuthenticationMethod!) {\n  twoFactorMethodInitiateAuthentication(\n    login: $login\n    password: $password\n    twoFactorMethod: $twoFactorMethod\n  ) {\n    initiationData\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTwoFactorMethodInitiateAuthenticationMutation(options: VueApolloComposable.UseMutationOptions<Types.TwoFactorMethodInitiateAuthenticationMutation, Types.TwoFactorMethodInitiateAuthenticationMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TwoFactorMethodInitiateAuthenticationMutation, Types.TwoFactorMethodInitiateAuthenticationMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TwoFactorMethodInitiateAuthenticationMutation, Types.TwoFactorMethodInitiateAuthenticationMutationVariables>(TwoFactorMethodInitiateAuthenticationDocument, options);\n}\nexport type TwoFactorMethodInitiateAuthenticationMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TwoFactorMethodInitiateAuthenticationMutation, Types.TwoFactorMethodInitiateAuthenticationMutationVariables>;"],"names":["twoFactorMethodLookup","twoFactorMethods","useTwoFactorPlugins","useLoginTwoFactor","clearErrors","application","useApplicationStore","loginFlow","reactive","states","ref","updateState","state","skipClearErrors","updateSecondFactor","factor","askTwoFactor","twoFactor","formData","twoFactorAllowedMethods","computed","method","twoFactorPlugin","hasAlternativeLoginMethod","statePreviousMap","goBack","previousState","cancelAndGoBack","loginPageTitle","productName","_a","TwoFactorMethodInitiateAuthenticationDocument","gql","ErrorsFragmentDoc","useTwoFactorMethodInitiateAuthenticationMutation","options","VueApolloComposable.useMutation"],"mappings":"+OAeA,KAAM,CAAE,sBAAAA,EAAuB,iBAAAC,GAAqBC,IAE9CC,EAAqBC,GAA4B,CACrD,MAAMC,EAAcC,IAEdC,EAAYC,EAAoB,CACpC,MAAO,cACP,eAAgB,CAAC,EACjB,cAAe,OACf,uBAAwB,EAAA,CACzB,EAEKC,EAASC,EAA0B,CAACH,EAAU,KAAK,CAAC,EAEpDI,EAAc,CAACC,EAA2BC,EAAkB,KAAU,CACrEA,GAA6BT,IAC3BK,EAAA,MAAM,KAAKG,CAAK,EACvBL,EAAU,MAAQK,CAAA,EAGdE,EAAqB,CACzBC,EACAF,EAAkB,KACf,CACEA,GAA6BT,IAClCG,EAAU,UAAYQ,EACtBJ,EAAY,MAAO,EAAI,CAAA,EAGnBK,EAAe,CACnBC,EACAC,IACG,CACSd,IACZG,EAAU,YAAcW,EACxBX,EAAU,uBAAyBU,EAAU,uBAC7CV,EAAU,eAAiBU,EAAU,wCACrCV,EAAU,cAAgBU,EAAU,qCACpCH,EACEG,EAAU,qCACV,EAAA,CACF,EAGIE,EAA0BC,EAAS,IAChCnB,EAAiB,OAAQoB,GAC9Bd,EAAU,eAAe,SAASc,EAAO,IAAI,CAAA,CAEhD,EAEKC,EAAkBF,EAAS,IACxBb,EAAU,UACbP,EAAsBO,EAAU,SAAS,EACzC,MACL,EAEKgB,EAA4BH,EAAS,IAEvCD,EAAwB,MAAM,OAAS,GACvCZ,EAAU,sBAEb,EAEKiB,EAAmB,CACvB,YAAa,KACb,MAAO,cACP,aAAc,MACd,gBAAiB,YAAA,EAGbC,EAAS,IAAM,CACPrB,IACZ,MAAMsB,EAAgBF,EAAiBjB,EAAU,KAAK,GAAK,cAC3DA,EAAU,MAAQmB,EAEdA,IAAkB,gBACpBnB,EAAU,YAAc,OAC1B,EAGIoB,EAAkB,IAAM,CAChBvB,IACZG,EAAU,MAAQ,cAClBA,EAAU,YAAc,MAAA,EAGpBqB,EAAiBR,EAAS,IAAM,OAC9B,MAAAS,EAAcxB,EAAY,OAAO,aACnC,OAAAE,EAAU,QAAU,cAAsBsB,EAC1CtB,EAAU,QAAU,gBAAwB,GAAG,eAAe,EAC9DA,EAAU,QAAU,QACfuB,EAAAR,EAAgB,QAAhB,YAAAQ,EAAuB,QAASD,EAElC,GAAG,oBAAoB,CAAA,CAC/B,EAEM,MAAA,CACL,UAAAtB,EACA,0BAAAgB,EACA,aAAAP,EACA,gBAAAM,EACA,wBAAAH,EACA,YAAAR,EACA,mBAAAG,EACA,OAAAW,EACA,gBAAAE,EACA,iBAAAH,EACA,eAAAI,CAAA,CAEJ,ECpHaG,EAAgDC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAavDC,CAAiB,GACP,SAAAC,EAAiDC,EAAmV,GAAI,CAC/Y,OAAAC,EAAmJL,EAA+CI,CAAO,CAClN"}