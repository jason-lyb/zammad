{"version":3,"mappings":"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","names":["useTicketDuplicateDetectionHandler","showTicketDuplicateDetectionDialog","executeHandler","execution","schemaData","changedField","FormHandlerExecution","handleTicketDuplicateDetection","reactivity","data","newFieldData","__default__","to","from","next","ticketCreateEnabled","useTicketCreateView","errorOptions","ErrorStatusCodes","router","useRouter","canSubmit","form","node","isDirty","formSubmit","useForm","multiStepPlugin","setMultiStep","allSteps","activeStep","visitedSteps","stepNames","lastStepName","useMultiStepForm","application","useApplicationStore","onSubmit","ticketArticleSenderTypeField","useTicketCreateArticleType","redirectAfterCreate","internalId","createTicket","isTicketCustomer","useTicketCreate","getFormSchemaGroupSection","stepName","sectionTitle","children","itemsCenter","i18n","ticketTitleSection","EnumObjectManagerObjects","ticketArticleTypeSection","customUserId","userOptions","ref","useUserQuery","r","user","_a","_b","ticketMetaInformationSection","ticketArticleMessageSection","customerSchema","agentSchema","formSchema","defineFormSchema","securityIntegration","computed","additionalCreateNotes","reactive","value","submitButtonDisabled","moveStep","stickyStyles","headerElement","useStickyHeader","bodyElement","isScrolledToBottom","setIsScrolledToBottom","watch","nextTick","useEventListener","onBeforeRouteLeave","waitForConfirmation","useConfirmation","signatureHandling","useTicketSignature","ticketDuplicateDetectionDialog","useDialog","__vitePreload","changedFields"],"ignoreList":[],"sources":["../../../../../app/frontend/apps/mobile/pages/ticket/composable/useTicketDuplicateDetectionHandler.ts","../../../../../app/frontend/apps/mobile/pages/ticket/views/TicketCreate.vue"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { FormHandlerExecution } from '#shared/components/Form/types.ts'\nimport type {\n  ChangedField,\n  FormHandler,\n  FormHandlerFunction,\n  ReactiveFormSchemData,\n} from '#shared/components/Form/types.ts'\nimport type { TicketDuplicateDetectionItem } from '#shared/entities/ticket/types.ts'\n\nexport interface TicketDuplicateDetectionPayload {\n  count: number\n  items: TicketDuplicateDetectionItem[]\n}\n\nexport const useTicketDuplicateDetectionHandler = (\n  showTicketDuplicateDetectionDialog: (\n    data: TicketDuplicateDetectionPayload,\n  ) => void,\n): FormHandler => {\n  const executeHandler = (\n    execution: FormHandlerExecution,\n    schemaData: ReactiveFormSchemData,\n    changedField?: ChangedField,\n  ) => {\n    if (!schemaData.fields.ticket_duplicate_detection) return false\n    if (\n      execution === FormHandlerExecution.FieldChange &&\n      (!changedField || changedField.name !== 'ticket_duplicate_detection')\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  const handleTicketDuplicateDetection: FormHandlerFunction = async (\n    execution,\n    reactivity,\n    data,\n  ) => {\n    const { changedField } = data\n    const { schemaData } = reactivity\n\n    if (!executeHandler(execution, schemaData, changedField)) return\n\n    const newFieldData =\n      changedField?.newValue as unknown as TicketDuplicateDetectionPayload\n\n    if (!newFieldData?.count) return\n\n    showTicketDuplicateDetectionDialog(newFieldData)\n  }\n\n  return {\n    execution: [FormHandlerExecution.Initial, FormHandlerExecution.FieldChange],\n    callback: handleTicketDuplicateDetection,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { useEventListener } from '@vueuse/core'\nimport { computed, nextTick, reactive, ref, watch } from 'vue'\nimport { onBeforeRouteLeave, useRouter } from 'vue-router'\n\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSubmitData,\n  FormSchemaNode,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { useMultiStepForm } from '#shared/components/Form/useMultiStepForm.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useStickyHeader } from '#shared/composables/useStickyHeader.ts'\nimport { useTicketSignature } from '#shared/composables/useTicketSignature.ts'\nimport { useTicketCreate } from '#shared/entities/ticket/composables/useTicketCreate.ts'\nimport { useTicketCreateArticleType } from '#shared/entities/ticket/composables/useTicketCreateArticleType.ts'\nimport { useTicketCreateView } from '#shared/entities/ticket/composables/useTicketCreateView.ts'\nimport { useTicketFormOrganizationHandler } from '#shared/entities/ticket/composables/useTicketFormOrganizationHandler.ts'\nimport type { TicketFormData } from '#shared/entities/ticket/types.ts'\nimport { useUserQuery } from '#shared/entities/user/graphql/queries/user.api.ts'\nimport { defineFormSchema } from '#shared/form/defineFormSchema.ts'\nimport {\n  EnumFormUpdaterId,\n  EnumObjectManagerObjects,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport { errorOptions } from '#shared/router/error.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\nimport { ErrorStatusCodes } from '#shared/types/error.ts'\n\nimport CommonButton from '#mobile/components/CommonButton/CommonButton.vue'\nimport CommonStepper from '#mobile/components/CommonStepper/CommonStepper.vue'\nimport LayoutHeader from '#mobile/components/layout/LayoutHeader.vue'\nimport { useDialog } from '#mobile/composables/useDialog.ts'\n\nimport {\n  useTicketDuplicateDetectionHandler,\n  type TicketDuplicateDetectionPayload,\n} from '../composable/useTicketDuplicateDetectionHandler.ts'\n\nconst router = useRouter()\n\n// TODO: Add meta header with selected ticket create article type.\n\nconst { canSubmit, form, node, isDirty, formSubmit } = useForm()\n\nconst {\n  multiStepPlugin,\n  setMultiStep,\n  allSteps,\n  activeStep,\n  visitedSteps,\n  stepNames,\n  lastStepName,\n} = useMultiStepForm(node)\n\nconst application = useApplicationStore()\n\nconst onSubmit = () => {\n  setMultiStep()\n}\n\nconst { ticketArticleSenderTypeField } = useTicketCreateArticleType({\n  onSubmit,\n  buttons: true,\n})\n\nconst redirectAfterCreate = (internalId?: number) => {\n  if (internalId) {\n    router.replace(`/tickets/${internalId}`)\n  } else {\n    router.replace({ name: 'Home' })\n  }\n}\n\nconst { createTicket, isTicketCustomer } = useTicketCreate(\n  form,\n  redirectAfterCreate,\n)\n\nconst getFormSchemaGroupSection = (\n  stepName: string,\n  sectionTitle: string,\n  children: FormSchemaNode[],\n  itemsCenter = false,\n) => {\n  return {\n    isLayout: true,\n    element: 'section',\n    attrs: {\n      style: {\n        if: `$activeStep !== \"${stepName}\"`,\n        then: 'display: none;',\n      },\n      class: {\n        'flex flex-col h-full min-h-[calc(100vh_-_15rem)]': true,\n        'items-center': itemsCenter,\n      },\n    },\n    children: [\n      {\n        type: 'group',\n        name: stepName,\n        isGroupOrList: true,\n        plugins: [multiStepPlugin],\n        children: [\n          {\n            isLayout: true,\n            element: 'h4',\n            attrs: {\n              class: 'my-10 text-base text-center',\n            },\n            children: i18n.t(sectionTitle),\n          },\n          ...children,\n        ],\n      },\n    ],\n  }\n}\n\nconst ticketTitleSection = getFormSchemaGroupSection(\n  'ticketTitle',\n  __('Set a title for your ticket'),\n  [\n    {\n      name: 'title',\n      required: true,\n      object: EnumObjectManagerObjects.Ticket,\n      screen: 'create_top',\n      outerClass:\n        '$reset formkit-outer w-full grow justify-center flex items-center flex-col',\n      wrapperClass: '$reset formkit-disabled:opacity-30 flex w-full',\n      labelClass: '$reset sr-only',\n      blockClass: '$reset flex w-full',\n      innerClass: '$reset flex justify-center items-center px-8 w-full',\n      messagesClass: 'pt-2',\n      inputClass:\n        '$reset formkit-input block bg-transparent grow border-b-[0.5px] border-white outline-hidden text-center text-xl placeholder:text-white placeholder:text-opacity-50',\n      props: {\n        placeholder: __('Title'),\n        onSubmit,\n      },\n    },\n  ],\n  true,\n)\n\nconst ticketArticleTypeSection = getFormSchemaGroupSection(\n  'ticketArticleType',\n  __('Select the type of ticket your are creating'),\n  [\n    {\n      ...ticketArticleSenderTypeField,\n      outerClass: 'w-full flex grow items-center',\n      fieldsetClass: 'grow px-4',\n    },\n    {\n      if: '$existingAdditionalCreateNotes() && $getAdditionalCreateNote($values.articleSenderType) !== undefined',\n      isLayout: true,\n      element: 'p',\n      attrs: {\n        class: 'my-10 text-base text-center text-yellow',\n      },\n      children: '$getAdditionalCreateNote($values.articleSenderType)',\n    },\n  ],\n  true,\n)\n\nconst locationParams = new URL(window.location.href).searchParams\nconst customUserId = locationParams.get('customer_id') || undefined\n\nconst userOptions = ref<unknown[]>([])\n\nconst userQuery = useUserQuery(\n  () => ({\n    userInternalId: Number(customUserId),\n    secondaryOrganizationsCount: 3,\n  }),\n  {\n    // we probably opened this because user was already loaded user on another page,\n    // so we should try to get it from cache first, but if someone passed down id\n    // we need to still provide correct value\n    fetchPolicy: 'cache-first',\n    enabled: !!customUserId,\n  },\n)\nuserQuery.onResult((r) => {\n  if (r.loading) return\n  const user = r.data?.user\n  if (!user) {\n    userOptions.value = []\n    return\n  }\n  userOptions.value = [\n    {\n      value: user.internalId,\n      label: user.fullname || user.phone,\n      heading: user.organization?.name,\n      user,\n    },\n  ]\n})\n\nconst ticketMetaInformationSection = getFormSchemaGroupSection(\n  'ticketMetaInformation',\n  __('Additional information'),\n  [\n    {\n      isLayout: true,\n      component: 'FormGroup',\n      children: [\n        {\n          name: 'ticket_duplicate_detection',\n          type: 'hidden',\n          value: {\n            count: 0,\n            items: [],\n          },\n        },\n        {\n          screen: 'create_top',\n          object: EnumObjectManagerObjects.Ticket,\n          name: 'customer_id',\n          value: customUserId ? Number(customUserId) : undefined,\n          props: {\n            options: userOptions,\n          },\n        },\n        {\n          screen: 'create_top',\n          object: EnumObjectManagerObjects.Ticket,\n        },\n        // Because of the current field screen settings in the backend\n        // seed we need to add this manually.\n        {\n          if: '$values.articleSenderType === \"email-out\"',\n          name: 'cc',\n          label: __('CC'),\n          type: 'recipient',\n          props: {\n            multiple: true,\n          },\n        },\n      ],\n    },\n    {\n      isLayout: true,\n      component: 'FormGroup',\n      children: [\n        {\n          screen: 'create_middle',\n          object: EnumObjectManagerObjects.Ticket,\n        },\n      ],\n    },\n    {\n      isLayout: true,\n      component: 'FormGroup',\n      children: [\n        {\n          screen: 'create_bottom',\n          object: EnumObjectManagerObjects.Ticket,\n        },\n      ],\n    },\n  ],\n)\n\nconst ticketArticleMessageSection = getFormSchemaGroupSection(\n  'ticketArticleMessage',\n  __('Add a message'),\n  [\n    {\n      isLayout: true,\n      component: 'FormGroup',\n      children: [\n        {\n          if: '$securityIntegration === true && $values.articleSenderType === \"email-out\"',\n          name: 'security',\n          label: __('Security'),\n          type: 'security',\n        },\n        {\n          name: 'body',\n          screen: 'create_top',\n          object: EnumObjectManagerObjects.TicketArticle,\n          props: {\n            meta: {\n              mentionText: {\n                customerNodeName: 'customer_id',\n                groupNodeName: 'group_id',\n              },\n              mentionUser: {\n                groupNodeName: 'group_id',\n              },\n              mentionKnowledgeBase: {\n                attachmentsNodeName: 'attachments',\n              },\n            },\n          },\n          triggerFormUpdater: false,\n        },\n      ],\n    },\n    {\n      isLayout: true,\n      component: 'FormGroup',\n      children: [\n        {\n          type: 'file',\n          name: 'attachments',\n          label: __('Attachment'),\n          labelSrOnly: true,\n          props: {\n            multiple: true,\n          },\n        },\n      ],\n    },\n  ],\n)\n\nconst customerSchema = [\n  ticketTitleSection,\n  ticketMetaInformationSection,\n  ticketArticleMessageSection,\n]\n\nconst agentSchema = [\n  ticketTitleSection,\n  ticketArticleTypeSection,\n  ticketMetaInformationSection,\n  ticketArticleMessageSection,\n]\n\nconst formSchema = defineFormSchema(\n  isTicketCustomer.value ? customerSchema : agentSchema,\n)\n\nconst securityIntegration = computed<boolean>(\n  () =>\n    (application.config.smime_integration ||\n      application.config.pgp_integration) ??\n    false,\n)\n\nconst additionalCreateNotes = computed(\n  () =>\n    (application.config.ui_ticket_create_notes as Record<string, string>) || {},\n)\n\nconst schemaData = reactive({\n  activeStep,\n  visitedSteps,\n  allSteps,\n  securityIntegration,\n  existingAdditionalCreateNotes: () => {\n    return Object.keys(additionalCreateNotes).length > 0\n  },\n  getAdditionalCreateNote: (value: string) => {\n    return i18n.t(additionalCreateNotes.value[value])\n  },\n})\n\nconst submitButtonDisabled = computed(() => {\n  return (\n    !canSubmit.value ||\n    (activeStep.value !== lastStepName.value &&\n      visitedSteps.value.length < stepNames.value.length)\n  )\n})\n\nconst moveStep = () => {\n  if (activeStep.value === lastStepName.value) {\n    formSubmit()\n    return\n  }\n  setMultiStep()\n}\n\nconst { stickyStyles, headerElement } = useStickyHeader()\n\nconst bodyElement = ref<HTMLElement>()\n\nconst isScrolledToBottom = ref(true)\n\nconst setIsScrolledToBottom = () => {\n  isScrolledToBottom.value =\n    window.innerHeight +\n      document.documentElement.scrollTop -\n      (headerElement.value?.clientHeight || 0) >=\n    (bodyElement.value?.scrollHeight || 0)\n}\n\nwatch(\n  () => activeStep.value,\n  () => {\n    nextTick(() => {\n      setIsScrolledToBottom()\n    })\n  },\n)\n\nuseEventListener('scroll', setIsScrolledToBottom)\nuseEventListener('resize', setIsScrolledToBottom)\n\nonBeforeRouteLeave(async () => {\n  if (!isDirty.value) return true\n\n  const { waitForConfirmation } = useConfirmation()\n\n  const confirmed = await waitForConfirmation(\n    __('Are you sure? You have unsaved changes that will get lost.'),\n    {\n      buttonLabel: __('Discard changes'),\n      buttonVariant: 'danger',\n    },\n  )\n\n  return confirmed\n})\n\nconst { signatureHandling } = useTicketSignature()\n\nconst ticketDuplicateDetectionDialog = useDialog({\n  name: 'duplicate-ticket-detection',\n  component: () =>\n    import('#mobile/components/Ticket/TicketDuplicateDetectionDialog.vue'),\n})\n\nconst showTicketDuplicateDetectionDialog = (\n  data: TicketDuplicateDetectionPayload,\n) => {\n  ticketDuplicateDetectionDialog.open({\n    name: 'duplicate-ticket-detection',\n    tickets: data.items,\n  })\n}\n\nconst changedFields = reactive({\n  // Workaround until the object attribute for body is required so core worklow is returning it correctly.\n  body: {\n    required: true,\n  },\n})\n</script>\n\n<script lang=\"ts\">\nexport default {\n  beforeRouteEnter(to, from, next) {\n    const { ticketCreateEnabled } = useTicketCreateView()\n\n    if (!ticketCreateEnabled.value) {\n      errorOptions.value = {\n        title: __('Forbidden'),\n        message: __('Creating new tickets via web is disabled.'),\n        statusCode: ErrorStatusCodes.Forbidden,\n        route: to.fullPath,\n      }\n\n      next({\n        name: 'Error',\n        query: {\n          redirect: '1',\n        },\n        replace: true,\n      })\n\n      return\n    }\n\n    next()\n  },\n}\n</script>\n\n<template>\n  <LayoutHeader\n    ref=\"headerElement\"\n    class=\"h-16!\"\n    :style=\"stickyStyles.header\"\n    back-url=\"/\"\n    :title=\"__('Create Ticket')\"\n  >\n    <template #after>\n      <CommonButton\n        variant=\"submit\"\n        form=\"ticket-create\"\n        type=\"submit\"\n        :disabled=\"submitButtonDisabled\"\n        transparent-background\n      >\n        {{ $t('Create') }}\n      </CommonButton>\n    </template>\n  </LayoutHeader>\n  <div\n    ref=\"bodyElement\"\n    :style=\"stickyStyles.body\"\n    class=\"flex h-full flex-col px-4\"\n  >\n    <Form\n      id=\"ticket-create\"\n      ref=\"form\"\n      class=\"pb-32 text-left\"\n      :schema=\"formSchema\"\n      :handlers=\"[\n        useTicketFormOrganizationHandler(),\n        signatureHandling('body'),\n        useTicketDuplicateDetectionHandler(showTicketDuplicateDetectionDialog),\n      ]\"\n      :flatten-form-groups=\"Object.keys(allSteps)\"\n      :schema-data=\"schemaData\"\n      :change-fields=\"changedFields\"\n      :form-updater-id=\"EnumFormUpdaterId.FormUpdaterUpdaterTicketCreate\"\n      should-autofocus\n      use-object-attributes\n      @submit=\"createTicket($event as FormSubmitData<TicketFormData>)\"\n    />\n  </div>\n  <footer\n    :class=\"{\n      'bg-gray-light backdrop-blur-lg': !isScrolledToBottom,\n    }\"\n    class=\"pb-safe fixed bottom-0 z-10 w-full px-4 transition\"\n  >\n    <FormKit\n      :variant=\"lastStepName === activeStep ? 'submit' : 'primary'\"\n      type=\"button\"\n      outer-class=\"mt-4 mb-2\"\n      :disabled=\"lastStepName === activeStep && submitButtonDisabled\"\n      wrapper-class=\"flex grow justify-center items-center\"\n      input-class=\"py-2 px-4 w-full h-14 text-lg rounded-xl select-none\"\n      @click=\"moveStep()\"\n    >\n      {{ lastStepName === activeStep ? $t('Create ticket') : $t('Continue') }}\n    </FormKit>\n    <CommonStepper\n      v-model=\"activeStep\"\n      :steps=\"allSteps\"\n      class=\"mt-4 mb-8 px-8\"\n    />\n  </footer>\n</template>\n"],"file":"assets/TicketCreate-TsDjatnK.js"}