{"version":3,"file":"PasswordResetVerify-BzEm04K4.js","sources":["../../../../../app/frontend/apps/desktop/pages/authentication/graphql/mutations/userPasswordResetUpdate.api.ts","../../../../../app/frontend/apps/desktop/pages/authentication/graphql/mutations/userPasswordResetVerify.api.ts","../../../../../app/frontend/apps/desktop/pages/authentication/views/PasswordResetVerify.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserPasswordResetUpdateDocument = gql`\n    mutation userPasswordResetUpdate($token: String!, $password: String!) {\n  userPasswordResetUpdate(token: $token, password: $password) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserPasswordResetUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.UserPasswordResetUpdateMutation, Types.UserPasswordResetUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserPasswordResetUpdateMutation, Types.UserPasswordResetUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserPasswordResetUpdateMutation, Types.UserPasswordResetUpdateMutationVariables>(UserPasswordResetUpdateDocument, options);\n}\nexport type UserPasswordResetUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserPasswordResetUpdateMutation, Types.UserPasswordResetUpdateMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserPasswordResetVerifyDocument = gql`\n    mutation userPasswordResetVerify($token: String!) {\n  userPasswordResetVerify(token: $token) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserPasswordResetVerifyMutation(options: VueApolloComposable.UseMutationOptions<Types.UserPasswordResetVerifyMutation, Types.UserPasswordResetVerifyMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserPasswordResetVerifyMutation, Types.UserPasswordResetVerifyMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserPasswordResetVerifyMutation, Types.UserPasswordResetVerifyMutationVariables>(UserPasswordResetVerifyDocument, options);\n}\nexport type UserPasswordResetVerifyMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserPasswordResetVerifyMutation, Types.UserPasswordResetVerifyMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { ref, onBeforeMount } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSchemaNode,\n  FormSubmitData,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { EnumPublicLinksScreen } from '#shared/graphql/types.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport CommonPublicLinks from '#desktop/components/CommonPublicLinks/CommonPublicLinks.vue'\nimport LayoutPublicPage from '#desktop/components/layout/LayoutPublicPage/LayoutPublicPage.vue'\n\nimport { useUserPasswordResetUpdateMutation } from '../graphql/mutations/userPasswordResetUpdate.api.ts'\nimport { useUserPasswordResetVerifyMutation } from '../graphql/mutations/userPasswordResetVerify.api.ts'\n\ndefineOptions({\n  beforeRouteEnter(to) {\n    const application = useApplicationStore()\n    if (!application.config.user_lost_password) {\n      return to.redirectedFrom ? false : '/'\n    }\n    return true\n  },\n})\n\ninterface Props {\n  token?: string\n}\n\nconst props = defineProps<Props>()\n\ninterface FormValues {\n  password: string\n  confirmPassword: string\n}\n\nconst formSchema: FormSchemaNode[] = [\n  {\n    type: 'password',\n    label: __('Password'),\n    name: 'password',\n    outerClass: 'col-span-1',\n    required: true,\n    props: {\n      maxLength: 1001,\n    },\n  },\n  {\n    type: 'password',\n    label: __('Confirm password'),\n    name: 'password_confirm',\n    outerClass: 'col-span-1',\n    validation: 'confirm',\n    props: {\n      maxLength: 1001,\n    },\n    required: true,\n  },\n]\n\nconst { form, isDisabled } = useForm()\n\nconst errorMessage = ref('')\nconst loading = ref(true)\nconst canResetPassword = ref(false)\n\nconst { notify } = useNotifications()\nconst router = useRouter()\n\nonBeforeMount(() => {\n  if (!props.token) {\n    loading.value = false\n    canResetPassword.value = false\n    errorMessage.value = __(\n      'The token could not be verified. Please contact your administrator.',\n    )\n    return\n  }\n\n  const userSignupVerify = new MutationHandler(\n    useUserPasswordResetVerifyMutation({\n      variables: { token: props.token },\n    }),\n    {\n      errorShowNotification: false,\n    },\n  )\n\n  userSignupVerify\n    .send()\n    .then(() => {\n      canResetPassword.value = true\n      errorMessage.value = ''\n    })\n    .catch(() => {\n      canResetPassword.value = false\n      errorMessage.value = __('The provided token is invalid.')\n    })\n    .finally(() => {\n      loading.value = false\n    })\n})\n\nconst resetPasswordHandler = new MutationHandler(\n  useUserPasswordResetUpdateMutation(),\n  { errorShowNotification: false },\n)\n\nconst updatePassword = async (form: FormSubmitData<FormValues>) => {\n  await resetPasswordHandler.send({\n    token: props.token!,\n    password: form.password,\n  })\n\n  notify({\n    id: 'password-change',\n    type: NotificationTypes.Success,\n    message: __('Woo hoo! Your password has been changed!'),\n  })\n  router.replace('/login')\n}\n\nconst goToLogin = () => {\n  router.replace('/login')\n}\n</script>\n\n<template>\n  <LayoutPublicPage box-size=\"medium\" :title=\"__('Choose your new password')\">\n    <CommonLoader :loading=\"loading\" :error=\"errorMessage\" />\n    <Form\n      v-if=\"canResetPassword\"\n      id=\"password-reset-verify\"\n      ref=\"form\"\n      form-class=\"mb-2.5 grid grid-cols-2 gap-y-2.5 gap-x-3\"\n      :schema=\"formSchema\"\n      @submit=\"updatePassword($event as FormSubmitData<FormValues>)\"\n    />\n\n    <template #boxActions>\n      <CommonButton\n        variant=\"secondary\"\n        size=\"medium\"\n        :disabled=\"isDisabled\"\n        @click=\"goToLogin()\"\n      >\n        {{ $t('Cancel & Go Back') }}\n      </CommonButton>\n\n      <CommonButton\n        v-if=\"canResetPassword\"\n        type=\"submit\"\n        variant=\"submit\"\n        size=\"medium\"\n        form=\"password-reset-verify\"\n        :disabled=\"isDisabled\"\n      >\n        {{ $t('Submit') }}\n      </CommonButton>\n    </template>\n    <template #bottomContent>\n      <CommonPublicLinks :screen=\"EnumPublicLinksScreen.PasswordReset\" />\n    </template>\n  </LayoutPublicPage>\n</template>\n"],"names":["UserPasswordResetUpdateDocument","gql","ErrorsFragmentDoc","useUserPasswordResetUpdateMutation","options","VueApolloComposable.useMutation","UserPasswordResetVerifyDocument","useUserPasswordResetVerifyMutation","props","__props","formSchema","form","isDisabled","useForm","errorMessage","ref","loading","canResetPassword","notify","useNotifications","router","useRouter","onBeforeMount","MutationHandler","resetPasswordHandler","updatePassword","NotificationTypes","goToLogin"],"mappings":"07CAQO,MAAMA,EAAkCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASzCC,CAAiB,GACP,SAAAC,EAAmCC,EAA2R,GAAI,CACzU,OAAAC,EAAuHL,EAAiCI,CAAO,CACxK,CCZO,MAAME,EAAkCL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASzCC,CAAiB,GACP,SAAAK,EAAmCH,EAA2R,GAAI,CACzU,OAAAC,EAAuHC,EAAiCF,CAAO,CACxK,yJCoBA,MAAMI,EAAQC,EAORC,EAA+B,CACnC,CACE,KAAM,WACN,MAAO,GAAG,UAAU,EACpB,KAAM,WACN,WAAY,aACZ,SAAU,GACV,MAAO,CACL,UAAW,IACb,CACF,EACA,CACE,KAAM,WACN,MAAO,GAAG,kBAAkB,EAC5B,KAAM,mBACN,WAAY,aACZ,WAAY,UACZ,MAAO,CACL,UAAW,IACb,EACA,SAAU,EACZ,CAAA,EAGI,CAAE,KAAAC,EAAM,WAAAC,CAAW,EAAIC,EAAQ,EAE/BC,EAAeC,EAAI,EAAE,EACrBC,EAAUD,EAAI,EAAI,EAClBE,EAAmBF,EAAI,EAAK,EAE5B,CAAE,OAAAG,GAAWC,IACbC,EAASC,IAEfC,EAAc,IAAM,CACd,GAAA,CAACd,EAAM,MAAO,CAChBQ,EAAQ,MAAQ,GAChBC,EAAiB,MAAQ,GACzBH,EAAa,MAAQ,GACnB,qEAAA,EAEF,MACF,CAEyB,IAAIS,EAC3BhB,EAAmC,CACjC,UAAW,CAAE,MAAOC,EAAM,KAAM,CAAA,CACjC,EACD,CACE,sBAAuB,EACzB,CAAA,EAIC,OACA,KAAK,IAAM,CACVS,EAAiB,MAAQ,GACzBH,EAAa,MAAQ,EAAA,CACtB,EACA,MAAM,IAAM,CACXG,EAAiB,MAAQ,GACZH,EAAA,MAAQ,GAAG,gCAAgC,CAAA,CACzD,EACA,QAAQ,IAAM,CACbE,EAAQ,MAAQ,EAAA,CACjB,CAAA,CACJ,EAED,MAAMQ,EAAuB,IAAID,EAC/BpB,EAAmC,EACnC,CAAE,sBAAuB,EAAM,CAAA,EAG3BsB,EAAiB,MAAOd,GAAqC,CACjE,MAAMa,EAAqB,KAAK,CAC9B,MAAOhB,EAAM,MACb,SAAUG,EAAK,QAAA,CAChB,EAEMO,EAAA,CACL,GAAI,kBACJ,KAAMQ,EAAkB,QACxB,QAAS,GAAG,0CAA0C,CAAA,CACvD,EACDN,EAAO,QAAQ,QAAQ,CAAA,EAGnBO,EAAY,IAAM,CACtBP,EAAO,QAAQ,QAAQ,CAAA"}