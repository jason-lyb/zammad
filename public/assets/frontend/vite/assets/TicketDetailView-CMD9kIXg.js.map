{"version":3,"mappings":"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","names":["TicketWithMentionLimitDocument","gql","TicketAttributesFragmentDoc","TicketMentionFragmentDoc","useTicketWithMentionLimitQuery","variables","options","VueApolloComposable.useQuery","emit","__emit","bannerTransitionDuration","behavior","scrollDown","useTicketArticleReply","ticket","form","needSpaceForSaveBanner","newTicketArticleRequested","ref","newTicketArticlePresent","articleFormGroupNode","computed","_a","isArticleFormGroupValid","_b","articleReplyDialog","useDialog","__vitePreload","rememberArticleFormGroup","route","useRoute","resetDirtyTicketState","stateId","isDefaultFollowUpStateSet","updateFormLocation","rememberArticle","TicketLiveUserDeleteDocument","ErrorsFragmentDoc","useTicketLiveUserDeleteMutation","VueApolloComposable.useMutation","TicketLiveUserUpsertDocument","useTicketLiveUserUpsertMutation","useTicketLiveUser","ticketInternalId","isTicketAgent","editingForm","liveUserList","useTicketLiveUserList","EnumTaskbarApp","upsertMutation","MutationHandler","deleteMutation","updateLiveUser","editing","ensureGraphqlId","noop","deleteLiveUser","onBeforeRouteUpdate","to","from","internalToId","internalFromId","onBeforeRouteLeave","_","internalId","onBeforeMount","watch","canSubmit","MENTIONS_LIMIT","props","__props","ticketId","convertToGraphQLId","createQueryErrorHandler","useErrorHandler","ticketQuery","QueryHandler","ticketResult","TicketUpdatesDocument","formLocation","formVisible","isDirty","formSubmit","formReset","useForm","initialTicketValue","isTicketFormGroupValid","editTicket","useTicketEdit","currentArticleType","ticketSchema","articleSchema","securityIntegration","isTicketEditable","articleTypeHandler","articleTypeSelectHandler","useTicketEditForm","openArticleReplyDialog","closeArticleReplyDialog","ticketEditSchema","useTicketView","notify","useNotifications","saveTicketForm","formData","data","cloneDeep","result","EnumUserErrorException","NotificationTypes","values","formNodeValues","nextTick","errors","UserError","newLocation","isFormValid","showArticleReplyDialog","toRef","refetchingStatus","updateRefetchingStatus","status","scrolledToBottom","scrollDownState","newArticlesIds","reactive","provide","TICKET_INFORMATION_SYMBOL","useOnlineNotificationSeen","waitForConfirmation","useConfirmation","router","useRouter","submitForm","ticketEditSchemaData","commonSelectOpened","useCommonSelect","showReplyButton","showScrollDown","showBottomBanner","dialogs","getOpenedDialogs"],"ignoreList":[],"sources":["../../../../../app/frontend/apps/mobile/entities/ticket/graphql/queries/ticketWithMentionLimit.api.ts","../../../../../app/frontend/apps/mobile/pages/ticket/components/TicketDetailView/TicketDetailViewActions.vue","../../../../../app/frontend/apps/mobile/pages/ticket/composable/useTicketArticleReply.ts","../../../../../app/frontend/apps/mobile/pages/ticket/graphql/mutations/live-user/delete.api.ts","../../../../../app/frontend/apps/mobile/pages/ticket/graphql/mutations/live-user/ticketLiveUserUpsert.api.ts","../../../../../app/frontend/apps/mobile/pages/ticket/composable/useTicketLiveUser.ts","../../../../../app/frontend/apps/mobile/pages/ticket/views/TicketDetailView.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketAttributesFragmentDoc } from '../../../../../../shared/entities/ticket/graphql/fragments/ticketAttributes.api';\nimport { TicketMentionFragmentDoc } from '../../../../../../shared/entities/ticket/graphql/fragments/ticketMention.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketWithMentionLimitDocument = gql`\n    query ticketWithMentionLimit($ticketId: ID, $ticketInternalId: Int, $ticketNumber: String, $mentionsCount: Int = null) {\n  ticket(\n    ticket: {ticketId: $ticketId, ticketInternalId: $ticketInternalId, ticketNumber: $ticketNumber}\n  ) {\n    ...ticketAttributes\n    createArticleType {\n      id\n      name\n    }\n    mentions(first: $mentionsCount) {\n      totalCount\n      edges {\n        node {\n          ...ticketMention\n        }\n        cursor\n      }\n    }\n  }\n}\n    ${TicketAttributesFragmentDoc}\n${TicketMentionFragmentDoc}`;\nexport function useTicketWithMentionLimitQuery(variables: Types.TicketWithMentionLimitQueryVariables | VueCompositionApi.Ref<Types.TicketWithMentionLimitQueryVariables> | ReactiveFunction<Types.TicketWithMentionLimitQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>(TicketWithMentionLimitDocument, variables, options);\n}\nexport function useTicketWithMentionLimitLazyQuery(variables: Types.TicketWithMentionLimitQueryVariables | VueCompositionApi.Ref<Types.TicketWithMentionLimitQueryVariables> | ReactiveFunction<Types.TicketWithMentionLimitQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>(TicketWithMentionLimitDocument, variables, options);\n}\nexport type TicketWithMentionLimitQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketWithMentionLimitQuery, Types.TicketWithMentionLimitQueryVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\ndefineProps<{\n  formInvalid: boolean\n  newRepliesCount: number\n  newArticlePresent: boolean\n  canReply: boolean\n  canSave: boolean\n  canScrollDown: boolean\n  hidden: boolean\n}>()\n\nconst emit = defineEmits<{\n  reply: []\n  save: []\n}>()\n\n// Turn off transitions in test mode.\nconst bannerTransitionDuration = VITE_TEST_MODE ? 0 : { enter: 300, leave: 200 }\n\n// Switch to instant scrolling in test mode as it may interfere with subsequent scroll actions in headless mode.\nconst behavior = VITE_TEST_MODE ? 'instant' : 'smooth'\n\nconst scrollDown = () => {\n  window.scrollTo({ top: document.body.scrollHeight, behavior })\n}\n</script>\n\n<template>\n  <Transition\n    :duration=\"bannerTransitionDuration\"\n    enter-from-class=\"translate-y-full\"\n    enter-active-class=\"translate-y-0\"\n    enter-to-class=\"-translate-y-1/3\"\n    leave-from-class=\"-translate-y-1/3\"\n    leave-active-class=\"translate-y-full\"\n    leave-to-class=\"translate-y-full\"\n  >\n    <div\n      v-if=\"!hidden\"\n      class=\"pb-safe-1 fixed bottom-0 z-10 bg-gray-600/90 px-2 text-white backdrop-blur-lg transition ltr:right-0 ltr:left-0 rtl:right-0 rtl:left-0\"\n    >\n      <div class=\"relative flex flex-1 items-center gap-2 p-2\">\n        <div class=\"flex-1\">\n          <Transition\n            :duration=\"bannerTransitionDuration\"\n            enter-from-class=\"rtl:translate-x-20 ltr:-translate-x-20\"\n            enter-to-class=\"rtl:-translate-x-0 ltr:translate-x-0\"\n            leave-from-class=\"rtl:-translate-x-0 ltr:translate-x-0\"\n            leave-to-class=\"rtl:translate-x-20 ltr:-translate-x-20\"\n          >\n            <button\n              v-if=\"canScrollDown\"\n              class=\"bg-blue relative flex h-8 cursor-pointer items-center rounded-2xl px-2 transition\"\n              :aria-label=\"\n                newRepliesCount\n                  ? $t('Scroll down to see %s new replies', newRepliesCount)\n                  : $t('Scroll down')\n              \"\n              @click=\"scrollDown\"\n            >\n              <CommonIcon name=\"arrow-down\" size=\"small\" decorative />\n              <span\n                v-if=\"newRepliesCount\"\n                aria-hidden=\"true\"\n                data-test-id=\"new-replies-count\"\n                class=\"bg-yellow absolute top-0 z-10 h-4 min-w-[1rem] rounded-full px-1 text-center text-xs text-black ltr:ml-4 rtl:mr-4\"\n              >\n                {{ newRepliesCount }}\n              </span>\n            </button>\n          </Transition>\n        </div>\n\n        <div class=\"flex gap-2\">\n          <FormKit\n            v-if=\"canReply\"\n            variant=\"secondary\"\n            input-class=\"flex gap-1 flex justify-center items-center font-semibold text-base px-3 py-1 !text-white formkit-variant-secondary:bg-blue rounded select-none\"\n            type=\"button\"\n            @click.prevent=\"emit('reply')\"\n          >\n            <div>\n              <CommonIcon name=\"chat\" size=\"small\" decorative />\n            </div>\n            <span class=\"line-clamp-1 break-all\">\n              {{ newArticlePresent ? $t('Edit reply') : $t('Add reply') }}\n            </span>\n          </FormKit>\n          <FormKit\n            v-if=\"canSave\"\n            variant=\"submit\"\n            input-class=\"font-semibold text-base px-4 py-1 !text-black formkit-variant-primary:bg-yellow rounded select-none\"\n            wrapper-class=\"flex justify-center items-center\"\n            type=\"button\"\n            form=\"form-ticket-edit\"\n            @click.prevent=\"emit('save')\"\n          >\n            {{ $t('Save') }}\n          </FormKit>\n          <button v-if=\"formInvalid\" @click=\"emit('save')\">\n            <span\n              role=\"status\"\n              :aria-label=\"$t('Validation failed')\"\n              class=\"bg-red absolute bottom-7 h-5 w-5 cursor-pointer rounded-full text-center text-xs leading-5 text-black ltr:right-2 rtl:left-2\"\n            >\n              <CommonIcon\n                class=\"mx-auto h-5\"\n                name=\"close\"\n                size=\"tiny\"\n                decorative\n              />\n            </span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </Transition>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, ref } from 'vue'\nimport { useRoute } from 'vue-router'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\n\nimport { useDialog } from '#mobile/composables/useDialog.ts'\n\nimport type { Ref, ShallowRef } from 'vue'\n\ninterface ReplyDialogOptions {\n  updateFormLocation: (location: string) => void\n}\n\nexport const useTicketArticleReply = (\n  ticket: Ref<TicketById | undefined>,\n  form: ShallowRef<FormRef | undefined>,\n  needSpaceForSaveBanner: Ref<boolean>,\n) => {\n  const newTicketArticleRequested = ref(false)\n  const newTicketArticlePresent = ref(false)\n\n  const articleFormGroupNode = computed(() => {\n    if (!newTicketArticlePresent.value && !newTicketArticleRequested.value)\n      return undefined\n\n    return form.value?.getNodeByName('article')\n  })\n\n  const isArticleFormGroupValid = computed(() => {\n    return !!articleFormGroupNode.value?.context?.state.valid\n  })\n\n  const articleReplyDialog = useDialog({\n    name: 'ticket-article-reply',\n    component: () =>\n      import(\n        '#mobile/pages/ticket/components/TicketDetailView/ArticleReplyDialog.vue'\n      ),\n    beforeOpen: () => {\n      newTicketArticleRequested.value = true\n    },\n    afterClose: () => {\n      newTicketArticleRequested.value = false\n    },\n  })\n\n  const rememberArticleFormGroup = () => {\n    newTicketArticlePresent.value = true\n  }\n\n  const route = useRoute()\n\n  const resetDirtyTicketState = () => {\n    const stateId = form.value?.getNodeByName('state_id')\n    const isDefaultFollowUpStateSet = form.value?.getNodeByName(\n      'isDefaultFollowUpStateSet',\n    )\n\n    if (\n      !stateId ||\n      !isDefaultFollowUpStateSet ||\n      !isDefaultFollowUpStateSet.value\n    )\n      return false\n\n    // If the default follow-up state was set, then we want to reset the state on article discard.\n    //   See `app/models/form_updater/updater/ticket/edit.rb` for more info.\n    stateId.reset()\n    isDefaultFollowUpStateSet.reset()\n\n    return true\n  }\n\n  const openArticleReplyDialog = async ({\n    updateFormLocation,\n  }: ReplyDialogOptions) => {\n    if (!ticket.value) return\n\n    return articleReplyDialog.open({\n      name: articleReplyDialog.name,\n      ticket,\n      form,\n      needSpaceForSaveBanner,\n      newTicketArticlePresent,\n      articleFormGroupNode,\n      updateFormLocation,\n      onDone() {\n        rememberArticleFormGroup()\n      },\n      onDiscard() {\n        newTicketArticlePresent.value = false\n\n        resetDirtyTicketState()\n      },\n      onShowArticleForm() {\n        updateFormLocation('[data-ticket-article-reply-form]')\n      },\n      onHideArticleForm() {\n        if (route.name === 'TicketInformationDetails') {\n          updateFormLocation('[data-ticket-edit-form]')\n          return\n        }\n\n        updateFormLocation('body')\n      },\n    })\n  }\n\n  const closeArticleReplyDialog = (rememberArticle = false) => {\n    if (rememberArticle) rememberArticleFormGroup()\n\n    return articleReplyDialog.close()\n  }\n\n  return {\n    articleReplyDialog,\n    newTicketArticleRequested,\n    newTicketArticlePresent,\n    articleFormGroupNode,\n    isArticleFormGroupValid,\n    openArticleReplyDialog,\n    closeArticleReplyDialog,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketLiveUserDeleteDocument = gql`\n    mutation ticketLiveUserDelete($id: ID!, $app: EnumTaskbarApp!) {\n  ticketLiveUserDelete(id: $id, app: $app) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketLiveUserDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketLiveUserDeleteMutation, Types.TicketLiveUserDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketLiveUserDeleteMutation, Types.TicketLiveUserDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketLiveUserDeleteMutation, Types.TicketLiveUserDeleteMutationVariables>(TicketLiveUserDeleteDocument, options);\n}\nexport type TicketLiveUserDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketLiveUserDeleteMutation, Types.TicketLiveUserDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketLiveUserUpsertDocument = gql`\n    mutation ticketLiveUserUpsert($id: ID!, $app: EnumTaskbarApp!, $editing: Boolean!) {\n  ticketLiveUserUpsert(id: $id, app: $app, editing: $editing) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketLiveUserUpsertMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketLiveUserUpsertMutation, Types.TicketLiveUserUpsertMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketLiveUserUpsertMutation, Types.TicketLiveUserUpsertMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketLiveUserUpsertMutation, Types.TicketLiveUserUpsertMutationVariables>(TicketLiveUserUpsertDocument, options);\n}\nexport type TicketLiveUserUpsertMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketLiveUserUpsertMutation, Types.TicketLiveUserUpsertMutationVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { noop } from '@vueuse/shared'\nimport { type Ref, type ComputedRef, onBeforeMount } from 'vue'\nimport { watch } from 'vue'\nimport { onBeforeRouteLeave, onBeforeRouteUpdate } from 'vue-router'\n\nimport { useTicketLiveUserList } from '#shared/entities/ticket/composables/useTicketLiveUserList.ts'\nimport { EnumTaskbarApp } from '#shared/graphql/types.ts'\nimport { ensureGraphqlId } from '#shared/graphql/utils.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport { useTicketLiveUserDeleteMutation } from '../graphql/mutations/live-user/delete.api.ts'\nimport { useTicketLiveUserUpsertMutation } from '../graphql/mutations/live-user/ticketLiveUserUpsert.api.ts'\n\nexport const useTicketLiveUser = (\n  ticketInternalId: Ref<string>,\n  isTicketAgent: ComputedRef<boolean>,\n  editingForm: ComputedRef<boolean>,\n) => {\n  const { liveUserList } = useTicketLiveUserList(\n    ticketInternalId,\n    isTicketAgent,\n    EnumTaskbarApp.Mobile,\n  )\n\n  const upsertMutation = new MutationHandler(useTicketLiveUserUpsertMutation())\n  const deleteMutation = new MutationHandler(useTicketLiveUserDeleteMutation())\n\n  const updateLiveUser = async (ticketInternalId: string, editing = false) => {\n    await upsertMutation\n      .send({\n        id: ensureGraphqlId('Ticket', ticketInternalId),\n        editing,\n        app: EnumTaskbarApp.Mobile,\n      })\n      .catch(noop)\n  }\n\n  const deleteLiveUser = async (ticketInternalId: string) => {\n    await deleteMutation\n      .send({\n        id: ensureGraphqlId('Ticket', ticketInternalId),\n        app: EnumTaskbarApp.Mobile,\n      })\n      .catch(noop)\n  }\n\n  onBeforeRouteUpdate(async (to, from) => {\n    const internalToId = to.params.internalId as string\n    const internalFromId = from.params.internalId as string\n\n    // update status when opening another ticket page without unmounting the page and don't block the page\n    if (internalToId !== internalFromId) {\n      liveUserList.value = []\n      deleteLiveUser(internalFromId)\n      updateLiveUser(internalToId)\n    }\n  })\n\n  onBeforeRouteLeave(async (_, from) => {\n    const internalId = from.params.internalId as string\n\n    // update status when leaving to non-ticket page, but don't block the page\n    deleteLiveUser(internalId)\n  })\n\n  onBeforeMount(async () => {\n    // update status on opening the page. it is possible that this code will run,\n    // when user doesn't have access to the ticket, because we fail after the route is rendered\n    await updateLiveUser(ticketInternalId.value)\n  })\n\n  // Update live user editing status, when can submit value changes\n  watch(editingForm, async (canSubmit) => {\n    await updateLiveUser(ticketInternalId.value, canSubmit)\n  })\n\n  return {\n    liveUserList,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { cloneDeep, noop } from 'lodash-es'\nimport { computed, provide, ref, reactive, toRef, nextTick } from 'vue'\nimport {\n  onBeforeRouteLeave,\n  onBeforeRouteUpdate,\n  RouterView,\n  useRoute,\n  useRouter,\n} from 'vue-router'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSubmitData,\n  FormValues,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useOnlineNotificationSeen } from '#shared/composables/useOnlineNotification/useOnlineNotificationSeen.ts'\nimport { useTicketEdit } from '#shared/entities/ticket/composables/useTicketEdit.ts'\nimport { useTicketEditForm } from '#shared/entities/ticket/composables/useTicketEditForm.ts'\nimport { useTicketView } from '#shared/entities/ticket/composables/useTicketView.ts'\nimport { TicketUpdatesDocument } from '#shared/entities/ticket/graphql/subscriptions/ticketUpdates.api.ts'\nimport type { TicketUpdateFormData } from '#shared/entities/ticket/types.ts'\nimport { useErrorHandler } from '#shared/errors/useErrorHandler.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport type {\n  TicketUpdatesSubscription,\n  TicketUpdatesSubscriptionVariables,\n} from '#shared/graphql/types.ts'\nimport {\n  EnumFormUpdaterId,\n  EnumUserErrorException,\n} from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport CommonLoader from '#mobile/components/CommonLoader/CommonLoader.vue'\nimport { useCommonSelect } from '#mobile/components/CommonSelect/useCommonSelect.ts'\nimport { getOpenedDialogs } from '#mobile/composables/useDialog.ts'\nimport { useTicketWithMentionLimitQuery } from '#mobile/entities/ticket/graphql/queries/ticketWithMentionLimit.api.ts'\nimport type { TicketInformation } from '#mobile/entities/ticket/types.ts'\n\nimport TicketDetailViewActions from '../components/TicketDetailView/TicketDetailViewActions.vue'\nimport { useTicketArticleReply } from '../composable/useTicketArticleReply.ts'\nimport { TICKET_INFORMATION_SYMBOL } from '../composable/useTicketInformation.ts'\nimport { useTicketLiveUser } from '../composable/useTicketLiveUser.ts'\n\ninterface Props {\n  internalId: string\n}\n\nconst props = defineProps<Props>()\nconst ticketId = computed(() => convertToGraphQLId('Ticket', props.internalId))\n\nconst MENTIONS_LIMIT = 5\n\nconst { createQueryErrorHandler } = useErrorHandler()\n\nconst ticketQuery = new QueryHandler(\n  useTicketWithMentionLimitQuery(() => ({\n    ticketId: ticketId.value,\n    mentionsCount: MENTIONS_LIMIT,\n  })),\n  {\n    errorCallback: createQueryErrorHandler({\n      notFound: __(\n        'Ticket with specified ID was not found. Try checking the URL for errors.',\n      ),\n      forbidden: __('You have insufficient rights to view this ticket.'),\n    }),\n  },\n)\n\nconst ticketResult = ticketQuery.result()\nconst ticket = computed(() => ticketResult.value?.ticket)\n\nticketQuery.subscribeToMore<\n  TicketUpdatesSubscriptionVariables,\n  TicketUpdatesSubscription\n>(() => ({\n  document: TicketUpdatesDocument,\n  variables: {\n    ticketId: ticketId.value,\n  },\n  onError: noop,\n}))\n\nconst formLocation = ref('body')\nconst formVisible = computed(() => formLocation.value !== 'body')\n\nconst { form, canSubmit, isDirty, formSubmit, formReset } = useForm()\n\nconst { initialTicketValue, isTicketFormGroupValid, editTicket } =\n  useTicketEdit(ticket, form)\n\nconst {\n  currentArticleType,\n  ticketSchema,\n  articleSchema,\n  securityIntegration,\n  isTicketEditable,\n  articleTypeHandler,\n  articleTypeSelectHandler,\n} = useTicketEditForm(ticket, form)\n\nconst needSpaceForSaveBanner = computed(\n  () => isTicketEditable.value && isDirty.value,\n)\n\nconst {\n  articleReplyDialog,\n  newTicketArticleRequested,\n  newTicketArticlePresent,\n  isArticleFormGroupValid,\n  openArticleReplyDialog,\n  closeArticleReplyDialog,\n} = useTicketArticleReply(ticket, form, needSpaceForSaveBanner)\n\nconst ticketEditSchema = [\n  {\n    isLayout: true,\n    component: 'FormGroup',\n    props: {\n      style: {\n        if: '$formLocation !== \"[data-ticket-edit-form]\"',\n        then: 'display: none;',\n      },\n      showDirtyMark: true,\n    },\n    children: [ticketSchema],\n  },\n  {\n    isLayout: true,\n    component: 'FormGroup',\n    props: {\n      style: {\n        if: '$formLocation !== \"[data-ticket-article-reply-form]\"',\n        then: 'display: none;',\n      },\n    },\n    children: [articleSchema],\n  },\n]\n\nconst { isTicketAgent } = useTicketView(ticket)\n\nconst { notify } = useNotifications()\n\nconst saveTicketForm = async (\n  formData: FormSubmitData<TicketUpdateFormData>,\n) => {\n  let data = cloneDeep(formData)\n\n  if (currentArticleType.value?.updateForm)\n    data = currentArticleType.value.updateForm(formData)\n\n  try {\n    const result = await editTicket(\n      data,\n      { skipValidators: Object.values(EnumUserErrorException) }, // skip all validators, they are irrelevant for mobile view\n    )\n\n    if (result?.ticketUpdate?.ticket) {\n      notify({\n        id: 'ticket-update',\n        type: NotificationTypes.Success,\n        message: __('Ticket updated successfully.'),\n      })\n\n      // Reset article form after ticket update and reset form.\n      newTicketArticlePresent.value = false\n\n      return {\n        reset: (\n          values: FormSubmitData<TicketUpdateFormData>,\n          formNodeValues: FormValues,\n        ) => {\n          nextTick(() => {\n            closeArticleReplyDialog().then(() => {\n              formReset({ values: { ticket: formNodeValues.ticket } })\n            })\n          })\n        },\n      }\n    }\n  } catch (errors) {\n    if (errors instanceof UserError) {\n      notify({\n        id: 'ticket-update-error',\n        message: errors.generalErrors[0],\n        type: NotificationTypes.Error,\n      })\n    }\n  }\n}\n\nconst updateFormLocation = (newLocation: string) => {\n  formLocation.value = newLocation\n}\n\nconst isFormValid = computed(() => {\n  if (!newTicketArticlePresent.value) return isTicketFormGroupValid.value\n  return isTicketFormGroupValid.value && isArticleFormGroupValid.value\n})\n\nconst showArticleReplyDialog = () => {\n  return openArticleReplyDialog({ updateFormLocation })\n}\n\nconst { liveUserList } = useTicketLiveUser(\n  toRef(() => props.internalId),\n  isTicketAgent,\n  isDirty,\n)\n\nconst refetchingStatus = ref(false)\nconst updateRefetchingStatus = (status: boolean) => {\n  refetchingStatus.value = status\n}\n\nconst scrolledToBottom = ref(false)\nconst scrollDownState = ref(false)\n\nonBeforeRouteUpdate((to, from) => {\n  // reset if we opened another ticket from the same page (via ticket merge, for example)\n  if (to.params.internalId !== from.params.internalId) {\n    scrolledToBottom.value = false\n  }\n\n  scrollDownState.value = false\n})\n\nconst newArticlesIds = reactive(new Set<string>())\n\nprovide<TicketInformation>(TICKET_INFORMATION_SYMBOL, {\n  ticketQuery,\n  initialFormTicketValue: initialTicketValue,\n  ticket,\n  form,\n  scrolledToBottom,\n  newTicketArticleRequested,\n  newTicketArticlePresent,\n  updateFormLocation,\n  isTicketEditable,\n  showArticleReplyDialog,\n  liveUserList,\n  refetchingStatus,\n  newArticlesIds,\n  scrollDownState,\n  updateRefetchingStatus,\n})\n\nuseOnlineNotificationSeen(ticket)\n\nonBeforeRouteLeave(async () => {\n  if (!isDirty.value) return true\n\n  const { waitForConfirmation } = useConfirmation()\n\n  const confirmed = await waitForConfirmation(\n    __('Are you sure? You have unsaved changes that will get lost.'),\n    {\n      buttonLabel: __('Discard changes'),\n      buttonVariant: 'danger',\n    },\n  )\n\n  return confirmed\n})\n\nconst router = useRouter()\nconst route = useRoute()\n\nconst submitForm = () => {\n  if (!isTicketFormGroupValid.value && route.name !== 'Edit') {\n    if (articleReplyDialog.isOpened.value) {\n      closeArticleReplyDialog(true)\n    }\n    router.push(`/tickets/${ticket.value?.internalId}/information`)\n  } else if (\n    newTicketArticlePresent.value &&\n    !isArticleFormGroupValid.value &&\n    !articleReplyDialog.isOpened.value\n  ) {\n    showArticleReplyDialog()\n  }\n\n  formSubmit()\n}\n\nconst ticketEditSchemaData = reactive({\n  formLocation,\n  securityIntegration,\n  newTicketArticleRequested,\n  newTicketArticlePresent,\n  currentArticleType,\n})\n\nconst { isOpened: commonSelectOpened } = useCommonSelect()\n\nconst showReplyButton = computed(() => {\n  if (articleReplyDialog.isOpened.value) return false\n\n  return isTicketEditable.value\n})\n\nconst showScrollDown = computed(() => {\n  if (articleReplyDialog.isOpened.value) return false\n\n  return scrollDownState.value\n})\n\n// show banner only in \"articles list\", \"ticket information\" and \"create article\" views\nconst showBottomBanner = computed(() => {\n  const dialogs = getOpenedDialogs()\n\n  if (\n    commonSelectOpened.value ||\n    dialogs.size > 1 ||\n    (dialogs.size === 1 && !articleReplyDialog.isOpened.value)\n  )\n    return false\n\n  return (\n    (isTicketEditable.value && isDirty.value) ||\n    showReplyButton.value ||\n    showScrollDown.value\n  )\n})\n</script>\n\n<template>\n  <RouterView />\n  <div class=\"pb-safe-16\"></div>\n  <!-- submit form is always present in the DOM, so we can access FormKit validity state -->\n  <!-- if it's visible, it's moved to the [data-ticket-edit-form] element, which is in TicketInformationDetail -->\n  <Teleport v-if=\"isTicketEditable\" :to=\"formLocation\">\n    <CommonLoader\n      :class=\"formVisible ? 'visible' : 'hidden'\"\n      :loading=\"!ticket\"\n    >\n      <Form\n        v-if=\"ticket?.id && initialTicketValue\"\n        id=\"form-ticket-edit\"\n        :key=\"ticket.id\"\n        ref=\"form\"\n        :schema=\"ticketEditSchema\"\n        :flatten-form-groups=\"['ticket']\"\n        :handlers=\"[articleTypeHandler()]\"\n        :form-kit-plugins=\"[articleTypeSelectHandler]\"\n        :schema-data=\"ticketEditSchemaData\"\n        :initial-values=\"initialTicketValue\"\n        :initial-entity-object=\"ticket\"\n        :form-updater-id=\"EnumFormUpdaterId.FormUpdaterUpdaterTicketEdit\"\n        use-object-attributes\n        :aria-hidden=\"!formVisible\"\n        :class=\"formVisible ? 'visible' : 'hidden'\"\n        @submit=\"saveTicketForm($event as FormSubmitData<TicketUpdateFormData>)\"\n      />\n    </CommonLoader>\n  </Teleport>\n  <Teleport v-if=\"form?.formNode\" to=\"body\">\n    <TicketDetailViewActions\n      :form-invalid=\"canSubmit && !isFormValid\"\n      :new-replies-count=\"newArticlesIds.size\"\n      :new-article-present=\"newTicketArticlePresent\"\n      :can-reply=\"showReplyButton\"\n      :can-save=\"isTicketEditable && isDirty\"\n      :can-scroll-down=\"showScrollDown\"\n      :hidden=\"!showBottomBanner\"\n      @reply=\"showArticleReplyDialog\"\n      @save=\"submitForm\"\n    />\n  </Teleport>\n</template>\n"],"file":"assets/TicketDetailView-CMD9kIXg.js"}