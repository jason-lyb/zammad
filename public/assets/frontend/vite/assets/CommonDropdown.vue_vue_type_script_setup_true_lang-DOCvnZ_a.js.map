{"version":3,"mappings":"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","names":["CURRENT_TASKBAR_TAB_KEY","initializeCurrentTaskbarTab","taskbarEntityKey","taskbarTabListByTabEntityKey","storeToRefs","useUserCurrentTaskbarTabsStore","currentTaskbarTab","computed","existingTaskbarTab","isEqual","currentTaskbarTabEntityAccess","_a","currentTaskbarTabId","currentTaskbarTabFormId","currentTaskbarTabNewArticlePresent","provideCurrentTaskbarTab","data","provide","useTaskbarTab","context","taskbarTabContexts","currentTaskbarEntityKey","inject","updateTaskbarTab","deleteTaskbarTab","watch","newValue","isDirty","currentRoutePath","currentRouteMeta","useRoute","ref","currentTaskbarTabData","onActivated","newCurrentTaskbarTabId","showContent","oldValue","cleanupRouteDialogs","pageError","EnumTaskbarEntityAccess","ErrorStatusCodes","usePage","pageOptions","pageActive","pageInactive","metaTitle","stopMetaTitleWatcher","setViewTitle","useMetaTitle","onDeactivated","UserCurrentTaskbarItemStateUpdatesDocument","gql","useUserCurrentTaskbarItemStateUpdatesSubscription","variables","options","VueApolloComposable.useSubscription","useTaskbarTabStateUpdates","form","autoSaveTriggerFormUpdater","skipNextStateUpdate","applyTaskbarState","setSkipNextStateUpdate","skip","stateUpdatesSubscription","SubscriptionHandler","result","listenFormUpdaterProcessing","_b","payload","TicketSidebarScreenType","TicketSidebarButtonBadgeType","usePersistentStates","reactive","TicketDocument","TicketAttributesFragmentDoc","TicketMentionFragmentDoc","ReferencingTicketFragmentDoc","useTicketQuery","VueApolloComposable.useQuery","TICKET_KEY","initializeTicketInformation","internalId","ticketId","convertToGraphQLId","QueryHandler","provideTicketInformation","useTicketInformation","props","__props","processedBadgeValue","value","badgeColor","handleUserErrors","error","UserError","useNotifications","NotificationTypes","hasPermission","useSessionStore","isAdmin","ticketState","ticketColorCode","EnumTicketStateColorCode","emit","__emit","isTicketItem","noAccessToLinkedTicket","inlineEditInstance","useTemplateRef","removeItem","setItemCheckedState","editItem","isEditing","actions","entity","__expose","isReordering","checklistCopy","checklistItems","checklistInstance","containerElement","checklistTitleInstance","dragAndDrop","animations","el","focusNewItem","addNewItem","item","resetOrder","saveOrder","startReordering","index","popover","popoverTarget","toggle","usePopover","ChecklistTemplatesDocument","useChecklistTemplatesQuery","ChecklistTemplateUpdatesDocument","useChecklistTemplates","createNewChecklist","checklistTemplatesQuery","templatesLoading","checklistTemplates","isLoadingTemplates","prev","subscriptionData","applyChecklistTemplate","template","TicketChecklistDocument","useTicketChecklistQuery","TicketChecklistUpdatesDocument","useTicketChecklist","ticket","checklistQuery","ticketChecklist","checklistResult","checklistLoading","checklist","isLoadingChecklist","incompleteItemCount","scrollPosition","_useModel","scrollContainer","useScrollPosition","onMounted","onBeforeUnmount","TicketChecklistAddDocument","ErrorsFragmentDoc","useTicketChecklistAddMutation","VueApolloComposable.useMutation","TicketChecklistDeleteDocument","useTicketChecklistDeleteMutation","TicketChecklistItemDeleteDocument","useTicketChecklistItemDeleteMutation","TicketChecklistItemOrderUpdateDocument","useTicketChecklistItemOrderUpdateMutation","TicketChecklistItemUpsertDocument","useTicketChecklistItemUpsertMutation","TicketChecklistTitleUpdateDocument","useTicketChecklistTitleUpdateMutation","persistentStates","checklistItemsInstance","apolloCache","getApolloClient","isTicketEditable","ticketNumberWithTicketHook","useTicketNumber","checklistTitle","i18n","addNewChecklistMutation","MutationHandler","input","nextTick","checklistTitleUpdateMutation","checklistDeleteMutation","removeChecklist","waitForVariantConfirmation","useConfirmation","updateTitle","title","itemAddMutation","cache","ticketChecklistItemUpsert","currentItems","toReference","currentComplete","totalCount","incompleteCount","itemOrderMutation","itemUpsertMutation","itemDeleteMutation","isUpdatingOrder","isAddingNewItem","isAddingNewChecklist","isUpdatingChecklistTitle","updatingItemIds","deleteUpdatingItemId","id","addUpdatingItemId","modifyIncompleteItemCountCache","increase","currentCheckList","previousIncompleteItemCount","previousCompleted","checklistId","modifyCheckedCache","checklistItemId","restoreIncompleteItemCountCache","modifyItemsCache","items","_","updateItem","itemId","restoreCache","saveItemsOrder","stopReordering","previousChecklistItems","cloneDeep","_c","checklistActions","checklistTemplatesMenuItems","incompleteChecklistItemsCount","badge","label","__vite_glob_0_0$1","TicketSidebarChecklist","config","useApplicationStore","EntityType","__vite_glob_0_0","OrganizationEntity","__vite_glob_0_1$1","UserEntity","modules","__vite_glob_0_1","entityModules","acc","module","modelValue","entitySetup","component","CUSTOMER_FLYOUT_KEY","openChangeCustomerFlyout","useFlyout","__vitePreload","isTicketAgent","useTicketView","application","customerId","customer","secondaryOrganizations","objectAttributes","loadAllSecondaryOrganizations","useUserDetail","calculateBadgeType","type","TicketSidebarCustomer","linkContent","isTouchDevice","useTouchDevice","issueStateColor","EnumTicketExternalReferencesIssueTrackerItemState","issueStateName","TicketExternalReferencesIssueTrackerItemListDocument","useTicketExternalReferencesIssueTrackerItemListQuery","useTicketExternalIssueTracker","screenType","issueTrackerType","links","skipNextLinkUpdate","issueTrackerQuery","isLoading","queryResult","queryError","trackerTypeTranslationMap","EnumTicketExternalReferencesIssueTrackerType","issueList","isLoadingIssues","issueListUrls","TicketExternalReferencesIssueTrackerItemAddDocument","useTicketExternalReferencesIssueTrackerItemAddMutation","TicketExternalReferencesIssueTrackerItemRemoveDocument","useTicketExternalReferencesIssueTrackerItemRemoveMutation","toRef","unlinkMutation","removeIssueLinkListCacheUpdate","issue","queryOptions","existingIssueTrackerItems","oldIssueTrackerItems","issueItem","unlinkIssue","revertCacheUpdate","externalReferences","values","link","linkIssueMutation","ticketExternalReferencesIssueTrackerItemAdd","linkIssue","issueUrl","existingIssueLinks","linkIssueFlyout","openFlyout","showEmptyState","useIssueTracker","trackerType","issueLinks","_d","hideSidebar","openIssuesBadge","issueTrackerListInstance","handleError","message","flyoutConfig","__vite_glob_0_2","TicketSidebarGitHub","__vite_glob_0_3","TicketSidebarGitLab","IdoitObjectAttributesFragmentDoc","TicketExternalReferencesIdoitObjectListDocument","useTicketExternalReferencesIdoitObjectListQuery","useIdoitCacheHandlers","objectIds","existingIdoitObjects","oldObjects","idoitObjectId","object","ticketExternalReferencesIdoitObjectAdd","idoitObject","useIdoitFormHelpers","objects","existingReferences","objectId","TicketExternalReferencesIdoitObjectAddDocument","useTicketExternalReferencesIdoitObjectAddMutation","TicketExternalReferencesIdoitObjectRemoveDocument","useTicketExternalReferencesIdoitObjectRemoveMutation","skipNextObjectUpdate","open","objectListQuery","objectList","removeObjectListCacheUpdate","modifyObjectItemAddCache","addObjectIdsToForm","removeObjectFromForm","removeObjectMutation","removeObject","addObjectMutation","addObjects","formData","obj","isDarkMode","useThemeStore","plugin","icon","_e","objectBadges","__vite_glob_0_4","TicketSidebarIdoit","MIN_SHOWN","timeAccountingDisplayUnit","timeAccountingConfig","useTicketAccountedTime","totalTime","showAll","allUnits","units","shownUnits","shouldDisplayShowButton","remainingUnitsCount","showDivider","LinkListDocument","useLinkListQuery","LinkUpdatesDocument","useObjectLinkTypes","EnumLinkType","key","a","useObjectLinks","targetType","linkTypes","linkListQuery","linkListQueryResult","linkListQueryLoading","linkTypesWithLinks","getUuid","hasLinks","LinkRemoveDocument","useLinkRemoveMutation","ticketReactive","linkListIsLoading","notify","deleteLink","targetId","existingLinks","confirmDeleteLink","linkFlyout","openLinkFlyout","isSubscribed","isSubscriptionLoading","toggleSubscribe","subscribers","totalSubscribers","useTicketSubscribe","isOutsideUpdate","handleToggleInput","TagAssignmentAddDocument","useTagAssignmentAddMutation","TagAssignmentRemoveDocument","useTagAssignmentRemoveMutation","MAX_TAGS_VISIBLE","areAllTagsVisible","tags","totalTagsCount","showMore","onBeforeRouteUpdate","isNewTagVisible","showNewTag","activate","getNode","hideNewTag","tagAssignmentAddHandler","modifyTagsCache","ticketTags","addNewTag","tag","tagAssignmentRemoveHandler","removeTag","tagName","ticketMergeFlyoutName","ticketChangeCustomerFlyoutName","ticketHistoryFlyoutName","openTicketMergeFlyout","openTicketHistoryFlyout","useForm","__vite_glob_0_5","TicketSidebarInformation","userResult","useUserQuery","organizationInternalId","organization","organizationMembers","loadAllMembers","useOrganizationDetail","__vite_glob_0_6","TicketSidebarOrganization","TicketSharedDraftStartAttributesFragmentDoc","TicketSharedDraftStartListDocument","useTicketSharedDraftStartListQuery","TicketSharedDraftStartUpdateByGroupDocument","useTicketSharedDraftStart","groupId","errorCallback","sharedDraftStartListQuery","sharedDraftStartListResult","loading","sharedDraftStartList","TicketSharedDraftStartCreateDocument","useTicketSharedDraftStartCreateMutation","TicketSharedDraftStartUpdateDocument","useTicketSharedDraftStartUpdateMutation","TicketSharedDraftStartDeleteDocument","useTicketSharedDraftStartDeleteMutation","TicketSharedDraftStartSingleDocument","useTicketSharedDraftStartSingleQuery","TicketSharedDraftZoomDeleteDocument","useTicketSharedDraftZoomDeleteMutation","TicketSharedDraftZoomAttributesFragmentDoc","TicketSharedDraftZoomShowDocument","useTicketSharedDraftZoomShowQuery","useTicketSharedDraft","mapSharedDraftParams","newArticle","ticketAttributes","removeSignatureFromBody","sharedDraftFlyout","draftType","sharedDraftId","currentSharedDraftId","sharedDraftTitle","sharedDraftStartCreateMutation","unsupportedFields","supportedFields","field","sharedDraftContent","route","sharedDraftTitleNodeId","createSharedDraft","sharedDraftTitleNode","createMessage","sharedDraftStartUpdateMutation","updateSharedDraft","openSharedDraftFlyout","sharedDraftStartId","GraphQLErrorTypes","__vite_glob_0_7","TicketSidebarSharedDraftStart","ARTICLES_INFORMATION_KEY","useArticleContext","useFilePreviewViewer","viewFiles","showImage","useImageViewer","calendarPreviewFlyout","filePreviewfile","attachmentsWithUrls","useAttachments","showPreview","TicketAttachmentsDocument","useTicketAttachmentsQuery","useTicketAttachments","fetchPolicy","ticketAttachmentsQuery","ticketAttachments","contextArticle","__vite_glob_0_8","TicketSidebarAttachment","pluginModules","pluginFiles","file","p1","p2","useTicketSidebarPlugins","screen","name","TICKET_SIDEBAR_SYMBOL","useProvideTicketSidebar","shownSidebars","switchedSidebar","showSidebar","sidebar","switchSidebar","newSidebar","sidebarPlugins","availableSidebarPlugins","currentAvailableSidebarPlugins","newCurrentSidebarPlugins","sidebarPlugin","activeSidebar","hasSidebar","provideLocal","useTicketSidebar","injectLocal","maybeToggleAndSwitchSidebar","isOpen","locale","useLocaleStore","currentPopoverPlacement","EnumTextDirection","dropdownLabel","handleSelectRadio","actionItems"],"ignoreList":[],"sources":["../../../../../app/frontend/apps/desktop/entities/user/current/composables/useTaskbarTab.ts","../../../../../app/frontend/apps/desktop/components/layout/LayoutTaskbarTabContent.vue","../../../../../app/frontend/apps/desktop/composables/usePage.ts","../../../../../app/frontend/apps/desktop/entities/user/current/graphql/subscriptions/userCurrentTaskbarItemStateUpdates.api.ts","../../../../../app/frontend/apps/desktop/entities/user/current/composables/useTaskbarTabStateUpdates.ts","../../../../../app/frontend/apps/desktop/pages/ticket/types/sidebar.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/usePersistentStates.ts","../../../../../app/frontend/shared/entities/ticket/graphql/queries/ticket.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useTicketInformation.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarButton.vue","../../../../../app/frontend/shared/errors/utils.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistEmptyTemplates.vue","../../../../../app/frontend/apps/desktop/components/CommonTicketLabel/CommonTicketLabel.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistItem.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistItems.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistTemplates.vue","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/checklistTemplates.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/subscriptions/checklistTemplateUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/useChecklistTemplates.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/ticketChecklist.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/subscriptions/ticketChecklistUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/useTicketChecklist.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketChecklistAdd.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketChecklistDelete.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketChecklistItemDelete.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketChecklistItemOrderUpdate.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketChecklistItemUpsert.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketChecklistTitleUpdate.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklist.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/checklist.ts","../../../../../app/frontend/apps/desktop/components/CommonSimpleEntityList/types.ts","../../../../../app/frontend/apps/desktop/components/CommonSimpleEntityList/plugins/organization.ts","../../../../../app/frontend/apps/desktop/components/CommonSimpleEntityList/plugins/user.ts","../../../../../app/frontend/apps/desktop/components/CommonSimpleEntityList/plugins/index.ts","../../../../../app/frontend/apps/desktop/components/CommonSimpleEntityList/CommonSimpleEntityList.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarCustomer/TicketSidebarCustomerContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarCustomer/TicketSidebarCustomer.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/customer.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/ExternalReferenceLink.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/IssueTrackerList/IssueTrackerItem.vue","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/ticketExternalReferencesIssueTrackerList.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/useTicketExternalIssueTracker.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIssueTrackerItemAdd.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIssueTrackerItemRemove.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/IssueTrackerList.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/useIssueTracker.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/TicketSidebarGitHub/TicketSidebarGitHub.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/github.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/TicketSidebarGitLab/TicketSidebarGitLab.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/gitlab.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/fragments/IdoitObjectAttributes.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/ticketExternalReferencesIdoitObjectList.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/useIdoitCacheHandlers.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/useIdoitFormHelpers.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIdoitObjectAdd.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIdoitObjectRemove.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/TicketSidebarIdoitContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/TicketSidebarIdoit.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/idoit.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarInformation/TicketSidebarInformationContent/TicketAccountedTime.vue","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/linkList.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/subscriptions/linkUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useObjectLinkTypes.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useObjectLinks.ts","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/mutations/linkRemove.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarInformation/TicketSidebarInformationContent/TicketLinks.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarInformation/TicketSidebarInformationContent/TicketSubscribers.vue","../../../../../app/frontend/shared/entities/tags/graphql/mutations/assignment/add.api.ts","../../../../../app/frontend/shared/entities/tags/graphql/mutations/assignment/remove.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarInformation/TicketSidebarInformationContent/TicketTags.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarInformation/TicketSidebarInformationContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarInformation/TicketSidebarInformation.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/information.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarOrganization/TicketSidebarOrganizationContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarOrganization/TicketSidebarOrganization.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/organization.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/fragments/ticketSharedDraftStartAttributes.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/queries/ticketSharedDraftStartList.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/subscriptions/ticketSharedDraftStartUpdateByGroup.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/composables/useTicketSharedDraftStart.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/mutations/ticketSharedDraftStartCreate.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/mutations/ticketSharedDraftStartUpdate.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/mutations/ticketSharedDraftStartDelete.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-start/graphql/queries/ticketSharedDraftStartSingle.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-zoom/graphql/mutations/ticketSharedDraftZoomDelete.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-zoom/graphql/fragments/ticketSharedDraftZoomAttributes.api.ts","../../../../../app/frontend/shared/entities/ticket-shared-draft-zoom/graphql/queries/ticketSharedDraftZoomShow.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useTicketSharedDraft.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarSharedDraftStart/TicketSidebarSharedDraftStartContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarSharedDraftStart/TicketSidebarSharedDraftStart.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/shared-draft-start.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useArticleContext.ts","../../../../../app/frontend/apps/desktop/composables/useFilePreviewViewer.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarAttachment/TicketSidebarAttachmentContent.vue","../../../../../app/frontend/apps/desktop/pages/ticket/graphql/queries/ticketAttachments.api.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarAttachment/useTicketAttachments.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/TicketSidebarAttachment/TicketSidebarAttachment.vue","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/ticket-article-attachment.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar/plugins/index.ts","../../../../../app/frontend/apps/desktop/pages/ticket/composables/useTicketSidebar.ts","../../../../../app/frontend/apps/desktop/pages/ticket/components/TicketSidebar.vue","../../../../../app/frontend/apps/desktop/components/CommonDropdown/CommonDropdown.vue"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { isEqual } from 'lodash-es'\nimport { storeToRefs } from 'pinia'\nimport {\n  computed,\n  inject,\n  provide,\n  watch,\n  type ComputedRef,\n  type InjectionKey,\n  type Ref,\n} from 'vue'\n\nimport type { UserTaskbarTab } from '#desktop/components/UserTaskbarTabs/types.ts'\n\nimport { useUserCurrentTaskbarTabsStore } from '../stores/taskbarTabs.ts'\n\nimport type { TaskbarTabContext } from '../types.ts'\n\ninterface CurrentTaskbarTabData {\n  currentTaskbarTab: ComputedRef<UserTaskbarTab | undefined>\n  currentTaskbarTabId: ComputedRef<string | undefined>\n  currentTaskbarEntityKey: string | undefined\n  currentTaskbarTabFormId: ComputedRef<string | undefined>\n  currentTaskbarTabNewArticlePresent: ComputedRef<boolean>\n}\n\nexport const CURRENT_TASKBAR_TAB_KEY = Symbol(\n  'current-taskbar-tab',\n) as InjectionKey<CurrentTaskbarTabData>\n\nexport const initializeCurrentTaskbarTab = (taskbarEntityKey?: string) => {\n  const { taskbarTabListByTabEntityKey } = storeToRefs(\n    useUserCurrentTaskbarTabsStore(),\n  )\n\n  const currentTaskbarTab = computed<UserTaskbarTab | undefined>(\n    (existingTaskbarTab) => {\n      if (!taskbarEntityKey) return\n\n      if (\n        existingTaskbarTab &&\n        isEqual(\n          existingTaskbarTab,\n          taskbarTabListByTabEntityKey.value[taskbarEntityKey],\n        )\n      ) {\n        return existingTaskbarTab\n      }\n\n      return taskbarTabListByTabEntityKey.value[taskbarEntityKey]\n    },\n  )\n  const currentTaskbarTabEntityAccess = computed(\n    () => currentTaskbarTab.value?.entityAccess,\n  )\n\n  const currentTaskbarTabId = computed(\n    () => currentTaskbarTab.value?.taskbarTabId,\n  )\n\n  const currentTaskbarTabFormId = computed(\n    () => currentTaskbarTab.value?.formId || undefined,\n  )\n\n  const currentTaskbarTabNewArticlePresent = computed(\n    () => !!currentTaskbarTab.value?.formNewArticlePresent,\n  )\n\n  return {\n    currentTaskbarTab,\n    currentTaskbarTabEntityAccess,\n    currentTaskbarTabId,\n    currentTaskbarTabFormId,\n    currentTaskbarTabNewArticlePresent,\n  }\n}\n\nexport const provideCurrentTaskbarTab = (data: CurrentTaskbarTabData) => {\n  provide(CURRENT_TASKBAR_TAB_KEY, data)\n}\n\nexport const useTaskbarTab = (context?: Ref<TaskbarTabContext>) => {\n  const { taskbarTabContexts } = storeToRefs(useUserCurrentTaskbarTabsStore())\n\n  const {\n    currentTaskbarTab,\n    currentTaskbarTabId,\n    currentTaskbarTabFormId,\n    currentTaskbarEntityKey,\n    currentTaskbarTabNewArticlePresent,\n  } = inject(CURRENT_TASKBAR_TAB_KEY) as CurrentTaskbarTabData\n\n  const { updateTaskbarTab, deleteTaskbarTab } =\n    useUserCurrentTaskbarTabsStore()\n\n  // Keep track of the passed context and update the store state accordingly.\n  if (context) {\n    watch(\n      context,\n      (newValue) => {\n        if (!currentTaskbarTab.value?.tabEntityKey) return\n\n        taskbarTabContexts.value[currentTaskbarTab.value.tabEntityKey] =\n          newValue\n      },\n      { immediate: true },\n    )\n  }\n\n  watch(\n    () =>\n      currentTaskbarTab.value &&\n      taskbarTabContexts.value[currentTaskbarTab.value.tabEntityKey]\n        ?.formIsDirty,\n    (isDirty) => {\n      if (isDirty === undefined || !currentTaskbarTab.value?.taskbarTabId)\n        return\n\n      if (currentTaskbarTab.value.dirty === isDirty) return\n\n      updateTaskbarTab(currentTaskbarTab.value.taskbarTabId, {\n        ...currentTaskbarTab.value,\n        dirty: isDirty,\n      })\n    },\n  )\n\n  const currentTaskbarTabDelete = () => {\n    if (!currentTaskbarTabId.value) return\n\n    deleteTaskbarTab(currentTaskbarTabId.value)\n  }\n\n  return {\n    currentTaskbarTab,\n    currentTaskbarEntityKey,\n    currentTaskbarTabId,\n    currentTaskbarTabFormId,\n    currentTaskbarTabNewArticlePresent,\n    currentTaskbarTabDelete,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, onActivated, ref, watch } from 'vue'\nimport { useRoute } from 'vue-router'\n\nimport { EnumTaskbarEntityAccess } from '#shared/graphql/types.ts'\nimport type { ErrorOptions } from '#shared/router/error.ts'\nimport { ErrorStatusCodes } from '#shared/types/error.ts'\n\nimport CommonError from '#desktop/components/CommonError/CommonError.vue'\nimport LayoutMain from '#desktop/components/layout/LayoutMain.vue'\nimport {\n  initializeCurrentTaskbarTab,\n  provideCurrentTaskbarTab,\n} from '#desktop/entities/user/current/composables/useTaskbarTab.ts'\n\nimport { cleanupRouteDialogs } from '../CommonConfirmationDialog/initializeConfirmationDialog.ts'\n\nconst { path: currentRoutePath, meta: currentRouteMeta } = useRoute()\n\n// Remember the current taskbar entity key\nconst currentTaskbarEntityKey = ref(currentRouteMeta.taskbarTabEntityKey)\n\nconst {\n  currentTaskbarTabEntityAccess,\n  currentTaskbarTabId,\n  ...currentTaskbarTabData\n} = initializeCurrentTaskbarTab(currentTaskbarEntityKey.value)\n\nonActivated(() => {\n  if (!currentTaskbarEntityKey.value) {\n    currentTaskbarEntityKey.value = currentRouteMeta.taskbarTabEntityKey\n  }\n})\n\nwatch(currentTaskbarTabId, (newCurrentTaskbarTabId) => {\n  if (!newCurrentTaskbarTabId && currentTaskbarEntityKey) {\n    currentTaskbarEntityKey.value = undefined\n  }\n})\n\nconst showContent = computed(() => {\n  return !!(currentTaskbarTabId.value && currentTaskbarEntityKey.value)\n})\n\nwatch(showContent, (newValue, oldValue) => {\n  if (oldValue && !newValue) {\n    cleanupRouteDialogs(currentRoutePath)\n  }\n})\n\n// NB: Flag in the route metadata data does not seem to trigger an update all the time.\n//   Due to this limitation, we need a way to force the re-computation in certain situations.\nconst pageError = computed(() => {\n  if (!currentTaskbarEntityKey.value) return null\n\n  // Check first for page errors, when the entity access is not undefined.\n  if (currentTaskbarTabEntityAccess.value === undefined) return undefined\n\n  switch (currentTaskbarTabEntityAccess.value) {\n    case EnumTaskbarEntityAccess.Forbidden:\n      return {\n        statusCode: ErrorStatusCodes.Forbidden,\n        title: __('Forbidden'),\n        message:\n          (currentRouteMeta.messageForbidden as string) ??\n          __('You have insufficient rights to view this object.'),\n      } as ErrorOptions\n    case EnumTaskbarEntityAccess.NotFound:\n      return {\n        statusCode: ErrorStatusCodes.NotFound,\n        title: __('Not Found'),\n        message:\n          (currentRouteMeta.messageNotFound as string) ??\n          __(\n            'Object with specified ID was not found. Try checking the URL for errors.',\n          ),\n      } as ErrorOptions\n    case EnumTaskbarEntityAccess.Granted:\n    default:\n      return null\n  }\n})\n\nprovideCurrentTaskbarTab({\n  currentTaskbarTabId,\n  currentTaskbarEntityKey: currentTaskbarEntityKey.value,\n  ...currentTaskbarTabData,\n})\n</script>\n\n<template>\n  <LayoutMain\n    v-if=\"showContent && pageError\"\n    class=\"flex grow flex-col items-center justify-center gap-4 bg-blue-50 dark:bg-gray-800\"\n  >\n    <CommonError :options=\"pageError\" authenticated />\n  </LayoutMain>\n  <slot v-else-if=\"showContent && pageError !== undefined\" />\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  computed,\n  onActivated,\n  onDeactivated,\n  ref,\n  watch,\n  type ComputedRef,\n  type WatchHandle,\n} from 'vue'\n\nimport useMetaTitle from '#shared/composables/useMetaTitle.ts'\n\ninterface PageOptions {\n  metaTitle?: ComputedRef<string>\n}\n\nexport const usePage = (pageOptions: PageOptions) => {\n  const pageActive = ref(true)\n\n  const pageInactive = computed(() => !pageActive.value)\n\n  const { metaTitle } = pageOptions\n\n  let stopMetaTitleWatcher: WatchHandle | undefined\n\n  const { setViewTitle } = useMetaTitle()\n\n  onActivated(() => {\n    pageActive.value = true\n\n    if (metaTitle) {\n      stopMetaTitleWatcher = watch(\n        metaTitle,\n        (newValue) => {\n          setViewTitle(newValue)\n        },\n        { immediate: true },\n      )\n    }\n  })\n\n  onDeactivated(() => {\n    pageActive.value = false\n\n    stopMetaTitleWatcher?.()\n  })\n\n  return {\n    pageActive,\n    pageInactive,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentTaskbarItemStateUpdatesDocument = gql`\n    subscription userCurrentTaskbarItemStateUpdates($taskbarItemId: ID!) {\n  userCurrentTaskbarItemStateUpdates(taskbarItemId: $taskbarItemId) {\n    stateChanged\n  }\n}\n    `;\nexport function useUserCurrentTaskbarItemStateUpdatesSubscription(variables: Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables> | ReactiveFunction<Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentTaskbarItemStateUpdatesSubscription, Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentTaskbarItemStateUpdatesSubscription, Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentTaskbarItemStateUpdatesSubscription, Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserCurrentTaskbarItemStateUpdatesSubscription, Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables>(UserCurrentTaskbarItemStateUpdatesDocument, variables, options);\n}\nexport type UserCurrentTaskbarItemStateUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserCurrentTaskbarItemStateUpdatesSubscription, Types.UserCurrentTaskbarItemStateUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ref, type Ref } from 'vue'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\nimport SubscriptionHandler from '#shared/server/apollo/handler/SubscriptionHandler.ts'\nimport type { FormUpdaterOptions } from '#shared/types/form.ts'\n\nimport { useUserCurrentTaskbarItemStateUpdatesSubscription } from '../graphql/subscriptions/userCurrentTaskbarItemStateUpdates.api.ts'\n\nexport const useTaskbarTabStateUpdates = (\n  currentTaskbarTabId: Ref<string | undefined>,\n  form: Ref<FormRef | undefined>,\n  autoSaveTriggerFormUpdater: (options?: FormUpdaterOptions) => void,\n) => {\n  const skipNextStateUpdate = ref(false)\n  const applyTaskbarState = ref(false)\n\n  const setSkipNextStateUpdate = (skip: boolean) => {\n    // When it's after a applay taskbar state it was not a manual change in the current tab.\n    if (skip && applyTaskbarState.value) {\n      skipNextStateUpdate.value = false\n      return\n    }\n\n    skipNextStateUpdate.value = skip\n  }\n\n  const stateUpdatesSubscription = new SubscriptionHandler(\n    useUserCurrentTaskbarItemStateUpdatesSubscription(\n      () => ({\n        taskbarItemId: currentTaskbarTabId.value!,\n      }),\n      () => ({\n        enabled: !!currentTaskbarTabId.value,\n      }),\n    ),\n  )\n\n  stateUpdatesSubscription.onSubscribed().then(() => {\n    stateUpdatesSubscription.onResult((result) => {\n      let listenFormUpdaterProcessing: string | undefined\n      if (\n        currentTaskbarTabId.value &&\n        !skipNextStateUpdate.value &&\n        result.data?.userCurrentTaskbarItemStateUpdates.stateChanged\n      ) {\n        listenFormUpdaterProcessing = form.value?.formNode.on(\n          'message-removed',\n          ({ payload }) => {\n            if (\n              !listenFormUpdaterProcessing ||\n              payload.key !== 'formUpdaterProcessing'\n            ) {\n              return\n            }\n\n            applyTaskbarState.value = false\n            form.value?.formNode.off(listenFormUpdaterProcessing)\n          },\n        )\n\n        applyTaskbarState.value = true\n\n        autoSaveTriggerFormUpdater({\n          includeDirtyFields: true,\n          additionalParams: {\n            taskbarId: currentTaskbarTabId.value,\n            applyTaskbarState: true,\n          },\n        })\n      }\n\n      setSkipNextStateUpdate(false)\n    })\n  })\n\n  return { setSkipNextStateUpdate }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { FormRef, FormValues } from '#shared/components/Form/types.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\n\nimport type { TicketSidebarPlugin } from '../components/TicketSidebar/plugins/types.ts'\nimport type { ComputedRef, Ref } from 'vue'\n\nexport enum TicketSidebarScreenType {\n  TicketCreate = 'ticket-create',\n  TicketDetailView = 'ticket-detail-view',\n}\n\nexport interface TicketSidebarContext {\n  ticket?: Maybe<ComputedRef<TicketById>>\n  isTicketEditable?: ComputedRef<boolean>\n  screenType: TicketSidebarScreenType\n  form?: FormRef\n  formValues: FormValues\n  currentTaskbarTabId?: Ref<string | undefined>\n}\n\nexport enum TicketSidebarButtonBadgeType {\n  Info = 'info',\n  Warning = 'warning',\n  Danger = 'danger',\n}\n\nexport type TicketSidebarButtonBadgeDetails = {\n  label: string\n  type?: TicketSidebarButtonBadgeType\n  value: string | number\n}\n\nexport interface TicketSidebarContentProps {\n  context: TicketSidebarContext\n  sidebarPlugin: TicketSidebarPlugin\n}\n\nexport interface TicketSidebarProps extends TicketSidebarContentProps {\n  sidebar: string\n  selected?: boolean\n}\n\nexport interface TicketSidebarWrapperProps\n  extends Omit<TicketSidebarProps, 'context'> {\n  badge?: TicketSidebarButtonBadgeDetails\n  updateIndicator?: boolean\n}\n\nexport type TicketSidebarEmits = {\n  show: []\n  hide: []\n}\n\nexport interface TicketSidebarInformation {\n  shownSidebars: Ref<Record<string, boolean>>\n  activeSidebar: Ref<string | null>\n  availableSidebarPlugins: Ref<Record<string, TicketSidebarPlugin>>\n  sidebarPlugins: Record<string, TicketSidebarPlugin>\n  hasSidebar: Ref<boolean>\n  showSidebar: (sidebar: string) => void\n  hideSidebar: (sidebar: string) => void\n  switchSidebar: (newSidebar: string) => void\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { reactive } from 'vue'\n\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nexport const usePersistentStates = () => {\n  const persistentStates = reactive<ObjectLike>({})\n\n  return { persistentStates }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketAttributesFragmentDoc } from '../fragments/ticketAttributes.api';\nimport { TicketMentionFragmentDoc } from '../fragments/ticketMention.api';\nimport { ReferencingTicketFragmentDoc } from '../fragments/referencingTicket.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketDocument = gql`\n    query ticket($ticketId: ID, $ticketInternalId: Int, $ticketNumber: String) {\n  ticket(\n    ticket: {ticketId: $ticketId, ticketInternalId: $ticketInternalId, ticketNumber: $ticketNumber}\n  ) {\n    ...ticketAttributes\n    createArticleType {\n      id\n      name\n    }\n    mentions(first: 20) {\n      totalCount\n      edges {\n        node {\n          ...ticketMention\n        }\n        cursor\n      }\n    }\n    checklist {\n      id\n      completed\n      incomplete\n      total\n      complete\n    }\n    referencingChecklistTickets {\n      ...referencingTicket\n    }\n  }\n}\n    ${TicketAttributesFragmentDoc}\n${TicketMentionFragmentDoc}\n${ReferencingTicketFragmentDoc}`;\nexport function useTicketQuery(variables: Types.TicketQueryVariables | VueCompositionApi.Ref<Types.TicketQueryVariables> | ReactiveFunction<Types.TicketQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketQuery, Types.TicketQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketQuery, Types.TicketQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketQuery, Types.TicketQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketQuery, Types.TicketQueryVariables>(TicketDocument, variables, options);\n}\nexport function useTicketLazyQuery(variables: Types.TicketQueryVariables | VueCompositionApi.Ref<Types.TicketQueryVariables> | ReactiveFunction<Types.TicketQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketQuery, Types.TicketQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketQuery, Types.TicketQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketQuery, Types.TicketQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketQuery, Types.TicketQueryVariables>(TicketDocument, variables, options);\n}\nexport type TicketQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketQuery, Types.TicketQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, inject, provide } from 'vue'\n\nimport { useTicketQuery } from '#shared/entities/ticket/graphql/queries/ticket.api.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport type { TicketInformation } from '#desktop/entities/ticket/types.ts'\n\nimport type { Ref, InjectionKey } from 'vue'\n\nexport const TICKET_KEY = Symbol('ticket') as InjectionKey<TicketInformation>\n\nexport const initializeTicketInformation = (\n  internalId: Ref<number | string>,\n) => {\n  const ticketId = computed(() =>\n    convertToGraphQLId('Ticket', internalId.value),\n  )\n\n  const ticketQuery = new QueryHandler(\n    // Currently we need no subscribeToMore here, because the tab registration holds the ticket subscription.\n    useTicketQuery(\n      () => ({\n        ticketId: ticketId.value,\n      }),\n      { fetchPolicy: 'cache-first' },\n    ),\n  )\n\n  const result = ticketQuery.result()\n\n  const ticket = computed(() => result.value?.ticket as TicketById)\n\n  return {\n    ticket,\n    ticketId,\n    ticketInternalId: internalId as Ref<number>,\n  }\n}\n\nexport const provideTicketInformation = (data: TicketInformation) => {\n  provide(TICKET_KEY, data)\n}\n\nexport const useTicketInformation = () => {\n  return inject(TICKET_KEY) as TicketInformation\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonUpdateIndicator from '#desktop/components/CommonUpdateIndicator/CommonUpdateIndicator.vue'\n\nimport {\n  TicketSidebarButtonBadgeType,\n  type TicketSidebarButtonBadgeDetails,\n} from '../../types/sidebar.ts'\n\ninterface Props {\n  name: string\n  label: string\n  icon: string\n  selected?: boolean\n  badge?: TicketSidebarButtonBadgeDetails\n  updateIndicator?: boolean\n}\n\nconst props = defineProps<Props>()\n\ndefineEmits<{\n  click: [string]\n}>()\n\nconst processedBadgeValue = computed(() => {\n  const value = props.badge?.value\n\n  if (!value) return\n\n  if (!(typeof value === 'number')) return value\n\n  if (value > 99) return '99+'\n\n  return value\n})\n\nconst badgeColor = computed(() => {\n  switch (props.badge?.type) {\n    case TicketSidebarButtonBadgeType.Warning:\n      return 'bg-yellow-500 text-yellow-100'\n    case TicketSidebarButtonBadgeType.Danger:\n      return 'bg-red-500 text-pink-100'\n    case TicketSidebarButtonBadgeType.Info:\n    default:\n      return 'bg-pink-500 text-white'\n  }\n})\n</script>\n\n<template>\n  <div class=\"relative\">\n    <CommonButton\n      v-tooltip=\"$t(label)\"\n      :class=\"{\n        'text-black outline-1 outline-offset-1 outline-blue-800 focus:outline-1 focus:outline-offset-1 focus:outline-blue-800 dark:text-white':\n          selected,\n      }\"\n      size=\"large\"\n      variant=\"neutral\"\n      :icon=\"icon\"\n      :aria-label=\"$t(label)\"\n      @click=\"$emit('click', name)\"\n    />\n    <CommonUpdateIndicator v-if=\"!selected && updateIndicator\" />\n    <CommonLabel\n      v-if=\"badge\"\n      size=\"xs\"\n      class=\"pointer-events-none absolute -bottom-2 block! max-w-10 min-w-4 truncate rounded-full border-2 border-white px-0.5 py-0.5 text-center font-bold text-white ltr:-right-1.5 rtl:-left-1.5 dark:border-gray-500\"\n      :class=\"[badgeColor]\"\n      :aria-label=\"$t(badge.label)\"\n      role=\"status\"\n    >\n      {{ processedBadgeValue }}\n    </CommonLabel>\n  </div>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport UserError from '#shared/errors/UserError.ts'\n\nimport type { ApolloError } from '@apollo/client/core'\n\nexport const handleUserErrors = (error: UserError | ApolloError) => {\n  if (error instanceof UserError) {\n    useNotifications().notify({\n      id: error.userErrorId,\n      message: error.getFirstErrorMessage(),\n      type: NotificationTypes.Error,\n    })\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nconst { hasPermission } = useSessionStore()\n\nconst isAdmin = computed(() => hasPermission('admin.checklist'))\n</script>\n\n<template>\n  <CommonLabel tag=\"p\">\n    {{ $t('No checklist templates have been created yet.') }}\n  </CommonLabel>\n  <CommonLabel tag=\"p\">\n    {{ $t('With checklist templates you can pre-fill your checklists.') }}\n  </CommonLabel>\n  <CommonLink v-if=\"isAdmin\" link=\"/#manage/checklists\" size=\"medium\">\n    {{ $t('Create a new checklist template in the admin interface.') }}\n  </CommonLink>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { EnumTicketStateColorCode } from '#shared/graphql/types.ts'\n\nimport CommonTicketStateIndicatorIcon from '#desktop/components/CommonTicketStateIndicator/CommonTicketStateIndicatorIcon.vue'\n\ninterface Props {\n  ticket?: Partial<TicketById> | null\n  unauthorized?: boolean\n  classes?: {\n    indicator?: string\n    label?: string\n  }\n}\n\nconst props = defineProps<Props>()\n\nconst ticketId = computed(() => `ticket-${props.ticket?.internalId}`)\n\nconst ticketState = computed(() => {\n  return props.ticket?.state?.name || ''\n})\n\nconst ticketColorCode = computed(() => {\n  return props.ticket?.stateColorCode || EnumTicketStateColorCode.Open\n})\n</script>\n\n<template>\n  <div v-if=\"unauthorized\" class=\"flex grow items-center gap-2\">\n    <CommonIcon class=\"shrink-0 text-red-500\" size=\"tiny\" name=\"x-lg\" />\n    <CommonLabel class=\"text-black dark:text-white\">{{\n      $t('Access denied')\n    }}</CommonLabel>\n  </div>\n  <CommonLink\n    v-else\n    class=\"flex! grow items-start gap-2 rounded-md break-words group-hover/tab:bg-blue-600 hover:no-underline! focus-visible:rounded-md focus-visible:outline-hidden group-hover/tab:dark:bg-blue-900\"\n    style=\"word-break: break-word\"\n    :link=\"`/tickets/${ticket?.internalId}`\"\n    internal\n  >\n    <CommonTicketStateIndicatorIcon\n      class=\"ms-0.5 mt-1 shrink-0\"\n      :class=\"classes?.indicator || ''\"\n      :color-code=\"ticketColorCode\"\n      :label=\"ticketState\"\n      :aria-labelledby=\"ticketId\"\n      icon-size=\"tiny\"\n    />\n    <CommonLabel\n      :id=\"ticketId\"\n      class=\"mt-0.5 text-blue-800\"\n      :class=\"classes?.label\"\n    >\n      {{ ticket?.title }}\n    </CommonLabel>\n  </CommonLink>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, ref, useTemplateRef } from 'vue'\n\nimport { type ChecklistItem as ChecklistItemType } from '#shared/graphql/types.ts'\nimport { getIdFromGraphQLId } from '#shared/graphql/utils.ts'\n\nimport CommonActionMenu from '#desktop/components/CommonActionMenu/CommonActionMenu.vue'\nimport CommonInlineEdit from '#desktop/components/CommonInlineEdit/CommonInlineEdit.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonTicketLabel from '#desktop/components/CommonTicketLabel/CommonTicketLabel.vue'\n\ninterface Props {\n  item: ChecklistItemType\n  isReordering: boolean\n  isUpdating?: boolean\n  onEditItem: (item: ChecklistItemType) => Promise<void>\n}\n\nconst props = defineProps<Props>()\n\nconst emit = defineEmits<{\n  'remove-item': [ChecklistItemType]\n  'set-item-checked': [ChecklistItemType]\n}>()\n\nconst isTicketItem = computed(() => !!props.item.ticketReference)\n\nconst noAccessToLinkedTicket = computed(\n  () => !props.item.ticketReference?.ticket,\n)\n\nconst inlineEditInstance = useTemplateRef('inline-edit')\n\nconst removeItem = () => {\n  emit('remove-item', props.item)\n}\n\nconst setItemCheckedState = (newValue: boolean) => {\n  if (props.item.checked === newValue) return\n  emit('set-item-checked', { ...props.item, checked: newValue })\n}\n\nconst editItem = async (newValue: string) => {\n  return props.onEditItem({ ...props.item, text: newValue })\n}\n\nconst isEditing = ref(false)\n\nconst actions: MenuItem[] = [\n  {\n    key: 'check',\n    label: __('Check item'),\n    icon: 'check2-square',\n    onClick: () => setItemCheckedState(true),\n    show: (entity) => !entity?.checked && !isTicketItem.value,\n  },\n  {\n    key: 'uncheck',\n    label: __('Uncheck item'),\n    icon: 'check2-square',\n    onClick: () => setItemCheckedState(false),\n    show: (entity) => entity?.checked && !isTicketItem.value,\n  },\n  {\n    key: 'edit',\n    icon: 'pencil',\n    label: __('Edit item'),\n    show: () => !isTicketItem.value,\n    onClick: () => inlineEditInstance.value?.activateEditing(),\n  },\n  {\n    key: 'remove',\n    label: __('Remove item'),\n    variant: 'danger',\n    icon: 'trash3',\n    onClick: () => removeItem(),\n  },\n]\n\ndefineExpose({\n  focusInput: () => inlineEditInstance.value?.activateEditing(),\n  quitEditing: () => {\n    isEditing.value = false\n  },\n})\n</script>\n\n<template>\n  <li\n    class=\"flex min-h-10 gap-2 overflow-x-clip rounded-lg bg-blue-200 p-2 text-stone-200 dark:bg-gray-700 dark:text-neutral-500\"\n    :class=\"{ 'items-center': isEditing }\"\n  >\n    <template v-if=\"isReordering\">\n      <CommonIcon\n        name=\"grip-vertical\"\n        class=\"mt-1.5 inline-block shrink-0\"\n        size=\"xs\"\n      />\n      <CommonIcon\n        v-if=\"!isTicketItem\"\n        tabindex=\"0\"\n        class=\"mt-1.5 shrink-0 text-gray-100 outline-hidden focus-visible:outline-1 focus-visible:outline-offset-1 focus-visible:outline-blue-800 dark:text-neutral-400\"\n        size=\"xs\"\n        role=\"checkbox\"\n        aria-readonly=\"true\"\n        :aria-checked=\"item.checked\"\n        :aria-labelledby=\"`checklist-item-${getIdFromGraphQLId(item.id)}`\"\n        :name=\"item.checked ? 'check-square-fill' : 'square-fill'\"\n      />\n    </template>\n    <template v-else>\n      <FormKit\n        v-if=\"!isTicketItem\"\n        :id=\"`checked_${item.id}`\"\n        type=\"checkbox\"\n        :classes=\"{\n          outer: 'flex items-center shrink-0 self-start mt-0.5',\n          inner: 'rtl:!ml-0 ltr:!mr-0',\n        }\"\n        :model-value=\"item.checked\"\n        :name=\"`checkbox-checklist-item-${getIdFromGraphQLId(item.id)}`\"\n        :aria-label=\"item.text\"\n        @update:model-value=\"setItemCheckedState($event as boolean)\"\n      />\n    </template>\n\n    <CommonTicketLabel\n      v-if=\"isTicketItem\"\n      :classes=\"{\n        indicator: isReordering ? '-ms-0.5' : '',\n      }\"\n      :unauthorized=\"noAccessToLinkedTicket\"\n      :ticket=\"item.ticketReference?.ticket\"\n    />\n\n    <CommonInlineEdit\n      v-else\n      ref=\"inline-edit\"\n      v-model:editing=\"isEditing\"\n      detect-links\n      alternative-background\n      block\n      :loading=\"isUpdating\"\n      :value=\"item.text\"\n      :placeholder=\"$t('Text or ticket identifier')\"\n      :class=\"{ 'pointer-events-none': isReordering }\"\n      :classes=\"{\n        label: 'dark:text-white text-black',\n        input: 'dark:text-white text-black',\n      }\"\n      :disabled=\"isReordering\"\n      @submit-edit=\"editItem\"\n    />\n\n    <CommonActionMenu\n      v-if=\"!inlineEditInstance?.isEditing && !isReordering\"\n      button-size=\"small\"\n      class=\"mt-0.5 flex!\"\n      placement=\"arrowEnd\"\n      :actions=\"actions\"\n      :entity=\"item\"\n    />\n  </li>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { animations } from '@formkit/drag-and-drop'\nimport { dragAndDrop } from '@formkit/drag-and-drop/vue'\nimport { computed, type Ref, ref, useTemplateRef } from 'vue'\n\nimport { type ChecklistItem as ChecklistItemType } from '#shared/graphql/types.ts'\nimport { getIdFromGraphQLId } from '#shared/graphql/utils.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonInlineEdit from '#desktop/components/CommonInlineEdit/CommonInlineEdit.vue'\nimport CommonTicketLabel from '#desktop/components/CommonTicketLabel/CommonTicketLabel.vue'\nimport ChecklistItem from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistItem.vue'\n\ninterface Props {\n  title: string\n  items: ChecklistItemType[]\n  readOnly: boolean\n  isUpdatingOrder: boolean\n  isEditingNewItem: boolean\n  isUpdatingChecklistTitle: boolean\n  noDefaultTitle: boolean\n  updatingItemIds: Set<ID>\n  onEditItem: (item: ChecklistItemType) => Promise<void>\n  onUpdateTitle: (title: string) => Promise<void>\n}\n\nconst emit = defineEmits<{\n  'add-item': []\n  'remove-item': [ChecklistItemType]\n  'set-item-checked': [ChecklistItemType]\n  'save-order': [Array<ChecklistItemType>, stopReordering: () => void]\n}>()\n\nconst props = defineProps<Props>()\n\nconst isReordering = ref(false)\nconst checklistCopy = ref<ChecklistItemType[]>([]) // Create a copy if reordering is aborted\n\nconst checklistItems = computed({\n  get: () => (isReordering.value ? checklistCopy.value : [...props.items]),\n  set: (value: ChecklistItemType[]) => {\n    checklistCopy.value = value\n  },\n})\n\nconst checklistInstance = useTemplateRef('checklist')\nconst containerElement = useTemplateRef<HTMLElement>('container')\nconst checklistTitleInstance = useTemplateRef('title')\n\ndragAndDrop({\n  parent: containerElement as Ref<HTMLElement>,\n  values: checklistCopy,\n  plugins: [animations()],\n  draggable: (el) => {\n    // Library bug: The draggable attribute is not set always\n    // Workaround to set the attribute manually\n    // https://github.com/formkit/drag-and-drop/issues/96\n\n    el.setAttribute('draggable', isReordering.value.toString())\n\n    return isReordering.value\n  },\n  dropZoneClass: 'opacity-0',\n})\n\nconst focusNewItem = () => {\n  checklistInstance.value?.at(-1)?.focusInput()\n}\n\nconst addNewItem = () => {\n  emit('add-item')\n}\n\nconst editItem = async (item: ChecklistItemType) => {\n  return props.onEditItem(item)\n}\n\nconst resetOrder = () => {\n  isReordering.value = false\n  checklistCopy.value = []\n}\n\nconst saveOrder = () => {\n  emit('save-order', checklistCopy.value, resetOrder)\n}\n\nconst startReordering = () => {\n  isReordering.value = true\n  checklistCopy.value = props.items\n}\n\ndefineExpose({\n  focusTitle: () => checklistTitleInstance.value?.activateEditing(),\n  quitItemEditing: (index: number) =>\n    checklistInstance.value?.at(index)?.quitEditing(),\n  quitReordering: resetOrder,\n  focusNewItem,\n})\n</script>\n\n<template>\n  <div class=\"grid grid-cols-2 gap-x-2\">\n    <CommonInlineEdit\n      id=\"checklistTitle\"\n      ref=\"title\"\n      data-test-id=\"checklistTitle\"\n      :class=\"{\n        'pointer-events-none opacity-60': isUpdatingChecklistTitle,\n      }\"\n      :value=\"title\"\n      :initial-edit-value=\"noDefaultTitle ? title : ''\"\n      block\n      :disabled=\"readOnly\"\n      :loading=\"isUpdatingChecklistTitle\"\n      :aria-disabled=\"isUpdatingChecklistTitle\"\n      :label-attrs=\"{\n        role: 'heading',\n        'aria-level': '3',\n      }\"\n      :label=\"$t('Edit checklist title')\"\n      class=\"col-span-2 mb-3 w-full\"\n      @submit-edit=\"onUpdateTitle\"\n    />\n    <TransitionGroup\n      v-if=\"checklistItems.length\"\n      ref=\"container\"\n      tag=\"ul\"\n      name=\"none\"\n      class=\"col-span-2 mb-2 space-y-2\"\n      :class=\"{ 'pointer-events-none opacity-60': isUpdatingOrder }\"\n    >\n      <template v-for=\"item in checklistItems\" :key=\"item.id\">\n        <li v-if=\"readOnly\" class=\"flex gap-2 py-2\">\n          <template v-if=\"!item.ticketReference\">\n            <CommonIcon\n              tabindex=\"0\"\n              class=\"ms-1 me-0.5 mt-1 text-gray-100 outline-hidden focus-visible:outline-1 focus-visible:outline-offset-1 focus-visible:outline-blue-800 dark:text-neutral-400\"\n              size=\"xs\"\n              role=\"checkbox\"\n              aria-readonly=\"true\"\n              :aria-checked=\"item.checked\"\n              :aria-labelledby=\"`checklist-item-${getIdFromGraphQLId(item.id)}`\"\n              :name=\"item.checked ? 'check-square-fill' : 'square-fill'\"\n            />\n            <CommonInlineEdit\n              :id=\"`checklist-item-${getIdFromGraphQLId(item.id)}`\"\n              detect-links\n              :classes=\"{\n                label: 'dark:text-white text-black',\n              }\"\n              disabled\n              :value=\"item.text || '-'\"\n            />\n          </template>\n          <!-- No CommonLabel to preserve the link detection -->\n          <CommonTicketLabel\n            v-else\n            :unauthorized=\"!item.ticketReference.ticket\"\n            :ticket=\"item.ticketReference.ticket\"\n          />\n        </li>\n\n        <ChecklistItem\n          v-else\n          ref=\"checklist\"\n          :item=\"item\"\n          :class=\"{\n            'cursor-grab active:cursor-grabbing': isReordering,\n            'pointer-events-none opacity-60': updatingItemIds.has(item.id),\n          }\"\n          :is-updating=\"updatingItemIds.has(item.id)\"\n          :data-test-id=\"item.id\"\n          :aria-disabled=\"updatingItemIds.has(item.id)\"\n          :is-reordering=\"isReordering\"\n          @remove-item=\"$emit('remove-item', $event)\"\n          @set-item-checked=\"$emit('set-item-checked', $event)\"\n          @edit-item=\"editItem\"\n        />\n      </template>\n    </TransitionGroup>\n\n    <CommonLabel v-else class=\"col-span-2 text-neutral-500\" size=\"small\">\n      {{ $t('No checklist items yet') }}\n    </CommonLabel>\n\n    <template v-if=\"checklistItems.length > 1 && !readOnly\">\n      <Transition mode=\"out-in\">\n        <CommonButton\n          v-if=\"!isReordering\"\n          prefix-icon=\"list\"\n          :disabled=\"isEditingNewItem\"\n          @click=\"startReordering\"\n          >{{ $t('Reorder') }}\n        </CommonButton>\n        <CommonButton\n          v-else\n          :prefix-icon=\"isReordering ? 'check2' : 'list'\"\n          :disabled=\"isUpdatingOrder\"\n          @click=\"resetOrder\"\n          >{{ $t('Cancel') }}\n        </CommonButton>\n      </Transition>\n    </template>\n\n    <template v-if=\"!readOnly\">\n      <Transition mode=\"out-in\">\n        <CommonButton\n          v-if=\"!isReordering\"\n          v-tooltip=\"$t('Create a new checklist item')\"\n          size=\"medium\"\n          :disabled=\"isEditingNewItem\"\n          class=\"col-end-3 justify-self-end ltr:mr-2 rtl:ml-2\"\n          icon=\"plus-square-fill\"\n          @click=\"addNewItem\"\n        />\n        <CommonButton\n          v-else\n          size=\"small\"\n          variant=\"submit\"\n          class=\"col-end-3 justify-self-end\"\n          :disabled=\"isUpdatingOrder\"\n          @click=\"saveOrder\"\n        >\n          {{ $t('Save') }}\n        </CommonButton>\n      </Transition>\n    </template>\n  </div>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport CommonPopover from '#shared/components/CommonPopover/CommonPopover.vue'\nimport { usePopover } from '#shared/components/CommonPopover/usePopover.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonPopoverMenu from '#desktop/components/CommonPopoverMenu/CommonPopoverMenu.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\n\ninterface Props {\n  templates: MenuItem[]\n}\n\ndefineProps<Props>()\n\nconst { popover, popoverTarget, toggle } = usePopover()\n</script>\n\n<template>\n  <CommonLabel class=\"mx-auto text-center\" tag=\"p\">\n    {{ $t('Or choose a checklist template.') }}\n  </CommonLabel>\n\n  <CommonPopover\n    ref=\"popover\"\n    :owner=\"popoverTarget\"\n    placement=\"end\"\n    orientation=\"autoVertical\"\n  >\n    <CommonPopoverMenu :popover=\"popover\" :items=\"templates\" />\n  </CommonPopover>\n\n  <CommonButton\n    ref=\"popoverTarget\"\n    class=\"mx-auto\"\n    size=\"medium\"\n    suffix-icon=\"chevron-down\"\n    variant=\"secondary\"\n    @click=\"toggle(true)\"\n  >\n    {{ $t('Add From a Template') }}\n  </CommonButton>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const ChecklistTemplatesDocument = gql`\n    query checklistTemplates($onlyActive: Boolean = false) {\n  checklistTemplates(onlyActive: $onlyActive) {\n    id\n    name\n    active\n  }\n}\n    `;\nexport function useChecklistTemplatesQuery(variables: Types.ChecklistTemplatesQueryVariables | VueCompositionApi.Ref<Types.ChecklistTemplatesQueryVariables> | ReactiveFunction<Types.ChecklistTemplatesQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>(ChecklistTemplatesDocument, variables, options);\n}\nexport function useChecklistTemplatesLazyQuery(variables: Types.ChecklistTemplatesQueryVariables | VueCompositionApi.Ref<Types.ChecklistTemplatesQueryVariables> | ReactiveFunction<Types.ChecklistTemplatesQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>(ChecklistTemplatesDocument, variables, options);\n}\nexport type ChecklistTemplatesQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.ChecklistTemplatesQuery, Types.ChecklistTemplatesQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const ChecklistTemplateUpdatesDocument = gql`\n    subscription checklistTemplateUpdates($onlyActive: Boolean = false) {\n  checklistTemplateUpdates(onlyActive: $onlyActive) {\n    checklistTemplates {\n      id\n      name\n      active\n    }\n  }\n}\n    `;\nexport function useChecklistTemplateUpdatesSubscription(variables: Types.ChecklistTemplateUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.ChecklistTemplateUpdatesSubscriptionVariables> | ReactiveFunction<Types.ChecklistTemplateUpdatesSubscriptionVariables> = {}, options: VueApolloComposable.UseSubscriptionOptions<Types.ChecklistTemplateUpdatesSubscription, Types.ChecklistTemplateUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.ChecklistTemplateUpdatesSubscription, Types.ChecklistTemplateUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.ChecklistTemplateUpdatesSubscription, Types.ChecklistTemplateUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.ChecklistTemplateUpdatesSubscription, Types.ChecklistTemplateUpdatesSubscriptionVariables>(ChecklistTemplateUpdatesDocument, variables, options);\n}\nexport type ChecklistTemplateUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.ChecklistTemplateUpdatesSubscription, Types.ChecklistTemplateUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed } from 'vue'\n\nimport type {\n  ChecklistTemplate,\n  ChecklistTemplatesQuery,\n  ChecklistTemplateUpdatesSubscription,\n  ChecklistTemplateUpdatesSubscriptionVariables,\n  TicketChecklistAddMutation,\n} from '#shared/graphql/types.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport type { AddNewChecklistInput } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/types.ts'\nimport { useChecklistTemplatesQuery } from '#desktop/pages/ticket/graphql/queries/checklistTemplates.api.ts'\nimport { ChecklistTemplateUpdatesDocument } from '#desktop/pages/ticket/graphql/subscriptions/checklistTemplateUpdates.api.ts'\n\ntype CreateNewChecklist = (\n  input?: Omit<AddNewChecklistInput, 'ticketId'>,\n  options?: { focusLastItem: boolean },\n) => Promise<void | Maybe<TicketChecklistAddMutation>>\n\nexport const useChecklistTemplates = (\n  createNewChecklist: CreateNewChecklist,\n) => {\n  const checklistTemplatesQuery = new QueryHandler(\n    useChecklistTemplatesQuery(\n      {\n        onlyActive: true,\n      },\n      {\n        fetchPolicy: 'cache-and-network',\n      },\n    ),\n  )\n\n  const templatesLoading = checklistTemplatesQuery.loading()\n  const checklistTemplates = checklistTemplatesQuery.result()\n\n  const isLoadingTemplates = computed(() => {\n    // Return already true when an templates exists already in the cache.\n    if (checklistTemplates.value !== undefined) return false\n\n    return templatesLoading.value\n  })\n\n  checklistTemplatesQuery.subscribeToMore<\n    ChecklistTemplateUpdatesSubscriptionVariables,\n    ChecklistTemplateUpdatesSubscription\n  >({\n    document: ChecklistTemplateUpdatesDocument,\n    variables: {\n      onlyActive: true,\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data?.checklistTemplateUpdates.checklistTemplates)\n        return null as unknown as ChecklistTemplatesQuery\n\n      return {\n        checklistTemplates:\n          subscriptionData.data.checklistTemplateUpdates.checklistTemplates,\n      }\n    },\n  })\n\n  const applyChecklistTemplate = async (\n    template: Partial<ChecklistTemplate>,\n  ) => {\n    await createNewChecklist(\n      {\n        templateId: template.id,\n      },\n      {\n        focusLastItem: false,\n      },\n    )\n  }\n\n  const checklistTemplatesMenuItems = computed(\n    () =>\n      checklistTemplates.value?.checklistTemplates?.map((data) => ({\n        label: data.name as string,\n        key: data.id,\n        onClick: () => applyChecklistTemplate(data),\n      })) || null,\n  )\n  return { checklistTemplatesMenuItems, isLoadingTemplates }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ReferencingTicketFragmentDoc } from '../../../../../../shared/entities/ticket/graphql/fragments/referencingTicket.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistDocument = gql`\n    query ticketChecklist($ticketId: ID, $ticketInternalId: Int, $ticketNumber: String) {\n  ticketChecklist(\n    ticket: {ticketId: $ticketId, ticketInternalId: $ticketInternalId, ticketNumber: $ticketNumber}\n  ) {\n    id\n    name\n    completed\n    incomplete\n    items {\n      id\n      text\n      checked\n      ticketReference {\n        ticket {\n          ...referencingTicket\n        }\n      }\n    }\n  }\n}\n    ${ReferencingTicketFragmentDoc}`;\nexport function useTicketChecklistQuery(variables: Types.TicketChecklistQueryVariables | VueCompositionApi.Ref<Types.TicketChecklistQueryVariables> | ReactiveFunction<Types.TicketChecklistQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>(TicketChecklistDocument, variables, options);\n}\nexport function useTicketChecklistLazyQuery(variables: Types.TicketChecklistQueryVariables | VueCompositionApi.Ref<Types.TicketChecklistQueryVariables> | ReactiveFunction<Types.TicketChecklistQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>(TicketChecklistDocument, variables, options);\n}\nexport type TicketChecklistQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketChecklistQuery, Types.TicketChecklistQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ReferencingTicketFragmentDoc } from '../../../../../../shared/entities/ticket/graphql/fragments/referencingTicket.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistUpdatesDocument = gql`\n    subscription ticketChecklistUpdates($ticketId: ID!) {\n  ticketChecklistUpdates(ticketId: $ticketId) {\n    ticketChecklist {\n      id\n      name\n      completed\n      incomplete\n      items {\n        id\n        text\n        checked\n        ticketReference {\n          ticket {\n            ...referencingTicket\n          }\n        }\n      }\n    }\n    removedTicketChecklist\n  }\n}\n    ${ReferencingTicketFragmentDoc}`;\nexport function useTicketChecklistUpdatesSubscription(variables: Types.TicketChecklistUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.TicketChecklistUpdatesSubscriptionVariables> | ReactiveFunction<Types.TicketChecklistUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.TicketChecklistUpdatesSubscription, Types.TicketChecklistUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.TicketChecklistUpdatesSubscription, Types.TicketChecklistUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.TicketChecklistUpdatesSubscription, Types.TicketChecklistUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.TicketChecklistUpdatesSubscription, Types.TicketChecklistUpdatesSubscriptionVariables>(TicketChecklistUpdatesDocument, variables, options);\n}\nexport type TicketChecklistUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.TicketChecklistUpdatesSubscription, Types.TicketChecklistUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, type ComputedRef } from 'vue'\n\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport type {\n  Checklist,\n  TicketChecklistQuery,\n  TicketChecklistUpdatesSubscription,\n  TicketChecklistUpdatesSubscriptionVariables,\n} from '#shared/graphql/types.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport { useTicketChecklistQuery } from '#desktop/pages/ticket/graphql/queries/ticketChecklist.api.ts'\nimport { TicketChecklistUpdatesDocument } from '#desktop/pages/ticket/graphql/subscriptions/ticketChecklistUpdates.api.ts'\n\nexport const useTicketChecklist = (\n  /**\n   * TicketId is always available since we use it from the route not `ticket` directly\n   */\n  ticketId: ComputedRef<string>,\n  ticket: ComputedRef<TicketById | undefined>,\n) => {\n  const checklistQuery = new QueryHandler(\n    useTicketChecklistQuery(() => ({\n      ticketId: ticketId.value,\n    })),\n  )\n\n  checklistQuery.subscribeToMore<\n    TicketChecklistUpdatesSubscriptionVariables,\n    TicketChecklistUpdatesSubscription\n  >(() => ({\n    document: TicketChecklistUpdatesDocument,\n    variables: {\n      ticketId: ticketId.value,\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (\n        !subscriptionData.data.ticketChecklistUpdates.ticketChecklist &&\n        !subscriptionData.data.ticketChecklistUpdates.removedTicketChecklist\n      ) {\n        return null as unknown as TicketChecklistQuery\n      }\n\n      const { ticketChecklist } = subscriptionData.data.ticketChecklistUpdates\n\n      // When a complete checklist was removed, we need to update the result.\n      if (!ticketChecklist || prev.ticketChecklist === null) {\n        return {\n          ticketChecklist,\n        }\n      }\n\n      // Always return null when we need not change anything related to the data.\n      return null as unknown as TicketChecklistQuery\n    },\n  }))\n\n  const checklistResult = checklistQuery.result()\n  const checklistLoading = checklistQuery.loading()\n\n  const checklist = computed(\n    () => checklistResult?.value?.ticketChecklist as Checklist,\n  )\n\n  const isLoadingChecklist = computed(() => {\n    // Return true when the ticket is not loaded yet, because some output is related to the ticket data (e.g. readonly).\n\n    if (!ticket.value) return true\n\n    // Return already true when a checklist result already exists from the cache, also\n    // when maybe a loading is in progress(because of cache + network).\n    if (checklist.value !== undefined) return false\n\n    return checklistLoading.value\n  })\n\n  const incompleteItemCount = computed(() => checklist.value?.incomplete)\n\n  return {\n    checklist,\n    incompleteItemCount,\n    isLoadingChecklist,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { onBeforeUnmount, onMounted, useTemplateRef } from 'vue'\n\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonActionMenu from '#desktop/components/CommonActionMenu/CommonActionMenu.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport { useScrollPosition } from '#desktop/composables/useScrollPosition.ts'\n\ninterface Props {\n  title: string\n  icon: string\n  entity?: ObjectLike\n  actions?: MenuItem[]\n}\n\ndefineProps<Props>()\n\nconst scrollPosition = defineModel<number>({\n  required: true,\n  default: 0,\n})\n\nconst scrollContainer = useTemplateRef('scroll-container')\n\n// Handle scroll position (re)storing of the active sidebar, when navigating between taskbar tabs.\nuseScrollPosition(scrollContainer)\n\n// Handle scroll position (re)storing, when switching between different sidebars.\nonMounted(() => {\n  if (!scrollContainer?.value) return\n  scrollContainer.value.scrollTop = scrollPosition.value\n})\n\nonBeforeUnmount(() => {\n  if (!scrollContainer?.value) return\n  scrollPosition.value = scrollContainer.value.scrollTop\n})\n</script>\n\n<template>\n  <div class=\"flex w-full gap-2 p-3\">\n    <CommonLabel\n      tag=\"h2\"\n      class=\"min-h-7 grow gap-1.5\"\n      size=\"large\"\n      :prefix-icon=\"icon\"\n      icon-color=\"text-stone-200 dark:text-neutral-500\"\n    >\n      {{ $t(title) }}\n    </CommonLabel>\n\n    <CommonActionMenu\n      v-if=\"actions\"\n      class=\"text-gray-100 dark:text-neutral-400\"\n      no-single-action-mode\n      placement=\"arrowEnd\"\n      :entity=\"entity\"\n      :actions=\"actions\"\n    />\n  </div>\n\n  <div\n    ref=\"scroll-container\"\n    class=\"flex h-full flex-col gap-3 overflow-y-auto p-3\"\n  >\n    <slot />\n  </div>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistAddDocument = gql`\n    mutation ticketChecklistAdd($ticketId: ID!, $templateId: ID) {\n  ticketChecklistAdd(ticketId: $ticketId, templateId: $templateId) {\n    checklist {\n      id\n      name\n      items {\n        id\n        text\n        checked\n      }\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketChecklistAddMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketChecklistAddMutation, Types.TicketChecklistAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketChecklistAddMutation, Types.TicketChecklistAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketChecklistAddMutation, Types.TicketChecklistAddMutationVariables>(TicketChecklistAddDocument, options);\n}\nexport type TicketChecklistAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketChecklistAddMutation, Types.TicketChecklistAddMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistDeleteDocument = gql`\n    mutation ticketChecklistDelete($checklistId: ID!) {\n  ticketChecklistDelete(checklistId: $checklistId) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketChecklistDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketChecklistDeleteMutation, Types.TicketChecklistDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketChecklistDeleteMutation, Types.TicketChecklistDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketChecklistDeleteMutation, Types.TicketChecklistDeleteMutationVariables>(TicketChecklistDeleteDocument, options);\n}\nexport type TicketChecklistDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketChecklistDeleteMutation, Types.TicketChecklistDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistItemDeleteDocument = gql`\n    mutation ticketChecklistItemDelete($checklistId: ID!, $checklistItemId: ID!) {\n  ticketChecklistItemDelete(\n    checklistId: $checklistId\n    checklistItemId: $checklistItemId\n  ) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketChecklistItemDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketChecklistItemDeleteMutation, Types.TicketChecklistItemDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketChecklistItemDeleteMutation, Types.TicketChecklistItemDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketChecklistItemDeleteMutation, Types.TicketChecklistItemDeleteMutationVariables>(TicketChecklistItemDeleteDocument, options);\n}\nexport type TicketChecklistItemDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketChecklistItemDeleteMutation, Types.TicketChecklistItemDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistItemOrderUpdateDocument = gql`\n    mutation ticketChecklistItemOrderUpdate($checklistId: ID!, $order: [ID!]!) {\n  ticketChecklistItemOrderUpdate(checklistId: $checklistId, order: $order) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketChecklistItemOrderUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketChecklistItemOrderUpdateMutation, Types.TicketChecklistItemOrderUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketChecklistItemOrderUpdateMutation, Types.TicketChecklistItemOrderUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketChecklistItemOrderUpdateMutation, Types.TicketChecklistItemOrderUpdateMutationVariables>(TicketChecklistItemOrderUpdateDocument, options);\n}\nexport type TicketChecklistItemOrderUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketChecklistItemOrderUpdateMutation, Types.TicketChecklistItemOrderUpdateMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistItemUpsertDocument = gql`\n    mutation ticketChecklistItemUpsert($checklistId: ID!, $checklistItemId: ID, $input: TicketChecklistItemInput!) {\n  ticketChecklistItemUpsert(\n    checklistId: $checklistId\n    checklistItemId: $checklistItemId\n    input: $input\n  ) {\n    checklistItem {\n      id\n      text\n      checked\n      ticketReference {\n        ticket {\n          id\n          internalId\n          number\n          title\n          state {\n            id\n            name\n          }\n          stateColorCode\n        }\n      }\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketChecklistItemUpsertMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketChecklistItemUpsertMutation, Types.TicketChecklistItemUpsertMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketChecklistItemUpsertMutation, Types.TicketChecklistItemUpsertMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketChecklistItemUpsertMutation, Types.TicketChecklistItemUpsertMutationVariables>(TicketChecklistItemUpsertDocument, options);\n}\nexport type TicketChecklistItemUpsertMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketChecklistItemUpsertMutation, Types.TicketChecklistItemUpsertMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketChecklistTitleUpdateDocument = gql`\n    mutation ticketChecklistTitleUpdate($checklistId: ID!, $title: String) {\n  ticketChecklistTitleUpdate(checklistId: $checklistId, title: $title) {\n    checklist {\n      id\n      name\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketChecklistTitleUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketChecklistTitleUpdateMutation, Types.TicketChecklistTitleUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketChecklistTitleUpdateMutation, Types.TicketChecklistTitleUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketChecklistTitleUpdateMutation, Types.TicketChecklistTitleUpdateMutationVariables>(TicketChecklistTitleUpdateDocument, options);\n}\nexport type TicketChecklistTitleUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketChecklistTitleUpdateMutation, Types.TicketChecklistTitleUpdateMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script lang=\"ts\" setup>\nimport { cloneDeep } from 'lodash-es'\nimport { computed, nextTick, ref, useTemplateRef } from 'vue'\n\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { handleUserErrors } from '#shared/errors/utils.ts'\nimport type {\n  ChecklistItem,\n  TicketChecklistItemInput,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n/index.ts'\nimport { getApolloClient } from '#shared/server/apollo/client.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport ChecklistEmptyTemplates from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistEmptyTemplates.vue'\nimport ChecklistItems from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistItems.vue'\nimport ChecklistTemplates from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/TicketSidebarChecklistContent/ChecklistTemplates.vue'\nimport type { AddNewChecklistInput } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/types.ts'\nimport { useChecklistTemplates } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/useChecklistTemplates.ts'\nimport { useTicketChecklist } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarChecklist/useTicketChecklist.ts'\nimport TicketSidebarContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarContent.vue'\nimport { useTicketInformation } from '#desktop/pages/ticket/composables/useTicketInformation.ts'\nimport { useTicketNumber } from '#desktop/pages/ticket/composables/useTicketNumber.ts'\nimport { useTicketChecklistAddMutation } from '#desktop/pages/ticket/graphql/mutations/ticketChecklistAdd.api.ts'\nimport { useTicketChecklistDeleteMutation } from '#desktop/pages/ticket/graphql/mutations/ticketChecklistDelete.api.ts'\nimport { useTicketChecklistItemDeleteMutation } from '#desktop/pages/ticket/graphql/mutations/ticketChecklistItemDelete.api.ts'\nimport { useTicketChecklistItemOrderUpdateMutation } from '#desktop/pages/ticket/graphql/mutations/ticketChecklistItemOrderUpdate.api.ts'\nimport { useTicketChecklistItemUpsertMutation } from '#desktop/pages/ticket/graphql/mutations/ticketChecklistItemUpsert.api.ts'\nimport { useTicketChecklistTitleUpdateMutation } from '#desktop/pages/ticket/graphql/mutations/ticketChecklistTitleUpdate.api.ts'\nimport type { TicketSidebarContentProps } from '#desktop/pages/ticket/types/sidebar.ts'\n\ndefineProps<TicketSidebarContentProps>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\nconst checklistItemsInstance = useTemplateRef('checklist-items')\n\nconst { cache: apolloCache } = getApolloClient()\nconst { ticket, ticketId, isTicketEditable } = useTicketInformation()\nconst { ticketNumberWithTicketHook } = useTicketNumber(ticket)\n\nconst { checklist, isLoadingChecklist } = useTicketChecklist(ticketId, ticket)\n\nconst checklistTitle = computed(\n  () =>\n    checklist.value?.name ||\n    i18n.t('%s Checklist', ticketNumberWithTicketHook.value),\n)\n\nconst addNewChecklistMutation = new MutationHandler(\n  useTicketChecklistAddMutation(),\n)\n\nconst createNewChecklist = async (\n  input?: Omit<AddNewChecklistInput, 'ticketId'>,\n  options = { focusLastItem: true },\n) => {\n  if (ticket.value?.id) {\n    return addNewChecklistMutation\n      .send({\n        ...input,\n        ticketId: ticket.value.id,\n      })\n      .then(() => {\n        if (options.focusLastItem)\n          nextTick(() => checklistItemsInstance.value?.focusNewItem())\n      })\n      .catch(handleUserErrors)\n  }\n}\n\nconst checklistTitleUpdateMutation = new MutationHandler(\n  useTicketChecklistTitleUpdateMutation(),\n)\n\nconst checklistDeleteMutation = new MutationHandler(\n  useTicketChecklistDeleteMutation(),\n)\n\nconst removeChecklist = async () => {\n  const { waitForVariantConfirmation } = useConfirmation()\n\n  const confirmed = await waitForVariantConfirmation('delete')\n\n  if (confirmed)\n    await checklistDeleteMutation\n      .send({\n        checklistId: checklist.value?.id as string,\n      })\n      .catch(handleUserErrors)\n}\n\nconst updateTitle = async (title: string) => {\n  return checklistTitleUpdateMutation\n    .send({\n      title,\n      checklistId: checklist.value?.id as string,\n    })\n    .then(() => {})\n    .catch(handleUserErrors)\n}\n\nconst itemAddMutation = new MutationHandler(\n  useTicketChecklistItemUpsertMutation({\n    update: (cache, { data }) => {\n      if (!data || !checklist.value) return\n\n      const { ticketChecklistItemUpsert } = data\n      if (!ticketChecklistItemUpsert?.checklistItem) return\n\n      const newIdPresent = checklist.value?.items.find((item) => {\n        return item.id === ticketChecklistItemUpsert.checklistItem?.id\n      })\n\n      if (newIdPresent) return\n\n      cache.modify({\n        id: cache.identify(checklist.value),\n        fields: {\n          items(currentItems, { toReference }) {\n            return [\n              ...currentItems,\n              toReference(ticketChecklistItemUpsert.checklistItem!),\n            ]\n          },\n          complete(currentComplete) {\n            return currentComplete + 1\n          },\n          total(totalCount) {\n            return totalCount + 1\n          },\n          incomplete(incompleteCount) {\n            return incompleteCount + 1\n          },\n        },\n      })\n    },\n  }),\n  {\n    errorNotificationMessage: __('Failed to add new checklist item.'),\n  },\n)\n\nconst itemOrderMutation = new MutationHandler(\n  useTicketChecklistItemOrderUpdateMutation(),\n  {\n    errorNotificationMessage: __('Failed to save checklist order.'),\n  },\n)\n\nconst itemUpsertMutation = new MutationHandler(\n  useTicketChecklistItemUpsertMutation(),\n  {\n    errorNotificationMessage: __('Failed to update checklist item.'),\n  },\n)\n\nconst itemDeleteMutation = new MutationHandler(\n  useTicketChecklistItemDeleteMutation(),\n  {\n    errorNotificationMessage: __('Failed to delete checklist item.'),\n  },\n)\n\nconst isUpdatingOrder = itemOrderMutation.loading()\nconst isAddingNewItem = itemAddMutation.loading()\nconst isAddingNewChecklist = addNewChecklistMutation.loading()\nconst isUpdatingChecklistTitle = checklistTitleUpdateMutation.loading()\nconst updatingItemIds = ref<Set<ID>>(new Set())\n\nconst deleteUpdatingItemId = (id: ID) => {\n  updatingItemIds.value.delete(id)\n}\n\nconst addUpdatingItemId = (id: ID) => {\n  updatingItemIds.value.add(id)\n}\n\nconst modifyIncompleteItemCountCache = (increase: boolean) => {\n  const currentCheckList = checklist.value!\n  const previousIncompleteItemCount = currentCheckList.incomplete\n  const previousCompleted = currentCheckList.completed\n\n  let incompleteItemCount = currentCheckList.incomplete ?? 0\n\n  // Update the incomplete item count based on the mutated checked state, not waiting for the subscription to kick in.\n  //   The recalculation below does not take into account any ticket checklist items and their state.\n  //   Their change will update the incomplete item count via the subscription update after a short delay.\n  if (increase) incompleteItemCount += 1\n  else incompleteItemCount -= 1\n\n  if (incompleteItemCount < 0 || !currentCheckList.items)\n    incompleteItemCount = 0\n  else if (incompleteItemCount > currentCheckList.items.length)\n    incompleteItemCount = currentCheckList.items.length\n\n  const checklistId = apolloCache.identify(currentCheckList)\n\n  apolloCache.modify({\n    id: checklistId,\n    fields: {\n      incomplete() {\n        return incompleteItemCount\n      },\n      total() {\n        return currentCheckList.items.length\n      },\n      completed() {\n        return incompleteItemCount === 0\n      },\n      complete() {\n        return currentCheckList.items.length - incompleteItemCount\n      },\n    },\n  })\n\n  // Return function to restore cache to the previous state.\n  return () => {\n    apolloCache.modify({\n      id: checklistId,\n      fields: {\n        incomplete() {\n          return previousIncompleteItemCount\n        },\n        completed() {\n          return previousCompleted\n        },\n        total() {\n          return currentCheckList.items.length\n        },\n        complete() {\n          return currentCheckList.items.length - previousIncompleteItemCount\n        },\n      },\n    })\n  }\n}\n\nconst modifyCheckedCache = (item: ChecklistItem) => {\n  const checklistItemId = apolloCache.identify(item)\n\n  apolloCache.modify({\n    id: checklistItemId,\n    fields: {\n      checked() {\n        return item.checked\n      },\n    },\n  })\n\n  const restoreIncompleteItemCountCache = modifyIncompleteItemCountCache(\n    !item.checked,\n  )\n\n  // Return function to restore cache to the previous state.\n  return () => {\n    restoreIncompleteItemCountCache()\n\n    apolloCache.modify({\n      id: checklistItemId,\n      fields: {\n        checked() {\n          return !item.checked\n        },\n      },\n    })\n  }\n}\n\nconst modifyItemsCache = (items: ChecklistItem[]) => {\n  const currentCheckList = checklist.value\n\n  const checklistId = apolloCache.identify(currentCheckList)\n\n  apolloCache.modify({\n    id: checklistId,\n    fields: {\n      items(_, { toReference }) {\n        // We need to transform it to a real reference, that we do not lose the connection.\n        // Side effect is that data updates on single items are not applied.\n        return items.map((item) => toReference(item, true))\n      },\n    },\n  })\n}\n\nconst updateItem = async (itemId: string, input: TicketChecklistItemInput) => {\n  addUpdatingItemId(itemId)\n\n  return itemUpsertMutation\n    .send({\n      checklistId: checklist.value?.id as string,\n      checklistItemId: itemId,\n      input,\n    })\n    .finally(() => {\n      deleteUpdatingItemId(itemId)\n    })\n}\n\nconst setItemCheckedState = async (item: ChecklistItem) => {\n  const restoreCache = modifyCheckedCache(item)\n\n  addUpdatingItemId(item.id)\n\n  await updateItem(item.id, { checked: item.checked })\n    .catch((error) => {\n      restoreCache()\n      handleUserErrors(error)\n    })\n    .finally(() => {\n      deleteUpdatingItemId(item.id)\n    })\n}\n\nconst addNewItem = async () =>\n  itemAddMutation\n    .send({\n      checklistId: checklist.value?.id as string,\n      input: {\n        text: '',\n        checked: false,\n      },\n    })\n    .then(() => {\n      checklistItemsInstance.value?.focusNewItem()\n    })\n    .catch(handleUserErrors)\n\nconst editItem = async (item: ChecklistItem) => {\n  addUpdatingItemId(item.id)\n\n  return updateItem(item.id, { text: item.text })\n    .then(() => {})\n    .catch(handleUserErrors)\n    .finally(() => {\n      deleteUpdatingItemId(item.id)\n    })\n}\n\nconst saveItemsOrder = (items: ChecklistItem[], stopReordering: () => void) => {\n  itemOrderMutation\n    .send({\n      checklistId: checklist.value?.id as string,\n      order: items.map((item) => item.id),\n    })\n    .then(() => {\n      // Modify the cache before leaving the reorder mode to prevent flickering (e.g. when the subscription is slow) and\n      // currently we have the list not in the return data.\n      // Here we need no restore because in catch situation we are not leaving the reordering mode.\n      modifyItemsCache(items)\n\n      stopReordering()\n    })\n    .catch(handleUserErrors)\n}\n\nconst removeItem = async (item: ChecklistItem) => {\n  if (item.text?.length) {\n    const { waitForVariantConfirmation } = useConfirmation()\n\n    const confirmed = await waitForVariantConfirmation('delete')\n    if (!confirmed) return\n  }\n\n  const previousChecklistItems = cloneDeep(checklist.value?.items || [])\n  apolloCache.evict({ id: apolloCache.identify(item) })\n  apolloCache.gc()\n\n  const restoreCache = modifyIncompleteItemCountCache(false)\n\n  addUpdatingItemId(item.id)\n\n  return itemDeleteMutation\n    .send({\n      checklistId: checklist.value?.id as string,\n      checklistItemId: item.id,\n    })\n    .catch((error) => {\n      modifyItemsCache(previousChecklistItems as ChecklistItem[])\n      restoreCache()\n      return handleUserErrors(error)\n    })\n    .finally(() => {\n      deleteUpdatingItemId(item.id)\n    })\n}\n\nconst checklistActions: MenuItem[] = [\n  {\n    key: 'rename',\n    label: __('Rename checklist'),\n    icon: 'input-cursor-text',\n    onClick: () => checklistItemsInstance.value?.focusTitle(),\n    show: () => !!checklist.value,\n  },\n  {\n    key: 'remove',\n    label: __('Remove checklist'),\n    variant: 'danger',\n    icon: 'trash3',\n    onClick: () => removeChecklist(),\n    show: () => !!checklist.value,\n  },\n]\n\nconst { isLoadingTemplates, checklistTemplatesMenuItems } =\n  useChecklistTemplates(createNewChecklist)\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :actions=\"!isTicketEditable ? undefined : checklistActions\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n  >\n    <CommonLoader :loading=\"isLoadingChecklist\">\n      <div class=\"flex flex-col gap-3\">\n        <ChecklistItems\n          v-if=\"checklist\"\n          ref=\"checklist-items\"\n          :no-default-title=\"!!checklist.name\"\n          :updating-item-ids=\"updatingItemIds\"\n          :title=\"checklistTitle\"\n          :items=\"checklist.items\"\n          :read-only=\"!isTicketEditable\"\n          :is-updating-order=\"isUpdatingOrder\"\n          :is-editing-new-item=\"isAddingNewItem\"\n          :is-updating-checklist-title=\"isUpdatingChecklistTitle\"\n          @add-item=\"addNewItem\"\n          @remove-item=\"removeItem\"\n          @set-item-checked=\"setItemCheckedState\"\n          @edit-item=\"editItem\"\n          @save-order=\"saveItemsOrder\"\n          @update-title=\"updateTitle\"\n        />\n        <template v-else-if=\"isTicketEditable\">\n          <CommonButton\n            variant=\"primary\"\n            size=\"medium\"\n            block\n            :disabled=\"isAddingNewChecklist\"\n            @click=\"createNewChecklist()\"\n          >\n            {{ $t('Add Empty Checklist') }}\n          </CommonButton>\n\n          <ChecklistTemplates\n            v-if=\"\n              checklistTemplatesMenuItems &&\n              checklistTemplatesMenuItems?.length > 0\n            \"\n            :templates=\"checklistTemplatesMenuItems\"\n          />\n          <ChecklistEmptyTemplates v-else-if=\"!isLoadingTemplates\" />\n        </template>\n        <CommonLabel v-else>{{\n          $t('No checklist added to this ticket yet.')\n        }}</CommonLabel>\n      </div>\n    </CommonLoader>\n  </TicketSidebarContent>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, onMounted } from 'vue'\n\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport { useTicketInformation } from '#desktop/pages/ticket/composables/useTicketInformation.ts'\nimport {\n  type TicketSidebarProps,\n  type TicketSidebarEmits,\n  TicketSidebarButtonBadgeType,\n  type TicketSidebarButtonBadgeDetails,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../TicketSidebarWrapper.vue'\n\nimport TicketSidebarChecklistContent from './TicketSidebarChecklistContent.vue'\n\ndefineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst { ticket } = useTicketInformation()\n\nconst incompleteChecklistItemsCount = computed(\n  () => ticket.value?.checklist?.incomplete,\n)\n\nconst badge = computed<TicketSidebarButtonBadgeDetails | undefined>(() => {\n  const label = __('Incomplete checklist items')\n\n  if (!incompleteChecklistItemsCount.value) return\n\n  return {\n    type: TicketSidebarButtonBadgeType.Info,\n    value: incompleteChecklistItemsCount.value,\n    label,\n  }\n})\n\nonMounted(() => {\n  emit('show')\n})\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n    :badge=\"badge\"\n  >\n    <TicketSidebarChecklistContent\n      v-model=\"persistentStates\"\n      :context=\"context\"\n      :sidebar-plugin=\"sidebarPlugin\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport { TicketSidebarScreenType } from '../../../types/sidebar.ts'\nimport TicketSidebarChecklist from '../TicketSidebarChecklist/TicketSidebarChecklist.vue'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('Checklist'),\n  component: TicketSidebarChecklist,\n  permissions: ['ticket.agent'],\n  screens: [TicketSidebarScreenType.TicketDetailView],\n  icon: 'checklist',\n  order: 8000,\n  available: () => {\n    const { config } = useApplicationStore()\n\n    return Boolean(config.checklist)\n  },\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport type { Component } from 'vue'\n\nexport enum EntityType {\n  User = 'User',\n  Organization = 'Organization',\n}\n\nexport interface Entity<T = ObjectLike> {\n  array: T[]\n  totalCount: number\n}\n\nexport interface EntityModule {\n  type: EntityType\n  component: Component\n  emptyMessage: string\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport OrganizationEntity from '#desktop/components/CommonSimpleEntityList/entity/OrganizationEntity.vue'\nimport { EntityType } from '#desktop/components/CommonSimpleEntityList/types.ts'\n\nexport default {\n  type: EntityType.Organization,\n  component: OrganizationEntity,\n  emptyMessage: __('No organizations found'),\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport UserEntity from '#desktop/components/CommonSimpleEntityList/entity/UserEntity.vue'\nimport { EntityType } from '#desktop/components/CommonSimpleEntityList/types.ts'\n\nexport default {\n  type: EntityType.User,\n  component: UserEntity,\n  emptyMessage: __('No members found'),\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { EntityModule } from '#desktop/components/CommonSimpleEntityList/types.ts'\nimport { EntityType } from '#desktop/components/CommonSimpleEntityList/types.ts'\n\nconst modules = import.meta.glob<EntityModule>(['./*.ts', '!./index.ts'], {\n  eager: true,\n  import: 'default',\n})\n\nconst entityModules = Object.entries(modules).reduce(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  (acc, [_, module]) => {\n    acc[module.type] = module\n    return acc\n  },\n  {} as Record<EntityType, (typeof modules)[EntityType]>,\n)\n\nexport default entityModules\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\" generic=\"T\">\nimport { computed } from 'vue'\n\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonSectionCollapse from '#desktop/components/CommonSectionCollapse/CommonSectionCollapse.vue'\nimport CommonShowMoreButton from '#desktop/components/CommonShowMoreButton/CommonShowMoreButton.vue'\nimport entityModules from '#desktop/components/CommonSimpleEntityList/plugins/index.ts'\nimport {\n  type Entity,\n  EntityType,\n} from '#desktop/components/CommonSimpleEntityList/types.ts'\n\ninterface Props {\n  id: string\n  entity: Entity<ObjectLike>\n  type: EntityType\n  label?: string\n}\n\nconst props = defineProps<Props>()\n\nconst modelValue = defineModel<boolean>({\n  default: false,\n})\n\ndefineEmits<{\n  'load-more': []\n}>()\n\nconst entitySetup = computed(() => {\n  const { component, ...context } = entityModules[props.type]\n  return {\n    component,\n    context,\n    array: props.entity.array,\n  }\n})\n</script>\n\n<template>\n  <CommonSectionCollapse\n    :id=\"id\"\n    v-model=\"modelValue\"\n    :title=\"label\"\n    :no-header=\"!label\"\n  >\n    <ul v-if=\"entity.array?.length\" class=\"flex flex-col gap-1.5\">\n      <li v-for=\"item in entitySetup.array\" :key=\"`entity-${item.id}`\">\n        <component\n          :is=\"entitySetup.component\"\n          :entity=\"item\"\n          :context=\"entitySetup.context\"\n        />\n      </li>\n    </ul>\n\n    <CommonLabel v-if=\"!entity.array?.length\" class=\"block\"\n      >{{ entitySetup.context.emptyMessage }}\n    </CommonLabel>\n\n    <CommonShowMoreButton\n      v-if=\"entity\"\n      class=\"self-end\"\n      :entities=\"entity.array\"\n      :total-count=\"entity.totalCount\"\n      @click=\"$emit('load-more')\"\n    />\n  </CommonSectionCollapse>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, type ComputedRef } from 'vue'\n\nimport CommonUserAvatar from '#shared/components/CommonUserAvatar/CommonUserAvatar.vue'\nimport ObjectAttributes from '#shared/components/ObjectAttributes/ObjectAttributes.vue'\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\nimport { useTicketView } from '#shared/entities/ticket/composables/useTicketView.ts'\nimport type { Organization, UserQuery } from '#shared/graphql/types.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\nimport { normalizeEdges } from '#shared/utils/helpers.ts'\n\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonSectionCollapse from '#desktop/components/CommonSectionCollapse/CommonSectionCollapse.vue'\nimport CommonSimpleEntityList from '#desktop/components/CommonSimpleEntityList/CommonSimpleEntityList.vue'\nimport { EntityType } from '#desktop/components/CommonSimpleEntityList/types.ts'\nimport NavigationMenuList from '#desktop/components/NavigationMenu/NavigationMenuList.vue'\nimport { NavigationMenuDensity } from '#desktop/components/NavigationMenu/types.ts'\nimport type { TicketInformation } from '#desktop/entities/ticket/types.ts'\nimport { useTicketInformation } from '#desktop/pages/ticket/composables/useTicketInformation.ts'\nimport {\n  type TicketSidebarContentProps,\n  TicketSidebarScreenType,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarContent from '../TicketSidebarContent.vue'\n\ninterface Props extends TicketSidebarContentProps {\n  customer: UserQuery['user']\n  secondaryOrganizations: ReturnType<\n    typeof normalizeEdges<Partial<Organization>>\n  >\n  objectAttributes: ObjectAttribute[]\n}\n\nconst props = defineProps<Props>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\ndefineEmits<{\n  'load-more-secondary-organizations': []\n}>()\n\nconst CUSTOMER_FLYOUT_KEY = 'ticket-change-customer'\n\nconst { open: openChangeCustomerFlyout } = useFlyout({\n  name: CUSTOMER_FLYOUT_KEY,\n  component: () =>\n    import(\n      '#desktop/pages/ticket/components/TicketDetailView/actions/TicketChangeCustomer/TicketChangeCustomerFlyout.vue'\n    ),\n})\n\nlet ticket: TicketInformation['ticket']\nlet isTicketAgent: ComputedRef<boolean>\nlet isTicketEditable: ComputedRef<boolean>\n\n// :TODO find a way to provide the ticket via prop\nif (props.context.screenType === TicketSidebarScreenType.TicketDetailView) {\n  ;({ ticket } = useTicketInformation())\n  ;({ isTicketAgent, isTicketEditable } = useTicketView(ticket))\n}\n\nconst actions = computed<MenuItem[]>(() => [\n  {\n    key: CUSTOMER_FLYOUT_KEY,\n    label: __('Change customer'),\n    icon: 'person',\n    show: () => ticket && isTicketAgent.value && isTicketEditable.value,\n    onClick: () =>\n      openChangeCustomerFlyout({\n        ticket,\n      }),\n  },\n])\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n    :entity=\"customer\"\n    :actions=\"actions\"\n  >\n    <div class=\"flex gap-2\">\n      <CommonUserAvatar v-if=\"customer\" :entity=\"customer\" size=\"normal\" />\n      <div class=\"flex flex-col justify-center gap-px\">\n        <CommonLabel size=\"large\" class=\"text-gray-300! dark:text-neutral-400!\">\n          {{ customer?.fullname }}\n        </CommonLabel>\n\n        <CommonLink\n          v-if=\"customer?.organization\"\n          :link=\"`/organizations/${customer.organization?.internalId}`\"\n          class=\"text-sm leading-snug\"\n        >\n          {{ customer?.organization.name }}\n        </CommonLink>\n      </div>\n    </div>\n\n    <ObjectAttributes\n      :attributes=\"objectAttributes\"\n      :object=\"customer\"\n      :skip-attributes=\"['firstname', 'lastname']\"\n    />\n\n    <CommonSimpleEntityList\n      v-if=\"secondaryOrganizations.totalCount\"\n      id=\"customer-secondary-organizations\"\n      v-model=\"persistentStates.collapseOrganizations\"\n      :type=\"EntityType.Organization\"\n      :label=\"__('Secondary organizations')\"\n      :entity=\"secondaryOrganizations\"\n      @load-more=\"$emit('load-more-secondary-organizations')\"\n    />\n\n    <CommonSectionCollapse\n      id=\"customer-tickets\"\n      v-model=\"persistentStates.collapseTickets\"\n      :title=\"__('Tickets')\"\n    >\n      <NavigationMenuList\n        class=\"mt-1\"\n        :density=\"NavigationMenuDensity.Dense\"\n        :items=\"[\n          {\n            label: __('open tickets'),\n            icon: 'check-circle-no',\n            iconColor: 'fill-yellow-500',\n            count: customer?.ticketsCount?.open || 0,\n            route: '/search/ticket/open',\n          },\n          {\n            label: __('closed tickets'),\n            icon: 'check-circle-outline',\n            iconColor: 'fill-green-400',\n            count: customer?.ticketsCount?.closed || 0,\n            route: '/search/ticket/closed',\n          },\n        ]\"\n      />\n    </CommonSectionCollapse>\n  </TicketSidebarContent>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { watch, computed } from 'vue'\n\nimport { useUserDetail } from '#shared/entities/user/composables/useUserDetail.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  type TicketSidebarProps,\n  type TicketSidebarEmits,\n  TicketSidebarButtonBadgeType,\n  TicketSidebarScreenType,\n  type TicketSidebarButtonBadgeDetails,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../TicketSidebarWrapper.vue'\n\nimport TicketSidebarCustomerContent from './TicketSidebarCustomerContent.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst application = useApplicationStore()\n\n// TODO: only for now, implement correct situation for create/detail view.\nconst customerId = computed(() => Number(props.context.formValues.customer_id))\n\nconst {\n  user: customer,\n  secondaryOrganizations,\n  objectAttributes,\n  loadAllSecondaryOrganizations,\n} = useUserDetail(customerId)\n\nconst calculateBadgeType = (value: number) => {\n  if (!application.config.ui_sidebar_open_ticket_indicator_colored)\n    return TicketSidebarButtonBadgeType.Info\n\n  if (props.context.screenType === TicketSidebarScreenType.TicketDetailView)\n    value -= 1\n\n  switch (value) {\n    case 0:\n      return TicketSidebarButtonBadgeType.Info\n    case 1:\n      return TicketSidebarButtonBadgeType.Warning\n    case 2:\n    default:\n      return TicketSidebarButtonBadgeType.Danger\n  }\n}\n\nconst badge = computed<TicketSidebarButtonBadgeDetails | undefined>(() => {\n  const label = __('Open tickets')\n  const value = customer.value?.ticketsCount?.open\n\n  if (!value) return\n\n  const type = calculateBadgeType(Number(value))\n\n  return { label, value, type }\n})\n\n// When customerId is present, show the sidebar (for unknown customers the check is\n// already inside the available sidebar plugin).\nwatch(customerId, (newValue) => {\n  if (!newValue) {\n    emit('hide')\n    return\n  }\n\n  emit('show')\n})\n\n// On initial setup we show the sidebar if customerId is present.\nif (customerId.value) {\n  emit('show')\n}\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n    :badge=\"badge\"\n  >\n    <TicketSidebarCustomerContent\n      v-if=\"customer\"\n      v-model=\"persistentStates\"\n      :context=\"context\"\n      :sidebar-plugin=\"sidebarPlugin\"\n      :customer=\"customer\"\n      :secondary-organizations=\"secondaryOrganizations\"\n      :object-attributes=\"objectAttributes\"\n      @load-more-secondary-organizations=\"loadAllSecondaryOrganizations\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  TicketSidebarScreenType,\n  type TicketSidebarContext,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarCustomer from '../TicketSidebarCustomer/TicketSidebarCustomer.vue'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('Customer'),\n  component: TicketSidebarCustomer,\n  permissions: ['ticket.agent'],\n  screens: [\n    TicketSidebarScreenType.TicketDetailView,\n    TicketSidebarScreenType.TicketCreate,\n  ],\n  icon: 'person',\n  order: 1000,\n  available: (context: TicketSidebarContext) => {\n    // Consider the sidebar available only if a customer ID has been set to an integer ID.\n    //   In case of a string value, it's probably an unknown email address and therefore no customer to show.\n    return !!(\n      context.formValues.customer_id &&\n      typeof context.formValues.customer_id === 'number'\n    )\n  },\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useTouchDevice } from '#shared/composables/useTouchDevice.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\n\ninterface Props {\n  id: number\n  showId?: boolean\n  title: string\n  link: string\n  isEditable: boolean\n  tooltip: string\n}\n\nconst props = defineProps<Props>()\n\ndefineEmits<{\n  remove: [{ id: number }]\n}>()\n\nconst linkContent = computed(() => {\n  if (props.showId) {\n    return `#${props.id} ${props.title}`\n  }\n\n  return props.title\n})\n\nconst { isTouchDevice } = useTouchDevice()\n</script>\n\n<template>\n  <div class=\"flex gap-2\">\n    <CommonLink\n      class=\"grow\"\n      size=\"medium\"\n      external\n      open-in-new-tab\n      :link=\"link\"\n    >\n      {{ linkContent }}\n    </CommonLink>\n    <CommonButton\n      v-if=\"isEditable\"\n      v-tooltip=\"tooltip\"\n      icon=\"x-lg\"\n      size=\"small\"\n      variant=\"remove\"\n      :class=\"{\n        'opacity-0 group-hover:opacity-100 focus-visible:opacity-100':\n          !isTouchDevice,\n      }\"\n      @click=\"$emit('remove', { id })\"\n    />\n  </div>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport {\n  EnumTicketExternalReferencesIssueTrackerItemState,\n  type TicketExternalReferencesIssueTrackerItem,\n} from '#shared/graphql/types.ts'\n\nimport ExternalReferenceContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/ExternalReferenceContent.vue'\nimport ExternalReferenceLink from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/ExternalReferenceLink.vue'\nimport IssueTrackerBadgeList from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/IssueTrackerList/IssueTrackerItem/IssueTrackerBadgeList.vue'\n\ninterface Props {\n  issue: TicketExternalReferencesIssueTrackerItem\n  isEditable: boolean\n}\n\nconst props = defineProps<Props>()\n\ndefineEmits<{\n  unlink: [TicketExternalReferencesIssueTrackerItem]\n}>()\n\nconst issueStateColor = computed(() => {\n  if (\n    props.issue.state === EnumTicketExternalReferencesIssueTrackerItemState.Open\n  ) {\n    return 'text-yellow-500'\n  }\n\n  // Closed\n  return 'text-green-400'\n})\n\nconst issueStateName = computed(() => {\n  switch (props.issue.state) {\n    case EnumTicketExternalReferencesIssueTrackerItemState.Closed:\n      return 'check-circle-outline'\n    case EnumTicketExternalReferencesIssueTrackerItemState.Open:\n    default:\n      return 'check-circle-no'\n  }\n})\n</script>\n\n<template>\n  <div class=\"group flex gap-2\">\n    <CommonIcon\n      role=\"status\"\n      class=\"flex-shrink-0\"\n      :class=\"issueStateColor\"\n      :label=\"__('Issue status')\"\n      :aria-roledescription=\"$t('issue status: %s', $t(issue.state))\"\n      :name=\"issueStateName\"\n      size=\"small\"\n    />\n\n    <div class=\"grow space-y-2.5\">\n      <ExternalReferenceLink\n        :id=\"issue.issueId\"\n        :is-editable=\"isEditable\"\n        :link=\"issue.url\"\n        show-id\n        :title=\"issue.title\"\n        :tooltip=\"$t('Unlink issue')\"\n        @remove=\"$emit('unlink', issue)\"\n      />\n\n      <ExternalReferenceContent\n        v-if=\"issue.milestone\"\n        :label=\"$t('Milestone')\"\n        :values=\"[issue.milestone]\"\n      />\n\n      <ExternalReferenceContent\n        v-if=\"issue.assignees?.length\"\n        :label=\"issue.assignees.length > 1 ? $t('Assignees') : $t('Assignee')\"\n        :values=\"issue.assignees\"\n      />\n\n      <ExternalReferenceContent\n        v-if=\"issue.labels?.length\"\n        :label=\"$t('Labels')\"\n      >\n        <IssueTrackerBadgeList :badges=\"issue.labels\" />\n      </ExternalReferenceContent>\n    </div>\n  </div>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketExternalReferencesIssueTrackerItemListDocument = gql`\n    query ticketExternalReferencesIssueTrackerItemList($issueTrackerType: EnumTicketExternalReferencesIssueTrackerType!, $ticketId: ID, $issueTrackerLinks: [UriHttpString!]) {\n  ticketExternalReferencesIssueTrackerItemList(\n    issueTrackerType: $issueTrackerType\n    input: {issueTrackerLinks: $issueTrackerLinks, ticketId: $ticketId}\n  ) {\n    assignees\n    issueId\n    labels {\n      color\n      textColor\n      title\n    }\n    milestone\n    state\n    title\n    url\n  }\n}\n    `;\nexport function useTicketExternalReferencesIssueTrackerItemListQuery(variables: Types.TicketExternalReferencesIssueTrackerItemListQueryVariables | VueCompositionApi.Ref<Types.TicketExternalReferencesIssueTrackerItemListQueryVariables> | ReactiveFunction<Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>(TicketExternalReferencesIssueTrackerItemListDocument, variables, options);\n}\nexport function useTicketExternalReferencesIssueTrackerItemListLazyQuery(variables?: Types.TicketExternalReferencesIssueTrackerItemListQueryVariables | VueCompositionApi.Ref<Types.TicketExternalReferencesIssueTrackerItemListQueryVariables> | ReactiveFunction<Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>(TicketExternalReferencesIssueTrackerItemListDocument, variables, options);\n}\nexport type TicketExternalReferencesIssueTrackerItemListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketExternalReferencesIssueTrackerItemListQuery, Types.TicketExternalReferencesIssueTrackerItemListQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { isEqual } from 'lodash-es'\nimport { computed, ref, type Ref, watch } from 'vue'\n\nimport { EnumTicketExternalReferencesIssueTrackerType } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport { useTicketExternalReferencesIssueTrackerItemListQuery } from '#desktop/pages/ticket/graphql/queries/ticketExternalReferencesIssueTrackerList.api.ts'\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nexport const useTicketExternalIssueTracker = (\n  screenType: TicketSidebarScreenType,\n  issueTrackerType: EnumTicketExternalReferencesIssueTrackerType,\n  links: Ref<string[]>,\n  ticketId?: string,\n) => {\n  const skipNextLinkUpdate = ref(false)\n\n  const issueTrackerQuery = new QueryHandler(\n    useTicketExternalReferencesIssueTrackerItemListQuery(\n      () => ({\n        ticketId,\n        issueTrackerType,\n        issueTrackerLinks: ticketId ? undefined : links.value,\n      }),\n      () => ({\n        enabled:\n          screenType === TicketSidebarScreenType.TicketCreate\n            ? links.value.length > 0\n            : !!ticketId,\n        fetchPolicy:\n          screenType === TicketSidebarScreenType.TicketCreate\n            ? 'cache-first'\n            : 'cache-and-network',\n      }),\n    ),\n    {\n      errorShowNotification: false,\n    },\n  )\n\n  const isLoading = issueTrackerQuery.loading()\n\n  const queryResult = issueTrackerQuery.result()\n\n  const queryError = issueTrackerQuery.operationError()\n\n  const trackerTypeTranslationMap = {\n    [EnumTicketExternalReferencesIssueTrackerType.Github]: __('GitHub'),\n    [EnumTicketExternalReferencesIssueTrackerType.Gitlab]: __('GitLab'),\n  }\n\n  const error = computed(() =>\n    queryError.value\n      ? i18n.t(\n          `Error fetching information from %s. Please contact your administrator.`,\n          trackerTypeTranslationMap[issueTrackerType],\n        )\n      : null,\n  )\n\n  const issueList = computed(\n    () => queryResult.value?.ticketExternalReferencesIssueTrackerItemList,\n  )\n\n  const isLoadingIssues = computed(() => {\n    // Return already true when a checklist result already exists from the cache, also\n    // when maybe a loading is in progress(because of cache + network).\n    if (issueList.value !== undefined) return false\n\n    return isLoading.value\n  })\n\n  const issueListUrls = computed(() => {\n    return issueList.value?.map((item) => item.url)\n  })\n\n  if (ticketId) {\n    watch(links, (newValue) => {\n      if (isEqual(newValue, issueListUrls.value) || skipNextLinkUpdate.value) {\n        skipNextLinkUpdate.value = false\n\n        return\n      }\n\n      issueTrackerQuery.refetch()\n    })\n  }\n\n  return { isLoadingIssues, issueList, skipNextLinkUpdate, error }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketExternalReferencesIssueTrackerItemAddDocument = gql`\n    mutation ticketExternalReferencesIssueTrackerItemAdd($issueTrackerLink: UriHttpString!, $issueTrackerType: EnumTicketExternalReferencesIssueTrackerType!, $ticketId: ID) {\n  ticketExternalReferencesIssueTrackerItemAdd(\n    issueTrackerLink: $issueTrackerLink\n    issueTrackerType: $issueTrackerType\n    ticketId: $ticketId\n  ) {\n    issueTrackerItem {\n      assignees\n      issueId\n      labels {\n        color\n        textColor\n        title\n      }\n      milestone\n      state\n      title\n      url\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketExternalReferencesIssueTrackerItemAddMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIssueTrackerItemAddMutation, Types.TicketExternalReferencesIssueTrackerItemAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIssueTrackerItemAddMutation, Types.TicketExternalReferencesIssueTrackerItemAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketExternalReferencesIssueTrackerItemAddMutation, Types.TicketExternalReferencesIssueTrackerItemAddMutationVariables>(TicketExternalReferencesIssueTrackerItemAddDocument, options);\n}\nexport type TicketExternalReferencesIssueTrackerItemAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketExternalReferencesIssueTrackerItemAddMutation, Types.TicketExternalReferencesIssueTrackerItemAddMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketExternalReferencesIssueTrackerItemRemoveDocument = gql`\n    mutation ticketExternalReferencesIssueTrackerItemRemove($issueTrackerLink: UriHttpString!, $issueTrackerType: EnumTicketExternalReferencesIssueTrackerType!, $ticketId: ID!) {\n  ticketExternalReferencesIssueTrackerItemRemove(\n    issueTrackerLink: $issueTrackerLink\n    issueTrackerType: $issueTrackerType\n    ticketId: $ticketId\n  ) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketExternalReferencesIssueTrackerItemRemoveMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIssueTrackerItemRemoveMutation, Types.TicketExternalReferencesIssueTrackerItemRemoveMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIssueTrackerItemRemoveMutation, Types.TicketExternalReferencesIssueTrackerItemRemoveMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketExternalReferencesIssueTrackerItemRemoveMutation, Types.TicketExternalReferencesIssueTrackerItemRemoveMutationVariables>(TicketExternalReferencesIssueTrackerItemRemoveDocument, options);\n}\nexport type TicketExternalReferencesIssueTrackerItemRemoveMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketExternalReferencesIssueTrackerItemRemoveMutation, Types.TicketExternalReferencesIssueTrackerItemRemoveMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { cloneDeep } from 'lodash-es'\nimport { computed, toRef, watch } from 'vue'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\nimport {\n  EnumTicketExternalReferencesIssueTrackerType,\n  type TicketExternalReferencesIssueTrackerItem,\n  type TicketExternalReferencesIssueTrackerItemListQuery,\n} from '#shared/graphql/types.ts'\nimport { getApolloClient } from '#shared/server/apollo/client.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport IssueTrackerItem from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/IssueTrackerList/IssueTrackerItem.vue'\nimport { useTicketExternalIssueTracker } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/useTicketExternalIssueTracker.ts'\nimport type { ExternalReferencesFormValues } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/types.ts'\nimport { useTicketExternalReferencesIssueTrackerItemAddMutation } from '#desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIssueTrackerItemAdd.api.ts'\nimport { useTicketExternalReferencesIssueTrackerItemRemoveMutation } from '#desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIssueTrackerItemRemove.api.ts'\nimport { TicketExternalReferencesIssueTrackerItemListDocument } from '#desktop/pages/ticket/graphql/queries/ticketExternalReferencesIssueTrackerList.api.ts'\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\ninterface Props {\n  screenType: TicketSidebarScreenType\n  isTicketEditable: boolean\n  trackerType: EnumTicketExternalReferencesIssueTrackerType\n  flyoutConfig: {\n    name: string\n    icon: string\n    label: string\n    inputPlaceholder: string\n  }\n  issueLinks: string[]\n  form?: FormRef\n  ticketId?: string\n}\n\nconst props = defineProps<Props>()\n\nconst emit = defineEmits<{\n  error: [string | null]\n}>()\n\nconst { isLoadingIssues, issueList, skipNextLinkUpdate, error } =\n  useTicketExternalIssueTracker(\n    props.screenType,\n    props.trackerType,\n    toRef(props, 'issueLinks'),\n    props.ticketId,\n  )\n\nwatch(error, () => {\n  emit('error', error.value)\n})\n\nconst unlinkMutation = new MutationHandler(\n  useTicketExternalReferencesIssueTrackerItemRemoveMutation(),\n  {\n    errorShowNotification: false,\n  },\n)\n\nconst removeIssueLinkListCacheUpdate = (\n  issue: TicketExternalReferencesIssueTrackerItem,\n) => {\n  const { cache } = getApolloClient()\n\n  const queryOptions = {\n    query: TicketExternalReferencesIssueTrackerItemListDocument,\n    variables: {\n      issueTrackerType: props.trackerType,\n      ticketId: props.ticketId,\n      issueTrackerLinks: props.ticketId ? undefined : props.issueLinks,\n    },\n  }\n\n  const existingIssueTrackerItems =\n    cache.readQuery<TicketExternalReferencesIssueTrackerItemListQuery>(\n      queryOptions,\n    )\n\n  if (!existingIssueTrackerItems) return\n\n  const oldIssueTrackerItems = cloneDeep(existingIssueTrackerItems)\n\n  cache.writeQuery({\n    ...queryOptions,\n    data: {\n      ticketExternalReferencesIssueTrackerItemList:\n        existingIssueTrackerItems.ticketExternalReferencesIssueTrackerItemList.filter(\n          (issueItem) => issueItem.issueId !== issue.issueId,\n        ),\n    },\n  })\n\n  return () => {\n    cache.writeQuery({\n      ...queryOptions,\n      data: oldIssueTrackerItems,\n    })\n  }\n}\n\nconst unlinkIssue = async (issue: TicketExternalReferencesIssueTrackerItem) => {\n  const revertCacheUpdate = removeIssueLinkListCacheUpdate(issue)\n\n  if (props.screenType === TicketSidebarScreenType.TicketCreate) {\n    const externalReferences = props.form?.findNodeByName('externalReferences')\n\n    const { values } = props.form as { values: ExternalReferencesFormValues }\n\n    if (\n      !externalReferences ||\n      !externalReferences.value ||\n      !values.externalReferences ||\n      !values.externalReferences[props.trackerType]\n    )\n      return\n\n    return externalReferences?.input(\n      {\n        ...values.externalReferences,\n        [props.trackerType]: values?.externalReferences[\n          props.trackerType\n        ]?.filter((link) => link !== issue.url),\n      },\n      false,\n    )\n  }\n\n  return unlinkMutation\n    .send({\n      issueTrackerLink: issue.url,\n      issueTrackerType: props.trackerType,\n      ticketId: props.ticketId as string,\n    })\n    .catch(() => revertCacheUpdate)\n}\n\nconst linkIssueMutation = new MutationHandler(\n  useTicketExternalReferencesIssueTrackerItemAddMutation({\n    update: (cache, { data }) => {\n      if (!data) return\n\n      const { ticketExternalReferencesIssueTrackerItemAdd } = data\n      if (!ticketExternalReferencesIssueTrackerItemAdd?.issueTrackerItem) return\n\n      const queryOptions = {\n        query: TicketExternalReferencesIssueTrackerItemListDocument,\n        variables: {\n          issueTrackerType: props.trackerType,\n          ticketId: props.ticketId,\n          issueTrackerLinks: props.ticketId ? undefined : props.issueLinks,\n        },\n      }\n\n      let existingIssueTrackerItems =\n        cache.readQuery<TicketExternalReferencesIssueTrackerItemListQuery>(\n          queryOptions,\n        )\n\n      const newIdPresent =\n        existingIssueTrackerItems?.ticketExternalReferencesIssueTrackerItemList?.find(\n          (issueItem) => {\n            return (\n              issueItem.issueId ===\n              ticketExternalReferencesIssueTrackerItemAdd?.issueTrackerItem\n                ?.issueId\n            )\n          },\n        )\n      if (newIdPresent) return\n\n      existingIssueTrackerItems = {\n        ...existingIssueTrackerItems,\n        ticketExternalReferencesIssueTrackerItemList: [\n          ...(existingIssueTrackerItems?.ticketExternalReferencesIssueTrackerItemList ||\n            []),\n          ticketExternalReferencesIssueTrackerItemAdd?.issueTrackerItem,\n        ],\n      }\n\n      if (!props.ticketId) {\n        queryOptions.variables.issueTrackerLinks = [\n          ...(props.issueLinks || []),\n          ticketExternalReferencesIssueTrackerItemAdd.issueTrackerItem.url,\n        ]\n      }\n\n      cache.writeQuery({\n        ...queryOptions,\n        data: {\n          ...existingIssueTrackerItems,\n        },\n      })\n    },\n  }),\n  {\n    errorShowNotification: false,\n  },\n)\n\nconst linkIssue = async (link: string) => {\n  skipNextLinkUpdate.value = true\n\n  return linkIssueMutation\n    .send({\n      issueTrackerLink: link,\n      issueTrackerType: props.trackerType,\n      ticketId: props.ticketId,\n    })\n    .then((result) => {\n      // For ticket create we need to remember the url inside the hidden form field.\n      if (props.screenType === TicketSidebarScreenType.TicketCreate) {\n        const issueUrl =\n          result?.ticketExternalReferencesIssueTrackerItemAdd?.issueTrackerItem\n            ?.url\n\n        if (!issueUrl) return\n\n        const externalReferences =\n          props.form?.findNodeByName('externalReferences')\n\n        if (!externalReferences) return\n\n        let existingIssueLinks = cloneDeep(\n          externalReferences.value,\n        ) as ExternalReferencesFormValues['externalReferences']\n\n        existingIssueLinks ||= {}\n        existingIssueLinks[props.trackerType] = [\n          ...(existingIssueLinks[props.trackerType] || []),\n          issueUrl,\n        ]\n\n        externalReferences?.input(existingIssueLinks, false)\n      }\n    })\n    .finally(() => {\n      skipNextLinkUpdate.value = false\n    })\n}\n\nconst linkIssueFlyout = useFlyout({\n  component: () => import('./IssueTrackerLinkFlyout.vue'),\n  name: props.flyoutConfig.name,\n})\n\nconst openFlyout = () => {\n  linkIssueFlyout.open({\n    ...props.flyoutConfig,\n    issueLinks: props.issueLinks,\n    onSubmit: (link: string) => linkIssue(link),\n  })\n}\n\nconst showEmptyState = computed(() => {\n  if (props.ticketId) {\n    return (\n      issueList.value !== undefined &&\n      issueList.value.length === 0 &&\n      props.isTicketEditable\n    )\n  }\n\n  return props.form?.formInitialSettled && !props.issueLinks?.length\n})\n\ndefineExpose({\n  openFlyout,\n})\n</script>\n\n<template>\n  <CommonLoader :loading=\"isLoadingIssues\" :error=\"error\">\n    <div class=\"space-y-6\">\n      <CommonButton\n        v-if=\"showEmptyState\"\n        size=\"medium\"\n        variant=\"primary\"\n        class=\"block ltr:w-full rtl:w-full\"\n        @click=\"openFlyout\"\n      >\n        {{ $t('Link Issue') }}\n      </CommonButton>\n\n      <div v-else role=\"list\" class=\"space-y-5\">\n        <IssueTrackerItem\n          v-for=\"issue in issueList\"\n          :key=\"issue.issueId\"\n          role=\"listitem\"\n          :is-editable=\"isTicketEditable\"\n          :issue=\"issue\"\n          @unlink=\"unlinkIssue\"\n        />\n      </div>\n    </div>\n  </CommonLoader>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, type Ref } from 'vue'\n\nimport { EnumTicketExternalReferencesIssueTrackerType } from '#shared/graphql/types.ts'\n\nimport type { ExternalReferencesFormValues } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/types.ts'\nimport {\n  TicketSidebarButtonBadgeType,\n  type TicketSidebarContext,\n  TicketSidebarScreenType,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nexport const useIssueTracker = (\n  trackerType: EnumTicketExternalReferencesIssueTrackerType,\n  context: Ref<TicketSidebarContext>,\n) => {\n  const isTicketEditable = computed(\n    () => context.value.isTicketEditable?.value ?? true, // True for ticket create screen.\n  )\n\n  const issueLinks = computed(() => {\n    if (context.value.screenType === TicketSidebarScreenType.TicketCreate)\n      return (\n        (context.value.formValues as ExternalReferencesFormValues)\n          .externalReferences?.[trackerType] || []\n      )\n\n    return context.value.ticket?.value?.externalReferences?.[trackerType] || []\n  })\n\n  const hideSidebar = computed(\n    () => !issueLinks.value?.length && !isTicketEditable.value,\n  )\n\n  const openIssuesBadge = computed(() =>\n    issueLinks.value?.length\n      ? {\n          label: __('Issues'),\n          type: TicketSidebarButtonBadgeType.Info,\n          value: issueLinks.value?.length,\n        }\n      : undefined,\n  )\n\n  return { hideSidebar, isTicketEditable, issueLinks, openIssuesBadge }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, useTemplateRef, ref, toRef, watch, onMounted } from 'vue'\n\nimport { EnumTicketExternalReferencesIssueTrackerType } from '#shared/graphql/types.ts'\n\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport TicketSidebarContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarContent.vue'\nimport IssueTrackerList from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/IssueTrackerList.vue'\nimport { useIssueTracker } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/useIssueTracker.ts'\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  TicketSidebarScreenType,\n  type TicketSidebarEmits,\n  type TicketSidebarProps,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../../../TicketSidebarWrapper.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst { hideSidebar, issueLinks, isTicketEditable, openIssuesBadge } =\n  useIssueTracker(\n    EnumTicketExternalReferencesIssueTrackerType.Github,\n    toRef(props, 'context'),\n  )\n\nconst issueTrackerListInstance = useTemplateRef('issue-tracker-list')\n\nconst error = ref<string | null>(null)\n\nconst handleError = (message: string | null) => {\n  error.value = message\n}\n\nconst flyoutConfig = {\n  name: 'link-github-issue',\n  icon: props.sidebarPlugin.icon,\n  label: __('GitHub: Link issue'),\n  inputPlaceholder: 'https://github.com/organization/repository/issues/42',\n}\n\nif (props.context.screenType === TicketSidebarScreenType.TicketDetailView) {\n  watch(\n    hideSidebar,\n    (value) => {\n      if (value) {\n        emit('hide')\n      } else {\n        emit('show')\n      }\n    },\n    { immediate: true },\n  )\n} else {\n  onMounted(() => {\n    emit('show')\n  })\n}\n\nconst actions = computed((): MenuItem[] =>\n  issueLinks.value?.length && !error.value\n    ? [\n        {\n          key: 'link-github-issue',\n          label: __('Link Issue'),\n          show: () => isTicketEditable.value,\n          onClick: () => issueTrackerListInstance.value?.openFlyout(),\n          icon: 'link-45deg',\n        },\n      ]\n    : [],\n)\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n    :badge=\"openIssuesBadge\"\n  >\n    <TicketSidebarContent\n      v-model=\"persistentStates.scrollPosition\"\n      :title=\"sidebarPlugin.title\"\n      :icon=\"sidebarPlugin.icon\"\n      :actions=\"actions\"\n    >\n      <IssueTrackerList\n        ref=\"issue-tracker-list\"\n        :screen-type=\"context.screenType\"\n        :is-ticket-editable=\"isTicketEditable\"\n        :form=\"context.form\"\n        :ticket-id=\"context.ticket?.value?.id\"\n        :issue-links=\"issueLinks\"\n        :tracker-type=\"EnumTicketExternalReferencesIssueTrackerType.Github\"\n        :flyout-config=\"flyoutConfig\"\n        @error=\"handleError\"\n      />\n    </TicketSidebarContent>\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport TicketSidebarGitHub from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/TicketSidebarGitHub/TicketSidebarGitHub.vue'\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('GitHub'),\n  component: TicketSidebarGitHub,\n  permissions: ['ticket.agent'],\n  screens: [\n    TicketSidebarScreenType.TicketDetailView,\n    TicketSidebarScreenType.TicketCreate,\n  ],\n  icon: 'github',\n  order: 4000,\n  available: () => useApplicationStore().config.github_integration,\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, onMounted, ref, toRef, useTemplateRef, watch } from 'vue'\n\nimport { EnumTicketExternalReferencesIssueTrackerType } from '#shared/graphql/types.ts'\n\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport TicketSidebarContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarContent.vue'\nimport IssueTrackerList from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/IssueTrackerList.vue'\nimport { useIssueTracker } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/useIssueTracker.ts'\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  TicketSidebarScreenType,\n  type TicketSidebarEmits,\n  type TicketSidebarProps,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../../../TicketSidebarWrapper.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst { hideSidebar, issueLinks, isTicketEditable, openIssuesBadge } =\n  useIssueTracker(\n    EnumTicketExternalReferencesIssueTrackerType.Gitlab,\n    toRef(props, 'context'),\n  )\n\nconst issueTrackerListInstance = useTemplateRef('issue-tracker-list')\n\nconst error = ref<string | null>(null)\n\nconst handleError = (message: string | null) => {\n  error.value = message\n}\n\nconst flyoutConfig = {\n  name: 'link-gitlab-issue',\n  icon: props.sidebarPlugin.icon,\n  label: __('GitLab: Link issue'),\n  inputPlaceholder: 'https://git.example.com/group1/project1/-/issues/1',\n}\n\nif (props.context.screenType === TicketSidebarScreenType.TicketDetailView) {\n  watch(\n    hideSidebar,\n    (value) => {\n      if (value) {\n        emit('hide')\n      } else {\n        emit('show')\n      }\n    },\n    { immediate: true },\n  )\n} else {\n  onMounted(() => {\n    emit('show')\n  })\n}\n\nconst actions = computed((): MenuItem[] =>\n  issueLinks.value?.length && !error.value\n    ? [\n        {\n          key: 'link-gilab-issue',\n          label: __('Link Issue'),\n          show: () => isTicketEditable.value,\n          onClick: () => issueTrackerListInstance.value?.openFlyout(),\n          icon: 'link-45deg',\n        },\n      ]\n    : [],\n)\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n    :badge=\"openIssuesBadge\"\n  >\n    <TicketSidebarContent\n      v-model=\"persistentStates.scrollPosition\"\n      :title=\"sidebarPlugin.title\"\n      :icon=\"sidebarPlugin.icon\"\n      :actions=\"actions\"\n    >\n      <IssueTrackerList\n        ref=\"issue-tracker-list\"\n        :screen-type=\"context.screenType\"\n        :is-ticket-editable=\"isTicketEditable\"\n        :form=\"context.form\"\n        :ticket-id=\"context.ticket?.value?.id\"\n        :issue-links=\"issueLinks\"\n        :tracker-type=\"EnumTicketExternalReferencesIssueTrackerType.Gitlab\"\n        :flyout-config=\"flyoutConfig\"\n        @error=\"handleError\"\n      />\n    </TicketSidebarContent>\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport TicketSidebarGitLab from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarExternalIssueTracker/TicketSidebarGitLab/TicketSidebarGitLab.vue'\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('GitLab'),\n  component: TicketSidebarGitLab,\n  permissions: ['ticket.agent'],\n  screens: [\n    TicketSidebarScreenType.TicketDetailView,\n    TicketSidebarScreenType.TicketCreate,\n  ],\n  icon: 'gitlab',\n  order: 5000,\n  available: () => useApplicationStore().config.gitlab_integration,\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const IdoitObjectAttributesFragmentDoc = gql`\n    fragment IdoitObjectAttributes on TicketExternalReferencesIdoitObject {\n  idoitObjectId\n  link\n  title\n  type\n  status\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { IdoitObjectAttributesFragmentDoc } from '../fragments/IdoitObjectAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketExternalReferencesIdoitObjectListDocument = gql`\n    query ticketExternalReferencesIdoitObjectList($ticketId: ID, $idoitObjectIds: [Int!]) {\n  ticketExternalReferencesIdoitObjectList(\n    input: {ticketId: $ticketId, idoitObjectIds: $idoitObjectIds}\n  ) {\n    ...IdoitObjectAttributes\n  }\n}\n    ${IdoitObjectAttributesFragmentDoc}`;\nexport function useTicketExternalReferencesIdoitObjectListQuery(variables: Types.TicketExternalReferencesIdoitObjectListQueryVariables | VueCompositionApi.Ref<Types.TicketExternalReferencesIdoitObjectListQueryVariables> | ReactiveFunction<Types.TicketExternalReferencesIdoitObjectListQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>(TicketExternalReferencesIdoitObjectListDocument, variables, options);\n}\nexport function useTicketExternalReferencesIdoitObjectListLazyQuery(variables: Types.TicketExternalReferencesIdoitObjectListQueryVariables | VueCompositionApi.Ref<Types.TicketExternalReferencesIdoitObjectListQueryVariables> | ReactiveFunction<Types.TicketExternalReferencesIdoitObjectListQueryVariables> = {}, options: VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>(TicketExternalReferencesIdoitObjectListDocument, variables, options);\n}\nexport type TicketExternalReferencesIdoitObjectListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketExternalReferencesIdoitObjectListQuery, Types.TicketExternalReferencesIdoitObjectListQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { cloneDeep } from 'lodash-es'\n\nimport type {\n  TicketExternalReferencesIdoitObjectAddMutation,\n  TicketExternalReferencesIdoitObjectListQuery,\n} from '#shared/graphql/types.ts'\nimport { getApolloClient } from '#shared/server/apollo/client.ts'\n\nimport { TicketExternalReferencesIdoitObjectListDocument } from '#desktop/pages/ticket/graphql/queries/ticketExternalReferencesIdoitObjectList.api.ts'\n\nimport type { ApolloCache, FetchResult } from '@apollo/client/core'\nimport type { Ref } from 'vue'\n\nexport const useIdoitCacheHandlers = (\n  objectIds: Ref<number[]>,\n  ticketId: Ref<ID | undefined>,\n) => {\n  const { cache } = getApolloClient()\n\n  const modifyObjectItemAddCache = (\n    cache: ApolloCache<TicketExternalReferencesIdoitObjectListQuery>,\n    {\n      data,\n    }: Omit<\n      FetchResult<TicketExternalReferencesIdoitObjectAddMutation>,\n      'context'\n    >,\n  ) => {\n    if (!data) return\n\n    const { ticketExternalReferencesIdoitObjectAdd } = data\n\n    if (!ticketExternalReferencesIdoitObjectAdd?.idoitObjects?.length) return\n\n    const queryOptions = {\n      query: TicketExternalReferencesIdoitObjectListDocument,\n      variables: {\n        ticketId: ticketId.value,\n        idoitObjectIds: ticketId.value ? undefined : objectIds.value,\n      },\n    }\n\n    let existingIdoitObjects =\n      cache.readQuery<TicketExternalReferencesIdoitObjectListQuery>(\n        queryOptions,\n      )\n\n    const newIdPresent =\n      existingIdoitObjects?.ticketExternalReferencesIdoitObjectList?.find(\n        (object) => {\n          return ticketExternalReferencesIdoitObjectAdd?.idoitObjects?.some(\n            (idoitObject) => idoitObject.idoitObjectId === object.idoitObjectId,\n          )\n        },\n      )\n\n    if (newIdPresent) return\n\n    existingIdoitObjects = {\n      ...existingIdoitObjects,\n      ticketExternalReferencesIdoitObjectList: [\n        ...(existingIdoitObjects?.ticketExternalReferencesIdoitObjectList ||\n          []),\n        ...ticketExternalReferencesIdoitObjectAdd.idoitObjects!,\n      ],\n    }\n\n    if (!ticketId.value) {\n      queryOptions.variables.idoitObjectIds = [\n        ...(objectIds.value || []),\n        ...ticketExternalReferencesIdoitObjectAdd.idoitObjects.map(\n          (object) => object.idoitObjectId,\n        ),\n      ]\n    }\n\n    cache.writeQuery({\n      ...queryOptions,\n      data: {\n        ...existingIdoitObjects,\n      },\n    })\n  }\n\n  const removeObjectListCacheUpdate = (id: number) => {\n    const queryOptions = {\n      query: TicketExternalReferencesIdoitObjectListDocument,\n      variables: {\n        ticketId: ticketId.value,\n        idoitObjectIds: ticketId.value ? undefined : objectIds.value,\n      },\n    }\n\n    const existingIdoitObjects =\n      cache.readQuery<TicketExternalReferencesIdoitObjectListQuery>(\n        queryOptions,\n      )\n\n    if (!existingIdoitObjects) return\n\n    const oldObjects = cloneDeep(existingIdoitObjects)\n\n    if (!ticketId.value) {\n      queryOptions.variables.idoitObjectIds = objectIds.value.filter(\n        (idoitObjectId) => idoitObjectId !== id,\n      )\n    }\n\n    cache.writeQuery({\n      ...queryOptions,\n      data: {\n        ticketExternalReferencesIdoitObjectList:\n          existingIdoitObjects.ticketExternalReferencesIdoitObjectList.filter(\n            (object) => object.idoitObjectId !== id,\n          ),\n      },\n    })\n\n    return () =>\n      cache.writeQuery({\n        ...queryOptions,\n        data: oldObjects,\n      })\n  }\n\n  return { removeObjectListCacheUpdate, modifyObjectItemAddCache }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { cloneDeep } from 'lodash-es'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\nimport type { IdoitObjectAttributesFragment } from '#shared/graphql/types.ts'\n\nimport type { ExternalReferencesFormValues } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/types.ts'\n\nimport type { Ref } from 'vue'\n\nexport const useIdoitFormHelpers = (form: Ref<FormRef | undefined>) => {\n  const addObjectIdsToForm = (\n    objects?: IdoitObjectAttributesFragment[] | null,\n  ) => {\n    if (!objects) return\n\n    const objectIds = objects.map((object) => object.idoitObjectId)\n\n    const externalReferences = form.value?.findNodeByName('externalReferences')\n\n    if (!externalReferences) return\n\n    let existingReferences = cloneDeep(\n      externalReferences.value,\n    ) as ExternalReferencesFormValues['externalReferences']\n\n    existingReferences ||= {}\n    existingReferences.idoit = [\n      ...(existingReferences.idoit || []),\n      ...objectIds,\n    ]\n\n    externalReferences?.input(existingReferences, false)\n  }\n\n  const removeObjectFromForm = async (id: number) => {\n    const externalReferences = form.value?.findNodeByName('externalReferences')\n\n    const { values } = form.value as { values: ExternalReferencesFormValues }\n\n    if (!externalReferences?.value || !values.externalReferences?.idoit) return\n\n    let existingReferences = cloneDeep(\n      externalReferences.value,\n    ) as ExternalReferencesFormValues['externalReferences']\n\n    existingReferences ||= {}\n\n    existingReferences.idoit = existingReferences.idoit!.filter(\n      (objectId) => objectId !== id,\n    )\n\n    return externalReferences?.input(existingReferences, false)\n  }\n\n  return {\n    addObjectIdsToForm,\n    removeObjectFromForm,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { IdoitObjectAttributesFragmentDoc } from '../fragments/IdoitObjectAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketExternalReferencesIdoitObjectAddDocument = gql`\n    mutation ticketExternalReferencesIdoitObjectAdd($idoitObjectIds: [Int!]!, $ticketId: ID) {\n  ticketExternalReferencesIdoitObjectAdd(\n    idoitObjectIds: $idoitObjectIds\n    ticketId: $ticketId\n  ) {\n    idoitObjects {\n      ...IdoitObjectAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${IdoitObjectAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useTicketExternalReferencesIdoitObjectAddMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIdoitObjectAddMutation, Types.TicketExternalReferencesIdoitObjectAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIdoitObjectAddMutation, Types.TicketExternalReferencesIdoitObjectAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketExternalReferencesIdoitObjectAddMutation, Types.TicketExternalReferencesIdoitObjectAddMutationVariables>(TicketExternalReferencesIdoitObjectAddDocument, options);\n}\nexport type TicketExternalReferencesIdoitObjectAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketExternalReferencesIdoitObjectAddMutation, Types.TicketExternalReferencesIdoitObjectAddMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketExternalReferencesIdoitObjectRemoveDocument = gql`\n    mutation ticketExternalReferencesIdoitObjectRemove($ticketId: ID!, $idoitObjectId: Int!) {\n  ticketExternalReferencesIdoitObjectRemove(\n    ticketId: $ticketId\n    idoitObjectId: $idoitObjectId\n  ) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketExternalReferencesIdoitObjectRemoveMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIdoitObjectRemoveMutation, Types.TicketExternalReferencesIdoitObjectRemoveMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketExternalReferencesIdoitObjectRemoveMutation, Types.TicketExternalReferencesIdoitObjectRemoveMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketExternalReferencesIdoitObjectRemoveMutation, Types.TicketExternalReferencesIdoitObjectRemoveMutationVariables>(TicketExternalReferencesIdoitObjectRemoveDocument, options);\n}\nexport type TicketExternalReferencesIdoitObjectRemoveMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketExternalReferencesIdoitObjectRemoveMutation, Types.TicketExternalReferencesIdoitObjectRemoveMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { isEqual } from 'lodash-es'\nimport { computed, ref, toRef, watch } from 'vue'\n\nimport type { FormRef } from '#shared/components/Form/types.ts'\nimport {\n  MutationHandler,\n  QueryHandler,\n} from '#shared/server/apollo/handler/index.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport type { TicketSidebarPlugin } from '#desktop/pages/ticket/components/TicketSidebar/plugins/types.ts'\nimport TicketSidebarContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarContent.vue'\nimport ExternalReferenceContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/ExternalReferenceContent.vue'\nimport ExternalReferenceLink from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/ExternalReferenceLink.vue'\nimport type { FormDataRecords } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/types.ts'\nimport { useIdoitCacheHandlers } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/useIdoitCacheHandlers.ts'\nimport { useIdoitFormHelpers } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/useIdoitFormHelpers.ts'\nimport { useTicketExternalReferencesIdoitObjectAddMutation } from '#desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIdoitObjectAdd.api.ts'\nimport { useTicketExternalReferencesIdoitObjectRemoveMutation } from '#desktop/pages/ticket/graphql/mutations/ticketExternalReferencesIdoitObjectRemove.api.ts'\nimport { useTicketExternalReferencesIdoitObjectListQuery } from '#desktop/pages/ticket/graphql/queries/ticketExternalReferencesIdoitObjectList.api.ts'\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\ninterface Props {\n  sidebarPlugin: TicketSidebarPlugin\n  objectIds: number[]\n  screenType: TicketSidebarScreenType\n  isTicketEditable: boolean\n  ticketId?: string\n  form?: FormRef\n}\nconst props = defineProps<Props>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\nconst skipNextObjectUpdate = ref(false)\n\nconst { open } = useFlyout({\n  name: 'idoit',\n  component: () => import('./IdoitFlyout.vue'),\n})\n\nconst objectListQuery = new QueryHandler(\n  useTicketExternalReferencesIdoitObjectListQuery(\n    () => ({\n      ticketId: props.ticketId,\n      idoitObjectIds: props.ticketId ? undefined : props.objectIds,\n    }),\n    () => ({\n      enabled:\n        props.screenType === TicketSidebarScreenType.TicketCreate\n          ? props.objectIds?.length > 0\n          : !!props.ticketId,\n      fetchPolicy:\n        props.screenType === TicketSidebarScreenType.TicketCreate\n          ? 'cache-first'\n          : 'cache-and-network',\n    }),\n  ),\n  {\n    errorShowNotification: false,\n  },\n)\n\nconst result = objectListQuery.result()\n\nconst isLoading = objectListQuery.loading()\n\nconst queryError = objectListQuery.operationError()\n\nconst error = computed(() =>\n  queryError.value\n    ? __(\n        `Error fetching information from i-doit. Please contact your administrator.`,\n      )\n    : null,\n)\n\nconst objectList = computed(() => {\n  return result.value?.ticketExternalReferencesIdoitObjectList || []\n})\n\nconst { removeObjectListCacheUpdate, modifyObjectItemAddCache } =\n  useIdoitCacheHandlers(toRef(props, 'objectIds'), toRef(props, 'ticketId'))\n\nconst { addObjectIdsToForm, removeObjectFromForm } = useIdoitFormHelpers(\n  toRef(props, 'form'),\n)\n\nconst removeObjectMutation = new MutationHandler(\n  useTicketExternalReferencesIdoitObjectRemoveMutation(),\n)\n\nconst removeObject = async ({ id }: { id: number }) => {\n  const revertCacheUpdate = removeObjectListCacheUpdate(id)\n\n  if (props.screenType === TicketSidebarScreenType.TicketCreate)\n    return removeObjectFromForm(id)\n\n  return removeObjectMutation\n    .send({\n      idoitObjectId: id,\n      ticketId: props.ticketId!,\n    })\n    .catch(() => revertCacheUpdate)\n}\n\nconst addObjectMutation = new MutationHandler(\n  useTicketExternalReferencesIdoitObjectAddMutation({\n    update: modifyObjectItemAddCache,\n  }),\n)\n\nconst addObjects = async (formData: FormDataRecords) => {\n  skipNextObjectUpdate.value = true\n\n  return addObjectMutation\n    .send({\n      idoitObjectIds: formData.objectIds,\n      ticketId: props.ticketId,\n    })\n    .then((result) => {\n      if (props.screenType === TicketSidebarScreenType.TicketCreate)\n        addObjectIdsToForm(\n          result?.ticketExternalReferencesIdoitObjectAdd?.idoitObjects,\n        )\n    })\n    .finally(() => {\n      skipNextObjectUpdate.value = false\n    })\n}\n\nconst openFlyout = () =>\n  open({\n    objectIds: props.objectIds,\n    ticketId: props.ticketId,\n    onSubmit: addObjects,\n    icon: props.sidebarPlugin.icon,\n  })\n\nconst actions = computed((): MenuItem[] =>\n  props.objectIds?.length && !error.value\n    ? [\n        {\n          key: 'link-idoit-object',\n          label: __('Link objects'),\n          show: () => props.isTicketEditable,\n          onClick: openFlyout,\n          icon: 'link-45deg',\n        },\n      ]\n    : [],\n)\n\nif (props.ticketId) {\n  watch(\n    () => props.objectIds,\n    (newValue) => {\n      if (\n        isEqual(\n          newValue,\n          objectList.value.map((obj) => obj.idoitObjectId),\n        ) ||\n        skipNextObjectUpdate.value\n      ) {\n        skipNextObjectUpdate.value = false\n        return\n      }\n\n      objectListQuery.refetch()\n    },\n  )\n}\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n    :actions=\"actions\"\n  >\n    <CommonButton\n      v-if=\"!objectIds?.length\"\n      size=\"medium\"\n      variant=\"primary\"\n      class=\"block ltr:w-full rtl:w-full\"\n      @click=\"openFlyout\"\n    >\n      {{ $t('Link Objects') }}\n    </CommonButton>\n\n    <CommonLoader v-if=\"objectIds?.length\" :loading=\"isLoading\" :error=\"error\">\n      <div class=\"space-y-6\" tabindex=\"-1\">\n        <div\n          v-for=\"object in objectList\"\n          :key=\"object.idoitObjectId\"\n          class=\"group space-y-2\"\n          role=\"group\"\n        >\n          <ExternalReferenceLink\n            :id=\"object.idoitObjectId\"\n            :title=\"object.title\"\n            :link=\"object.link!\"\n            :is-editable=\"isTicketEditable\"\n            :tooltip=\"$t('Unlink object')\"\n            @remove=\"removeObject\"\n          />\n\n          <ExternalReferenceContent\n            :label=\"$t('ID')\"\n            :values=\"[object.idoitObjectId.toString()]\"\n          />\n\n          <ExternalReferenceContent\n            :label=\"$t('Status')\"\n            :values=\"[object.status]\"\n          />\n          <ExternalReferenceContent\n            :label=\"$t('Type')\"\n            :values=\"[object.type]\"\n          />\n        </div>\n      </div>\n    </CommonLoader>\n  </TicketSidebarContent>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from 'pinia'\nimport { computed, onMounted, watch } from 'vue'\n\nimport TicketSidebarIdoitContent from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/TicketSidebarIdoitContent.vue'\nimport type { ExternalReferencesFormValues } from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/types.ts'\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  TicketSidebarScreenType,\n  type TicketSidebarEmits,\n  type TicketSidebarProps,\n  TicketSidebarButtonBadgeType,\n} from '#desktop/pages/ticket/types/sidebar.ts'\nimport { useThemeStore } from '#desktop/stores/theme.ts'\n\nimport TicketSidebarWrapper from '../../TicketSidebarWrapper.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst isTicketEditable = computed(\n  () => props.context.isTicketEditable?.value ?? true, // True for ticket create screen.\n)\n\nconst { isDarkMode } = storeToRefs(useThemeStore())\n\nconst plugin = computed(() => {\n  const icon = isDarkMode.value\n    ? `${props.sidebarPlugin.icon}-light`\n    : `${props.sidebarPlugin.icon}-dark`\n\n  return {\n    ...props.sidebarPlugin,\n    icon,\n  }\n})\n\nconst objectIds = computed(() => {\n  if (props.context.screenType === TicketSidebarScreenType.TicketCreate)\n    return (\n      (props.context.formValues as ExternalReferencesFormValues)\n        .externalReferences?.idoit || []\n    )\n\n  return props.context.ticket?.value?.preferences?.idoit?.object_ids || []\n})\n\nconst objectBadges = computed(() =>\n  objectIds.value?.length\n    ? {\n        label: __('Objects'),\n        type: TicketSidebarButtonBadgeType.Info,\n        value: objectIds.value?.length,\n      }\n    : undefined,\n)\n\nconst hideSidebar = computed(\n  () => !objectIds.value?.length && !isTicketEditable.value,\n)\n\nif (props.context.screenType === TicketSidebarScreenType.TicketDetailView) {\n  watch(\n    hideSidebar,\n    (value) => {\n      if (value) {\n        emit('hide')\n      } else {\n        emit('show')\n      }\n    },\n    { immediate: true },\n  )\n} else {\n  onMounted(() => {\n    emit('show')\n  })\n}\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"plugin\"\n    :selected=\"selected\"\n    :badge=\"objectBadges\"\n  >\n    <TicketSidebarIdoitContent\n      v-model=\"persistentStates\"\n      :screen-type=\"context.screenType\"\n      :ticket-id=\"context.ticket?.value?.id\"\n      :sidebar-plugin=\"plugin\"\n      :object-ids=\"objectIds\"\n      :form=\"context.form\"\n      :is-ticket-editable=\"isTicketEditable\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport TicketSidebarIdoit from '#desktop/pages/ticket/components/TicketSidebar/TicketSidebarExternalReferences/TicketSidebarIdoit/TicketSidebarIdoit.vue'\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('i-doit'),\n  component: TicketSidebarIdoit,\n  permissions: ['ticket.agent'],\n  screens: [\n    TicketSidebarScreenType.TicketDetailView,\n    TicketSidebarScreenType.TicketCreate,\n  ],\n  icon: 'i-doit-logo', // icon does not exist underlying cmp will use it as a base to get light and dark icon name\n  order: 6000,\n  available: () => useApplicationStore().config.idoit_integration,\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\n\nimport { useTicketAccountedTime } from '#shared/entities/ticket/composables/useTicketAccountedTime.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\n\nexport interface Props {\n  ticket: TicketById\n}\n\nconst { ticket } = defineProps<Props>()\n\nconst { timeAccountingDisplayUnit, timeAccountingConfig } =\n  useTicketAccountedTime()\n\nconst totalTime = computed(() => ticket?.timeUnit)\n\nconst showAll = ref(false)\nconst MIN_SHOWN = 4\n\nconst allUnits = computed(() => {\n  const units = [{ name: __('Total'), timeUnit: totalTime.value }]\n\n  if (!timeAccountingConfig.value.time_accounting_types) return units\n\n  units.push(...(ticket.timeUnitsPerType || []))\n\n  return units\n})\n\nconst shownUnits = computed(() => {\n  if (showAll.value) return allUnits.value\n\n  return allUnits.value.slice(0, MIN_SHOWN)\n})\n\nconst shouldDisplayShowButton = computed(\n  () =>\n    allUnits.value.length > MIN_SHOWN && shownUnits.value !== allUnits.value,\n)\n\nconst remainingUnitsCount = computed(() => allUnits.value.length - MIN_SHOWN)\n\nconst showDivider = computed(() => shownUnits.value.length > 1) // If more than one accounting type is available, show divider\n</script>\n\n<template>\n  <div v-if=\"totalTime\">\n    <ul class=\"space-y-2\">\n      <li\n        v-for=\"({ name, timeUnit }, index) in shownUnits\"\n        :key=\"name\"\n        class=\"flex gap-2 first:font-semibold\"\n        :class=\"{\n          'border-stone-200 first:border-b first:border-solid first:pb-1 dark:border-neutral-500':\n            showDivider,\n        }\"\n      >\n        <CommonLabel\n          :id=\"`accounted-time-${name}`\"\n          size=\"small\"\n          class=\"text-black! dark:text-white!\"\n          :class=\"{ uppercase: index === 0 }\"\n          >{{ $t(name) }}</CommonLabel\n        >\n        <CommonLabel\n          size=\"small\"\n          :aria-labelledby=\"`accounted-time-label-${name}`\"\n          :aria-describedby=\"`accounted-time-unit-${name}`\"\n          class=\"text-black! ltr:ml-auto rtl:mr-auto dark:text-white!\"\n          >{{ timeUnit?.toFixed(2) }}</CommonLabel\n        >\n        <CommonLabel\n          :id=\"`accounted-time-unit-${name}`\"\n          size=\"small\"\n          class=\"text-stone-200! dark:text-neutral-500!\"\n          :aria-description=\"$t('Accounted time unit')\"\n          >{{ timeAccountingDisplayUnit }}</CommonLabel\n        >\n      </li>\n    </ul>\n\n    <CommonButton\n      v-if=\"shouldDisplayShowButton\"\n      class=\"mt-1 hover:outline-transparent! ltr:float-right ltr:-mr-2 ltr:-ml-2 rtl:float-left rtl:-mr-2 rtl:-ml-2\"\n      variant=\"secondary\"\n      @click=\"showAll = true\"\n      >{{ $t('Show %s more', remainingUnitsCount) }}&hellip;</CommonButton\n    >\n  </div>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const LinkListDocument = gql`\n    query linkList($objectId: ID!, $targetType: String!) {\n  linkList(objectId: $objectId, targetType: $targetType) {\n    type\n    item {\n      ... on Ticket {\n        id\n        internalId\n        title\n        state {\n          id\n          name\n        }\n        stateColorCode\n      }\n      ... on KnowledgeBaseAnswerTranslation {\n        id\n      }\n    }\n  }\n}\n    `;\nexport function useLinkListQuery(variables: Types.LinkListQueryVariables | VueCompositionApi.Ref<Types.LinkListQueryVariables> | ReactiveFunction<Types.LinkListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.LinkListQuery, Types.LinkListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.LinkListQuery, Types.LinkListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.LinkListQuery, Types.LinkListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.LinkListQuery, Types.LinkListQueryVariables>(LinkListDocument, variables, options);\n}\nexport function useLinkListLazyQuery(variables?: Types.LinkListQueryVariables | VueCompositionApi.Ref<Types.LinkListQueryVariables> | ReactiveFunction<Types.LinkListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.LinkListQuery, Types.LinkListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.LinkListQuery, Types.LinkListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.LinkListQuery, Types.LinkListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.LinkListQuery, Types.LinkListQueryVariables>(LinkListDocument, variables, options);\n}\nexport type LinkListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.LinkListQuery, Types.LinkListQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const LinkUpdatesDocument = gql`\n    subscription linkUpdates($objectId: ID!, $targetType: String!) {\n  linkUpdates(objectId: $objectId, targetType: $targetType) {\n    links {\n      item {\n        ... on Ticket {\n          id\n          internalId\n          title\n          state {\n            id\n            name\n          }\n          stateColorCode\n        }\n        ... on KnowledgeBaseAnswerTranslation {\n          id\n        }\n      }\n      type\n    }\n  }\n}\n    `;\nexport function useLinkUpdatesSubscription(variables: Types.LinkUpdatesSubscriptionVariables | VueCompositionApi.Ref<Types.LinkUpdatesSubscriptionVariables> | ReactiveFunction<Types.LinkUpdatesSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.LinkUpdatesSubscription, Types.LinkUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.LinkUpdatesSubscription, Types.LinkUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.LinkUpdatesSubscription, Types.LinkUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.LinkUpdatesSubscription, Types.LinkUpdatesSubscriptionVariables>(LinkUpdatesDocument, variables, options);\n}\nexport type LinkUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.LinkUpdatesSubscription, Types.LinkUpdatesSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { EnumLinkType } from '#shared/graphql/types.ts'\n\nexport const useObjectLinkTypes = () => {\n  const linkTypes = Object.keys(EnumLinkType)\n    .map((key) => ({\n      value: EnumLinkType[key as keyof typeof EnumLinkType],\n      label: key,\n    }))\n    .sort((a) => (a.value === EnumLinkType.Normal ? -1 : 1))\n\n  return {\n    linkTypes,\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed } from 'vue'\n\nimport {\n  type LinkListQuery,\n  type LinkUpdatesSubscriptionVariables,\n  type LinkUpdatesSubscription,\n} from '#shared/graphql/types.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\nimport getUuid from '#shared/utils/getUuid.ts'\n\nimport { useLinkListQuery } from '../graphql/queries/linkList.api.ts'\nimport { LinkUpdatesDocument } from '../graphql/subscriptions/linkUpdates.api.ts'\n\nimport { useObjectLinkTypes } from './useObjectLinkTypes.ts'\n\nimport type { Ref } from 'vue'\n\nexport const useObjectLinks = (\n  object: Ref<ObjectLike | undefined>,\n  targetType: string,\n) => {\n  const { linkTypes } = useObjectLinkTypes()\n\n  const objectId = computed(() => object.value?.id)\n\n  const linkListQuery = new QueryHandler(\n    useLinkListQuery(() => ({\n      objectId: objectId.value,\n      targetType,\n    })),\n  )\n\n  const linkListQueryResult = linkListQuery.result()\n  const linkListQueryLoading = linkListQuery.loading()\n\n  linkListQuery.subscribeToMore<\n    LinkUpdatesSubscriptionVariables,\n    LinkUpdatesSubscription\n  >(() => ({\n    document: LinkUpdatesDocument,\n    variables: {\n      objectId: objectId.value,\n      targetType,\n    },\n    updateQuery: (prev, { subscriptionData }) => {\n      if (!subscriptionData.data?.linkUpdates.links) {\n        return null as unknown as LinkListQuery\n      }\n\n      return {\n        linkList: subscriptionData.data.linkUpdates.links,\n      }\n    },\n  }))\n\n  const links = computed(() => {\n    if (!linkListQueryResult.value?.linkList) return []\n\n    return linkListQueryResult.value?.linkList\n  })\n\n  const linkTypesWithLinks = computed(() => {\n    return linkTypes\n      .map((type) => ({\n        ...type,\n        id: getUuid(),\n        links: links.value.filter((link) => link.type === type.value),\n      }))\n      .filter((type) => type.links.length > 0)\n  })\n\n  const hasLinks = computed(() => {\n    return linkTypesWithLinks.value.some((type) => type.links.length > 0)\n  })\n\n  return {\n    linkListIsLoading: linkListQueryLoading,\n    linkTypesWithLinks,\n    hasLinks,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const LinkRemoveDocument = gql`\n    mutation linkRemove($input: LinkInput!) {\n  linkRemove(input: $input) {\n    success\n    errors {\n      message\n      field\n    }\n  }\n}\n    `;\nexport function useLinkRemoveMutation(options: VueApolloComposable.UseMutationOptions<Types.LinkRemoveMutation, Types.LinkRemoveMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.LinkRemoveMutation, Types.LinkRemoveMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.LinkRemoveMutation, Types.LinkRemoveMutationVariables>(LinkRemoveDocument, options);\n}\nexport type LinkRemoveMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.LinkRemoveMutation, Types.LinkRemoveMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { toRef } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useTouchDevice } from '#shared/composables/useTouchDevice.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport type { EnumLinkType, LinkListQuery } from '#shared/graphql/types.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonDivider from '#desktop/components/CommonDivider/CommonDivider.vue'\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport CommonTicketLabel from '#desktop/components/CommonTicketLabel/CommonTicketLabel.vue'\nimport { useObjectLinks } from '#desktop/pages/ticket/composables/useObjectLinks.ts'\nimport { useLinkRemoveMutation } from '#desktop/pages/ticket/graphql/mutations/linkRemove.api.ts'\nimport { LinkListDocument } from '#desktop/pages/ticket/graphql/queries/linkList.api.ts'\n\nexport interface Props {\n  ticket?: TicketById\n  isTicketEditable?: boolean\n}\n\nconst props = defineProps<Props>()\n\nconst ticketReactive = toRef(props, 'ticket')\n\nconst { hasLinks, linkTypesWithLinks, linkListIsLoading } = useObjectLinks(\n  ticketReactive,\n  'Ticket',\n)\n\nconst { isTouchDevice } = useTouchDevice()\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst { notify } = useNotifications()\n\nconst deleteLink = async (targetId: string, type: string) => {\n  if (!ticketReactive.value) return\n\n  const deleteLinkMutation = new MutationHandler(\n    useLinkRemoveMutation({\n      variables: {\n        input: {\n          // Don't ask me why, but the sourceId and targetId are swapped to be consistent with the old UI.\n          sourceId: targetId,\n          targetId: ticketReactive.value.id,\n          type: type as EnumLinkType,\n        },\n      },\n      update(cache) {\n        const variables = {\n          objectId: ticketReactive.value?.id,\n          targetType: 'Ticket',\n        }\n\n        const existingLinks = cache.readQuery<LinkListQuery>({\n          query: LinkListDocument,\n          variables,\n        })\n        if (!existingLinks) return\n\n        cache.writeQuery({\n          query: LinkListDocument,\n          data: {\n            linkList: existingLinks?.linkList?.filter(\n              (link) => !(link.item.id === targetId && link.type === type),\n            ),\n          },\n          variables,\n        })\n      },\n    }),\n    {\n      errorShowNotification: false,\n    },\n  )\n\n  deleteLinkMutation.send().then((data) => {\n    if (data?.linkRemove?.success) {\n      notify({\n        type: NotificationTypes.Success,\n        message: __('Link removed successfully'),\n      })\n    }\n  })\n}\n\nconst confirmDeleteLink = async (targetId: string, type: string) => {\n  const confirmed = await waitForVariantConfirmation('delete')\n\n  if (confirmed) deleteLink(targetId, type)\n}\n\nconst linkFlyout = useFlyout({\n  name: 'ticket-link',\n  component: () => import('../../../TicketLinksFlyout.vue'),\n})\n\nconst openLinkFlyout = () => {\n  linkFlyout.open({\n    sourceTicket: ticketReactive,\n  })\n}\n\ndefineExpose({ hasLinks })\n</script>\n\n<template>\n  <CommonLoader :loading=\"linkListIsLoading\">\n    <div class=\"flex flex-col gap-2\">\n      <div\n        v-if=\"hasLinks\"\n        class=\"flex w-full flex-col rounded-lg bg-blue-200 px-2.5 dark:bg-gray-700\"\n      >\n        <div v-for=\"(type, idx) in linkTypesWithLinks\" :key=\"type.id\">\n          <CommonLabel\n            size=\"small\"\n            class=\"text-stone-200! dark:text-neutral-500!\"\n          >\n            {{ $t(type.label) }}\n          </CommonLabel>\n\n          <div\n            v-for=\"link in type.links\"\n            :key=\"link.item.id\"\n            class=\"group/link relative flex items-center\"\n          >\n            <CommonTicketLabel\n              class=\"h-12 items-center!\"\n              :ticket=\"link.item as TicketById\"\n              :classes=\"{ indicator: 'mt-0', label: 'mt-0 line-clamp-1' }\"\n            />\n            <CommonButton\n              v-if=\"isTicketEditable\"\n              :aria-label=\"$t('Delete this link')\"\n              :class=\"{ 'opacity-0 transition-opacity': !isTouchDevice }\"\n              class=\"text-white group-hover/link:opacity-100 focus:opacity-100\"\n              icon=\"x-lg\"\n              size=\"small\"\n              variant=\"remove\"\n              @click.stop=\"confirmDeleteLink(link.item.id, link.type)\"\n            />\n          </div>\n\n          <CommonDivider v-if=\"idx !== linkTypesWithLinks.length - 1\" />\n        </div>\n      </div>\n\n      <CommonLabel v-else size=\"small\">\n        {{ $t('No links added yet.') }}\n      </CommonLabel>\n\n      <CommonButton\n        v-if=\"isTicketEditable\"\n        v-tooltip=\"$t('Add link')\"\n        size=\"medium\"\n        class=\"self-end\"\n        icon=\"plus-square-fill\"\n        @click=\"openLinkFlyout\"\n      />\n    </div>\n  </CommonLoader>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { nextTick, toRef, watch } from 'vue'\n\nimport CommonUserAvatar from '#shared/components/CommonUserAvatar/CommonUserAvatar.vue'\nimport { useTicketSubscribe } from '#shared/entities/ticket/composables/useTicketSubscribe.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\n\nexport interface Props {\n  ticket?: TicketById\n}\n\nconst props = defineProps<Props>()\n\nconst ticketReactive = toRef(props, 'ticket')\n\nconst {\n  isSubscribed,\n  isSubscriptionLoading,\n  toggleSubscribe,\n  subscribers,\n  totalSubscribers,\n} = useTicketSubscribe(ticketReactive)\n\nlet isOutsideUpdate = false\nwatch(\n  () => isSubscribed.value,\n  () => {\n    isOutsideUpdate = true\n    nextTick(() => {\n      isOutsideUpdate = false\n    })\n  },\n)\n\nconst handleToggleInput = async () => {\n  // do not trigger update, if value was changed from the outside,\n  // and not by clicking on toggle button, otherwise it goes into infinite loop\n  if (isOutsideUpdate) return false\n  return toggleSubscribe()\n}\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2\">\n    <div\n      class=\"flex w-full flex-col rounded-lg bg-blue-200 px-3 py-3.5 dark:bg-gray-700\"\n    >\n      <div\n        class=\"flex gap-2\"\n        :class=\"{\n          'border-b border-neutral-100 pb-2 dark:border-gray-900':\n            subscribers.length,\n        }\"\n      >\n        <FormKit\n          type=\"toggle\"\n          :model-value=\"isSubscribed\"\n          :label=\"__('Subscribe me')\"\n          :variants=\"{\n            true: __('yes'),\n            false: __('no'),\n          }\"\n          :disabled=\"isSubscriptionLoading\"\n          outer-class=\"grow\"\n          wrapper-class=\"!px-0 $remove:h-10\"\n          @input-raw=\"handleToggleInput\"\n        />\n      </div>\n      <div v-if=\"totalSubscribers > 0\" class=\"flex flex-wrap gap-2 pt-2.5\">\n        <CommonUserAvatar\n          v-for=\"subscriber in subscribers\"\n          :key=\"subscriber.user.id\"\n          :entity=\"subscriber.user\"\n          :access=\"subscriber.access\"\n          size=\"small\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TagAssignmentAddDocument = gql`\n    mutation tagAssignmentAdd($objectId: ID!, $tag: String!) {\n  tagAssignmentAdd(objectId: $objectId, tag: $tag) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTagAssignmentAddMutation(options: VueApolloComposable.UseMutationOptions<Types.TagAssignmentAddMutation, Types.TagAssignmentAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TagAssignmentAddMutation, Types.TagAssignmentAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TagAssignmentAddMutation, Types.TagAssignmentAddMutationVariables>(TagAssignmentAddDocument, options);\n}\nexport type TagAssignmentAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TagAssignmentAddMutation, Types.TagAssignmentAddMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TagAssignmentRemoveDocument = gql`\n    mutation tagAssignmentRemove($objectId: ID!, $tag: String!) {\n  tagAssignmentRemove(objectId: $objectId, tag: $tag) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTagAssignmentRemoveMutation(options: VueApolloComposable.UseMutationOptions<Types.TagAssignmentRemoveMutation, Types.TagAssignmentRemoveMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TagAssignmentRemoveMutation, Types.TagAssignmentRemoveMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TagAssignmentRemoveMutation, Types.TagAssignmentRemoveMutationVariables>(TagAssignmentRemoveDocument, options);\n}\nexport type TagAssignmentRemoveMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TagAssignmentRemoveMutation, Types.TagAssignmentRemoveMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { getNode } from '@formkit/core'\nimport { computed, nextTick, ref } from 'vue'\nimport { onBeforeRouteUpdate } from 'vue-router'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useTouchDevice } from '#shared/composables/useTouchDevice.ts'\nimport { useTagAssignmentAddMutation } from '#shared/entities/tags/graphql/mutations/assignment/add.api.ts'\nimport { useTagAssignmentRemoveMutation } from '#shared/entities/tags/graphql/mutations/assignment/remove.api.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { getApolloClient } from '#shared/server/apollo/client.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport CommonShowMoreButton from '#desktop/components/CommonShowMoreButton/CommonShowMoreButton.vue'\n\nexport interface Props {\n  ticket?: TicketById\n  isTicketEditable?: boolean\n}\n\nconst props = defineProps<Props>()\n\nconst MAX_TAGS_VISIBLE = 5\n\nconst areAllTagsVisible = ref(false)\n\nconst tags = computed(() => {\n  if (\n    props.ticket?.tags &&\n    props.ticket.tags.length > MAX_TAGS_VISIBLE &&\n    !areAllTagsVisible.value\n  )\n    return props.ticket.tags.slice(0, MAX_TAGS_VISIBLE)\n\n  return props.ticket?.tags ?? []\n})\n\nconst totalTagsCount = computed(() => props.ticket?.tags?.length ?? 0)\n\nconst showMore = () => {\n  areAllTagsVisible.value = true\n}\n\nonBeforeRouteUpdate(() => {\n  areAllTagsVisible.value = false\n})\n\nconst isNewTagVisible = ref(false)\n\nconst showNewTag = () => {\n  isNewTagVisible.value = true\n\n  nextTick(() => {\n    const activate = getNode('newTag')?.context?.activate\n    if (typeof activate !== 'function') return\n    activate()\n  })\n}\n\nconst hideNewTag = () => {\n  isNewTagVisible.value = false\n}\n\nconst tagAssignmentAddHandler = new MutationHandler(\n  useTagAssignmentAddMutation({}),\n  {\n    errorNotificationMessage: __('Ticket tag could not be added.'),\n  },\n)\n\n// Modify ticket tags directly in the Apollo cache, rather than waiting for subscription updates.\n//   This will help with any client changes being immediately visible on screen.\nconst modifyTagsCache = (ticketTags: string[]) => {\n  if (!props.ticket) return\n\n  getApolloClient().cache.modify({\n    id: getApolloClient().cache.identify(props.ticket),\n    fields: {\n      tags: () => ticketTags,\n    },\n  })\n}\n\nconst { notify } = useNotifications()\n\nconst addNewTag = (value: unknown) => {\n  const tag = value as string // needed due to `onInput` signature\n\n  if (!props.ticket?.id || !tag || tags.value.includes(tag)) return\n\n  const ticketTags = [...(props.ticket.tags || []), tag]\n\n  modifyTagsCache(ticketTags)\n\n  // Always show all tags if they now exceed the visibility limit.\n  //   It will make sure the newly added tag is always visible in the list.\n  if (ticketTags.length > MAX_TAGS_VISIBLE) areAllTagsVisible.value = true\n\n  tagAssignmentAddHandler\n    .send({\n      objectId: props.ticket.id,\n      tag,\n    })\n    .then(() => {\n      notify({\n        type: NotificationTypes.Success,\n        id: 'ticket-tag-added-successfully',\n        message: __('Ticket tag added successfully.'),\n      })\n    })\n}\n\nconst tagAssignmentRemoveHandler = new MutationHandler(\n  useTagAssignmentRemoveMutation({}),\n  {\n    errorNotificationMessage: __('Ticket tag could not be removed.'),\n  },\n)\n\nconst removeTag = (tag: string) => {\n  if (!props.ticket?.id || !tags.value.includes(tag)) return\n\n  const ticketTags = (props.ticket.tags || []).filter(\n    (tagName) => tagName !== tag,\n  )\n\n  modifyTagsCache(ticketTags)\n\n  tagAssignmentRemoveHandler\n    .send({\n      objectId: props.ticket.id,\n      tag,\n    })\n    .then(() => {\n      notify({\n        type: NotificationTypes.Success,\n        id: 'ticket-tag-removed-successfully',\n        message: __('Ticket tag removed successfully.'),\n      })\n    })\n}\n\nconst { isTouchDevice } = useTouchDevice()\n\nconst { config } = useApplicationStore()\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2\">\n    <div\n      v-if=\"tags.length\"\n      class=\"flex w-full flex-col\"\n      :class=\"{\n        'rounded-lg bg-blue-200 px-2.5 dark:bg-gray-700': isTicketEditable,\n      }\"\n    >\n      <div\n        v-for=\"tag in tags\"\n        :key=\"tag\"\n        class=\"group flex h-10 grow items-center gap-1.5\"\n      >\n        <CommonLabel class=\"grow\" prefix-icon=\"tag\">\n          <CommonLink class=\"line-clamp-1 text-sm leading-snug\" link=\"#\">\n            {{ tag }}\n          </CommonLink>\n        </CommonLabel>\n        <CommonButton\n          v-if=\"isTicketEditable\"\n          v-tooltip=\"$t('Remove this tag')\"\n          :class=\"{ 'opacity-0 transition-opacity': !isTouchDevice }\"\n          class=\"group-hover:opacity-100 focus:opacity-100\"\n          icon=\"x-lg\"\n          size=\"small\"\n          variant=\"remove\"\n          @click.stop=\"removeTag(tag)\"\n        />\n      </div>\n      <CommonShowMoreButton\n        v-if=\"!areAllTagsVisible && totalTagsCount > MAX_TAGS_VISIBLE\"\n        class=\"mb-2.5 self-end\"\n        :entities=\"tags\"\n        :total-count=\"totalTagsCount\"\n        @click=\"showMore\"\n      />\n    </div>\n    <CommonLabel v-else size=\"small\">\n      {{ $t('No tags added yet.') }}\n    </CommonLabel>\n    <FormKit\n      v-if=\"isNewTagVisible\"\n      id=\"newTag\"\n      ref=\"new-tag\"\n      type=\"tags\"\n      :label=\"__('Add tag')\"\n      :label-sr-only=\"true\"\n      :multiple=\"false\"\n      :can-create=\"config.tag_new\"\n      :exclude=\"ticket?.tags\"\n      :on-deactivate=\"hideNewTag\"\n      @input=\"addNewTag\"\n    />\n    <CommonButton\n      v-else-if=\"isTicketEditable\"\n      v-tooltip=\"$t('Add tag')\"\n      size=\"medium\"\n      class=\"self-end\"\n      icon=\"plus-square-fill\"\n      @click=\"showNewTag\"\n    />\n  </div>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useTicketView } from '#shared/entities/ticket/composables/useTicketView.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonSectionCollapse from '#desktop/components/CommonSectionCollapse/CommonSectionCollapse.vue'\nimport { useTicketInformation } from '#desktop/pages/ticket/composables/useTicketInformation.ts'\nimport { type TicketSidebarContentProps } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarContent from '../TicketSidebarContent.vue'\n\nimport TicketAccountedTime from './TicketSidebarInformationContent/TicketAccountedTime.vue'\nimport TicketLinks from './TicketSidebarInformationContent/TicketLinks.vue'\nimport TicketSubscribers from './TicketSidebarInformationContent/TicketSubscribers.vue'\nimport TicketTags from './TicketSidebarInformationContent/TicketTags.vue'\n\nconst props = defineProps<TicketSidebarContentProps>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\nconst { ticket } = useTicketInformation()\n\nconst { isTicketAgent, isTicketEditable } = useTicketView(ticket)\n\nconst ticketMergeFlyoutName = 'ticket-merge'\nconst ticketChangeCustomerFlyoutName = 'ticket-change-customer'\nconst ticketHistoryFlyoutName = 'ticket-history'\n\nconst { open: openTicketMergeFlyout } = useFlyout({\n  name: ticketMergeFlyoutName,\n  component: () =>\n    import(\n      '#desktop/pages/ticket/components/TicketDetailView/actions/TicketMerge/TicketMergeFlyout.vue'\n    ),\n})\n\nconst { open: openTicketHistoryFlyout } = useFlyout({\n  name: ticketHistoryFlyoutName,\n  component: () =>\n    import(\n      '#desktop/pages/ticket/components/TicketDetailView/actions/TicketHistory/TicketHistoryFlyout.vue'\n    ),\n})\n\nconst { open: openChangeCustomerFlyout } = useFlyout({\n  name: ticketChangeCustomerFlyoutName,\n  component: () =>\n    import(\n      '#desktop/pages/ticket/components/TicketDetailView/actions/TicketChangeCustomer/TicketChangeCustomerFlyout.vue'\n    ),\n})\n\n// :TODO find a way to provide the ticket via prop\nconst actions = computed<MenuItem[]>(() => [\n  {\n    key: ticketHistoryFlyoutName,\n    label: __('History'),\n    icon: 'clock-history',\n    show: () => isTicketAgent.value,\n    onClick: () => openTicketHistoryFlyout({ ticket }),\n  },\n  {\n    key: ticketMergeFlyoutName,\n    label: __('Merge'),\n    icon: 'merge',\n    show: () => isTicketAgent.value && isTicketEditable.value,\n    onClick: () =>\n      openTicketMergeFlyout({\n        ticket,\n      }),\n    currentTaskbarTabId: props.context.currentTaskbarTabId,\n  },\n  {\n    key: ticketChangeCustomerFlyoutName,\n    label: __('Change customer'),\n    icon: 'person',\n    show: () => isTicketAgent.value && isTicketEditable.value,\n    onClick: () =>\n      openChangeCustomerFlyout({\n        ticket,\n      }),\n  },\n])\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n    :actions=\"actions\"\n  >\n    <CommonSectionCollapse\n      id=\"ticket-attributes\"\n      v-model=\"persistentStates.collapseAttributes\"\n      :title=\"__('Attributes')\"\n    >\n      <div\n        id=\"ticketEditAttributeForm\"\n        data-test-id=\"ticket-edit-attribute-form\"\n      />\n    </CommonSectionCollapse>\n\n    <CommonSectionCollapse\n      v-if=\"isTicketAgent && (isTicketEditable || ticket?.tags?.length)\"\n      id=\"ticket-tags\"\n      v-model=\"persistentStates.collapseTags\"\n      :title=\"__('Tags')\"\n    >\n      <TicketTags :ticket=\"ticket\" :is-ticket-editable=\"isTicketEditable\" />\n    </CommonSectionCollapse>\n\n    <CommonSectionCollapse\n      v-if=\"isTicketAgent\"\n      v-show=\"isTicketEditable || $refs.ticketLinksInstance?.hasLinks\"\n      id=\"ticket-links\"\n      v-model=\"persistentStates.collapseLinks\"\n      :title=\"__('Links')\"\n    >\n      <TicketLinks\n        ref=\"ticketLinksInstance\"\n        :ticket=\"ticket\"\n        :is-ticket-editable=\"isTicketEditable\"\n      />\n    </CommonSectionCollapse>\n\n    <CommonSectionCollapse\n      v-if=\"ticket?.timeUnit && isTicketAgent\"\n      id=\"ticket-time-accounting\"\n      v-model=\"persistentStates.collapseTimeAccounting\"\n      :title=\"__('Accounted Time')\"\n    >\n      <TicketAccountedTime :ticket=\"ticket!\" />\n    </CommonSectionCollapse>\n\n    <CommonSectionCollapse\n      v-if=\"isTicketAgent\"\n      id=\"ticket-subscribers\"\n      v-model=\"persistentStates.collapseSubscribers\"\n      :title=\"__('Subscribers')\"\n    >\n      <TicketSubscribers :ticket=\"ticket\" />\n    </CommonSectionCollapse>\n  </TicketSidebarContent>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useForm } from '#shared/components/Form/useForm.ts'\n\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  type TicketSidebarProps,\n  type TicketSidebarEmits,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../TicketSidebarWrapper.vue'\n\nimport TicketSidebarInformationContent from './TicketSidebarInformationContent.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\n// Form reference may be empty until it's initialized, rendering the subsequent call to composable non-reactive.\n//   Make sure to wrap it in a computed property in order to keep it reactive.\nconst form = computed(() => props.context.form)\n\nconst { isDirty } = useForm(form)\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nemit('show')\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n    :update-indicator=\"isDirty\"\n  >\n    <TicketSidebarInformationContent\n      v-model=\"persistentStates\"\n      :context=\"context\"\n      :sidebar-plugin=\"sidebarPlugin\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarInformation from '../TicketSidebarInformation/TicketSidebarInformation.vue'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('Ticket'),\n  component: TicketSidebarInformation,\n  permissions: ['ticket.agent', 'ticket.customer'],\n  screens: [TicketSidebarScreenType.TicketDetailView],\n  icon: 'chat-left-text',\n  order: 100,\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script lang=\"ts\" setup>\nimport type { AvatarOrganization } from '#shared/components/CommonOrganizationAvatar'\nimport CommonOrganizationAvatar from '#shared/components/CommonOrganizationAvatar/CommonOrganizationAvatar.vue'\nimport ObjectAttributes from '#shared/components/ObjectAttributes/ObjectAttributes.vue'\nimport type { ObjectAttribute } from '#shared/entities/object-attributes/types/store.ts'\nimport type { OrganizationQuery, User } from '#shared/graphql/types.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\nimport { normalizeEdges } from '#shared/utils/helpers.ts'\n\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonSimpleEntityList from '#desktop/components/CommonSimpleEntityList/CommonSimpleEntityList.vue'\nimport { EntityType } from '#desktop/components/CommonSimpleEntityList/types.ts'\nimport type { TicketSidebarContentProps } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarContent from '../TicketSidebarContent.vue'\n\ninterface Props extends TicketSidebarContentProps {\n  organization: OrganizationQuery['organization']\n  organizationMembers: ReturnType<typeof normalizeEdges<Partial<User>>>\n  objectAttributes: ObjectAttribute[]\n}\n\ndefineProps<Props>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\ndefineEmits<{\n  'load-more-members': []\n}>()\n\nconst actions: MenuItem[] = [\n  {\n    key: 'edit-organization',\n    label: __('Edit Organization'),\n    icon: 'organization-edit',\n    show: (entity) => entity?.policy.update,\n    onClick: (id) => {\n      console.log(id, 'Edit organization')\n    },\n  },\n]\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n    :entity=\"organization\"\n    :actions=\"actions\"\n  >\n    <CommonLink\n      :link=\"`/organizations/${organization.internalId}`\"\n      class=\"flex gap-2\"\n    >\n      <CommonOrganizationAvatar\n        class=\"p-3.5\"\n        :entity=\"organization as AvatarOrganization\"\n        size=\"normal\"\n      />\n      <CommonLabel size=\"large\" class=\"dark:text-white!\"\n        >{{ organization.name }}\n      </CommonLabel>\n    </CommonLink>\n\n    <ObjectAttributes\n      :object=\"organization\"\n      :attributes=\"objectAttributes\"\n      :skip-attributes=\"['name', 'vip', 'active']\"\n    />\n\n    <CommonSimpleEntityList\n      id=\"organization-members\"\n      v-model=\"persistentStates.collapseMembers\"\n      :type=\"EntityType.User\"\n      :label=\"__('Members')\"\n      :entity=\"organizationMembers\"\n      @load-more=\"$emit('load-more-members')\"\n    />\n  </TicketSidebarContent>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { watch, computed } from 'vue'\n\nimport { useOrganizationDetail } from '#shared/entities/organization/composables/useOrganizationDetail.ts'\nimport { useUserQuery } from '#shared/entities/user/graphql/queries/user.api.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\n\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport type {\n  TicketSidebarProps,\n  TicketSidebarEmits,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../TicketSidebarWrapper.vue'\n\nimport TicketSidebarOrganizationContent from './TicketSidebarOrganizationContent.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst customerId = computed(() => Number(props.context.formValues.customer_id))\n\n// Query is using cache first so it should normally not trigger any additional request, because the customer sidebar\n// is alreaddy doing the same query.\nconst userQuery = new QueryHandler(\n  useUserQuery(\n    () => ({\n      userInternalId: customerId.value,\n      secondaryOrganizationsCount: 3,\n    }),\n    () => ({ enabled: Boolean(customerId.value), fetchPolicy: 'cache-first' }),\n  ),\n)\n\nconst userResult = userQuery.result()\nconst customer = computed(() => userResult.value?.user)\n\nwatch(customer, (newValue) => {\n  if (!newValue?.organization) {\n    emit('hide')\n    return\n  }\n  emit('show')\n})\n\nconst organizationInternalId = computed(() => {\n  if (props.context.formValues?.organization_id)\n    return Number(props.context.formValues?.organization_id)\n\n  return customer.value?.organization?.internalId\n})\n\nconst { organization, organizationMembers, objectAttributes, loadAllMembers } =\n  useOrganizationDetail(organizationInternalId)\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n  >\n    <TicketSidebarOrganizationContent\n      v-if=\"organization\"\n      v-model=\"persistentStates\"\n      :context=\"context\"\n      :sidebar-plugin=\"sidebarPlugin\"\n      :organization=\"organization\"\n      :organization-members=\"organizationMembers\"\n      :object-attributes=\"objectAttributes\"\n      @load-more-members=\"loadAllMembers\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  TicketSidebarScreenType,\n  type TicketSidebarContext,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarOrganization from '../TicketSidebarOrganization/TicketSidebarOrganization.vue'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('Organization'),\n  component: TicketSidebarOrganization,\n  permissions: ['ticket.agent'],\n  screens: [\n    TicketSidebarScreenType.TicketDetailView,\n    TicketSidebarScreenType.TicketCreate,\n  ],\n  icon: 'buildings',\n  order: 2000,\n  available: (context: TicketSidebarContext) => {\n    // Consider the sidebar available only if a customer ID has been set to an integer ID.\n    //   In case of a string value, it's probably an unknown email address and therefore no organization to show.\n    return !!(\n      context.formValues.customer_id &&\n      typeof context.formValues.customer_id === 'number'\n    )\n  },\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const TicketSharedDraftStartAttributesFragmentDoc = gql`\n    fragment ticketSharedDraftStartAttributes on TicketSharedDraftStart {\n  id\n  name\n  updatedAt\n  updatedBy {\n    id\n    internalId\n    firstname\n    lastname\n    fullname\n    email\n    phone\n    image\n    outOfOffice\n    outOfOfficeStartAt\n    outOfOfficeEndAt\n    active\n  }\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketSharedDraftStartAttributesFragmentDoc } from '../fragments/ticketSharedDraftStartAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftStartListDocument = gql`\n    query ticketSharedDraftStartList($groupId: ID!) {\n  ticketSharedDraftStartList(groupId: $groupId) {\n    ...ticketSharedDraftStartAttributes\n  }\n}\n    ${TicketSharedDraftStartAttributesFragmentDoc}`;\nexport function useTicketSharedDraftStartListQuery(variables: Types.TicketSharedDraftStartListQueryVariables | VueCompositionApi.Ref<Types.TicketSharedDraftStartListQueryVariables> | ReactiveFunction<Types.TicketSharedDraftStartListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>(TicketSharedDraftStartListDocument, variables, options);\n}\nexport function useTicketSharedDraftStartListLazyQuery(variables?: Types.TicketSharedDraftStartListQueryVariables | VueCompositionApi.Ref<Types.TicketSharedDraftStartListQueryVariables> | ReactiveFunction<Types.TicketSharedDraftStartListQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>(TicketSharedDraftStartListDocument, variables, options);\n}\nexport type TicketSharedDraftStartListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketSharedDraftStartListQuery, Types.TicketSharedDraftStartListQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketSharedDraftStartAttributesFragmentDoc } from '../fragments/ticketSharedDraftStartAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftStartUpdateByGroupDocument = gql`\n    subscription ticketSharedDraftStartUpdateByGroup($groupId: ID!) {\n  ticketSharedDraftStartUpdateByGroup(groupId: $groupId) {\n    sharedDraftStarts {\n      ...ticketSharedDraftStartAttributes\n    }\n  }\n}\n    ${TicketSharedDraftStartAttributesFragmentDoc}`;\nexport function useTicketSharedDraftStartUpdateByGroupSubscription(variables: Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables | VueCompositionApi.Ref<Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables> | ReactiveFunction<Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables>, options: VueApolloComposable.UseSubscriptionOptions<Types.TicketSharedDraftStartUpdateByGroupSubscription, Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.TicketSharedDraftStartUpdateByGroupSubscription, Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.TicketSharedDraftStartUpdateByGroupSubscription, Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.TicketSharedDraftStartUpdateByGroupSubscription, Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables>(TicketSharedDraftStartUpdateByGroupDocument, variables, options);\n}\nexport type TicketSharedDraftStartUpdateByGroupSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.TicketSharedDraftStartUpdateByGroupSubscription, Types.TicketSharedDraftStartUpdateByGroupSubscriptionVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, type Ref } from 'vue'\n\nimport {\n  type TicketSharedDraftStartListQuery,\n  type TicketSharedDraftStartUpdateByGroupSubscription,\n  type TicketSharedDraftStartUpdateByGroupSubscriptionVariables,\n} from '#shared/graphql/types.ts'\nimport { QueryHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { GraphQLHandlerError } from '#shared/types/error.ts'\n\nimport { useTicketSharedDraftStartListQuery } from '../graphql/queries/ticketSharedDraftStartList.api.ts'\nimport { TicketSharedDraftStartUpdateByGroupDocument } from '../graphql/subscriptions/ticketSharedDraftStartUpdateByGroup.api.ts'\n\nexport const useTicketSharedDraftStart = (\n  groupId: Ref<string>,\n  errorCallback?: (error: GraphQLHandlerError) => boolean,\n) => {\n  const sharedDraftStartListQuery = new QueryHandler(\n    useTicketSharedDraftStartListQuery(\n      () => ({\n        groupId: groupId.value,\n      }),\n      // Commented out because cache-first policy breaks subscribing to updates.\n      {\n        fetchPolicy: 'cache-first',\n      },\n    ),\n    {\n      errorCallback,\n    },\n  )\n\n  const sharedDraftStartListResult = sharedDraftStartListQuery.result()\n  const loading = sharedDraftStartListQuery.loading()\n\n  const sharedDraftStartList = computed(\n    () => sharedDraftStartListResult.value?.ticketSharedDraftStartList,\n  )\n\n  sharedDraftStartListQuery.subscribeToMore<\n    TicketSharedDraftStartUpdateByGroupSubscriptionVariables,\n    TicketSharedDraftStartUpdateByGroupSubscription\n  >(() => ({\n    document: TicketSharedDraftStartUpdateByGroupDocument,\n    variables: {\n      groupId: groupId.value,\n    },\n    updateQuery: (_, { subscriptionData }) => {\n      if (\n        !subscriptionData.data?.ticketSharedDraftStartUpdateByGroup\n          ?.sharedDraftStarts\n      ) {\n        return null as unknown as TicketSharedDraftStartListQuery\n      }\n\n      return {\n        ticketSharedDraftStartList:\n          subscriptionData.data.ticketSharedDraftStartUpdateByGroup\n            .sharedDraftStarts,\n      }\n    },\n  }))\n\n  return {\n    loading,\n    sharedDraftStartList,\n    sharedDraftStartListQuery,\n  }\n}\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketSharedDraftStartAttributesFragmentDoc } from '../fragments/ticketSharedDraftStartAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftStartCreateDocument = gql`\n    mutation ticketSharedDraftStartCreate($name: String!, $input: TicketSharedDraftStartInput!) {\n  ticketSharedDraftStartCreate(name: $name, input: $input) {\n    sharedDraft {\n      ...ticketSharedDraftStartAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${TicketSharedDraftStartAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useTicketSharedDraftStartCreateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftStartCreateMutation, Types.TicketSharedDraftStartCreateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftStartCreateMutation, Types.TicketSharedDraftStartCreateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketSharedDraftStartCreateMutation, Types.TicketSharedDraftStartCreateMutationVariables>(TicketSharedDraftStartCreateDocument, options);\n}\nexport type TicketSharedDraftStartCreateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketSharedDraftStartCreateMutation, Types.TicketSharedDraftStartCreateMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketSharedDraftStartAttributesFragmentDoc } from '../fragments/ticketSharedDraftStartAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftStartUpdateDocument = gql`\n    mutation ticketSharedDraftStartUpdate($sharedDraftId: ID!, $input: TicketSharedDraftStartInput!) {\n  ticketSharedDraftStartUpdate(input: $input, sharedDraftId: $sharedDraftId) {\n    sharedDraft {\n      ...ticketSharedDraftStartAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${TicketSharedDraftStartAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useTicketSharedDraftStartUpdateMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftStartUpdateMutation, Types.TicketSharedDraftStartUpdateMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftStartUpdateMutation, Types.TicketSharedDraftStartUpdateMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketSharedDraftStartUpdateMutation, Types.TicketSharedDraftStartUpdateMutationVariables>(TicketSharedDraftStartUpdateDocument, options);\n}\nexport type TicketSharedDraftStartUpdateMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketSharedDraftStartUpdateMutation, Types.TicketSharedDraftStartUpdateMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftStartDeleteDocument = gql`\n    mutation ticketSharedDraftStartDelete($sharedDraftId: ID!) {\n  ticketSharedDraftStartDelete(sharedDraftId: $sharedDraftId) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketSharedDraftStartDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftStartDeleteMutation, Types.TicketSharedDraftStartDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftStartDeleteMutation, Types.TicketSharedDraftStartDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketSharedDraftStartDeleteMutation, Types.TicketSharedDraftStartDeleteMutationVariables>(TicketSharedDraftStartDeleteDocument, options);\n}\nexport type TicketSharedDraftStartDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketSharedDraftStartDeleteMutation, Types.TicketSharedDraftStartDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketSharedDraftStartAttributesFragmentDoc } from '../fragments/ticketSharedDraftStartAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftStartSingleDocument = gql`\n    query ticketSharedDraftStartSingle($sharedDraftId: ID!) {\n  ticketSharedDraftStartSingle(sharedDraftId: $sharedDraftId) {\n    ...ticketSharedDraftStartAttributes\n    content\n  }\n}\n    ${TicketSharedDraftStartAttributesFragmentDoc}`;\nexport function useTicketSharedDraftStartSingleQuery(variables: Types.TicketSharedDraftStartSingleQueryVariables | VueCompositionApi.Ref<Types.TicketSharedDraftStartSingleQueryVariables> | ReactiveFunction<Types.TicketSharedDraftStartSingleQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>(TicketSharedDraftStartSingleDocument, variables, options);\n}\nexport function useTicketSharedDraftStartSingleLazyQuery(variables?: Types.TicketSharedDraftStartSingleQueryVariables | VueCompositionApi.Ref<Types.TicketSharedDraftStartSingleQueryVariables> | ReactiveFunction<Types.TicketSharedDraftStartSingleQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>(TicketSharedDraftStartSingleDocument, variables, options);\n}\nexport type TicketSharedDraftStartSingleQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketSharedDraftStartSingleQuery, Types.TicketSharedDraftStartSingleQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftZoomDeleteDocument = gql`\n    mutation ticketSharedDraftZoomDelete($sharedDraftId: ID!) {\n  ticketSharedDraftZoomDelete(sharedDraftId: $sharedDraftId) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useTicketSharedDraftZoomDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftZoomDeleteMutation, Types.TicketSharedDraftZoomDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.TicketSharedDraftZoomDeleteMutation, Types.TicketSharedDraftZoomDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.TicketSharedDraftZoomDeleteMutation, Types.TicketSharedDraftZoomDeleteMutationVariables>(TicketSharedDraftZoomDeleteDocument, options);\n}\nexport type TicketSharedDraftZoomDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.TicketSharedDraftZoomDeleteMutation, Types.TicketSharedDraftZoomDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const TicketSharedDraftZoomAttributesFragmentDoc = gql`\n    fragment ticketSharedDraftZoomAttributes on TicketSharedDraftZoom {\n  id\n  ticketId\n  newArticle\n  ticketAttributes\n  updatedAt\n  updatedBy {\n    id\n    internalId\n    firstname\n    lastname\n    fullname\n    email\n    phone\n    image\n    outOfOffice\n    outOfOfficeStartAt\n    outOfOfficeEndAt\n    active\n  }\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TicketSharedDraftZoomAttributesFragmentDoc } from '../fragments/ticketSharedDraftZoomAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketSharedDraftZoomShowDocument = gql`\n    query ticketSharedDraftZoomShow($sharedDraftId: ID!) {\n  ticketSharedDraftZoomShow(sharedDraftId: $sharedDraftId) {\n    ...ticketSharedDraftZoomAttributes\n  }\n}\n    ${TicketSharedDraftZoomAttributesFragmentDoc}`;\nexport function useTicketSharedDraftZoomShowQuery(variables: Types.TicketSharedDraftZoomShowQueryVariables | VueCompositionApi.Ref<Types.TicketSharedDraftZoomShowQueryVariables> | ReactiveFunction<Types.TicketSharedDraftZoomShowQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>(TicketSharedDraftZoomShowDocument, variables, options);\n}\nexport function useTicketSharedDraftZoomShowLazyQuery(variables?: Types.TicketSharedDraftZoomShowQueryVariables | VueCompositionApi.Ref<Types.TicketSharedDraftZoomShowQueryVariables> | ReactiveFunction<Types.TicketSharedDraftZoomShowQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>(TicketSharedDraftZoomShowDocument, variables, options);\n}\nexport type TicketSharedDraftZoomShowQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketSharedDraftZoomShowQuery, Types.TicketSharedDraftZoomShowQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { FormRef, FormValues } from '#shared/components/Form/types.ts'\nimport { useTicketSharedDraftStartDeleteMutation } from '#shared/entities/ticket-shared-draft-start/graphql/mutations/ticketSharedDraftStartDelete.api.ts'\nimport { useTicketSharedDraftStartSingleQuery } from '#shared/entities/ticket-shared-draft-start/graphql/queries/ticketSharedDraftStartSingle.api.ts'\nimport { useTicketSharedDraftZoomDeleteMutation } from '#shared/entities/ticket-shared-draft-zoom/graphql/mutations/ticketSharedDraftZoomDelete.api.ts'\nimport { useTicketSharedDraftZoomShowQuery } from '#shared/entities/ticket-shared-draft-zoom/graphql/queries/ticketSharedDraftZoomShow.api.ts'\nimport { removeSignatureFromBody } from '#shared/utils/dom.ts'\n\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\n\nexport const useTicketSharedDraft = () => {\n  const mapSharedDraftParams = (ticketId: string, form?: FormRef) => {\n    const {\n      article: newArticle,\n      ...ticketAttributes\n    }: { article?: FormValues } = form?.values || {}\n\n    // Map values to the expected format\n    if (newArticle) {\n      newArticle.type = newArticle.articleType\n      newArticle.to = ((newArticle.to as string[]) || []).join(', ')\n      newArticle.cc = ((newArticle.cc as string[]) || []).join(', ')\n      newArticle.body = removeSignatureFromBody(newArticle.body)\n    }\n\n    return {\n      ticketId,\n      formId: form?.formId as string,\n      newArticle: newArticle || {},\n      ticketAttributes,\n    }\n  }\n\n  const sharedDraftFlyout = useFlyout({\n    name: 'shared-draft',\n    component: () => import('../components/TicketSharedDraftFlyout.vue'),\n  })\n\n  const openSharedDraftFlyout = (\n    draftType: 'start' | 'detail-view',\n    sharedDraftId?: string | null,\n    form?: FormRef,\n  ) => {\n    sharedDraftFlyout.open({\n      sharedDraftId,\n      form,\n      draftType,\n      metaInformationQuery:\n        draftType === 'start'\n          ? useTicketSharedDraftStartSingleQuery\n          : useTicketSharedDraftZoomShowQuery,\n      deleteMutation:\n        draftType === 'start'\n          ? useTicketSharedDraftStartDeleteMutation\n          : useTicketSharedDraftZoomDeleteMutation,\n    })\n  }\n\n  return {\n    mapSharedDraftParams,\n    openSharedDraftFlyout,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { createMessage, getNode } from '@formkit/core'\nimport { computed, ref } from 'vue'\nimport { useRoute } from 'vue-router'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useTicketSharedDraftStartCreateMutation } from '#shared/entities/ticket-shared-draft-start/graphql/mutations/ticketSharedDraftStartCreate.api.ts'\nimport { useTicketSharedDraftStartUpdateMutation } from '#shared/entities/ticket-shared-draft-start/graphql/mutations/ticketSharedDraftStartUpdate.api.ts'\nimport type { TicketSharedDraftStartListQuery } from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\nimport { removeSignatureFromBody } from '#shared/utils/dom.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport { useTicketSharedDraft } from '#desktop/pages/ticket/composables/useTicketSharedDraft.ts'\nimport type { TicketSidebarContentProps } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarContent from '../TicketSidebarContent.vue'\n\ninterface Props extends TicketSidebarContentProps {\n  sharedDraftStartList: TicketSharedDraftStartListQuery['ticketSharedDraftStartList']\n}\n\nconst props = defineProps<Props>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\nconst groupId = computed(() =>\n  convertToGraphQLId('Group', Number(props.context.formValues.group_id)),\n)\n\nconst currentSharedDraftId = computed(() =>\n  convertToGraphQLId(\n    'Ticket::SharedDraftStart',\n    Number(props.context.formValues.shared_draft_id),\n  ),\n)\n\nconst sharedDraftTitle = ref('')\n\nconst { notify } = useNotifications()\n\nconst sharedDraftStartCreateMutation = new MutationHandler(\n  useTicketSharedDraftStartCreateMutation(),\n)\n\nconst unsupportedFields = [\n  'articleSenderType',\n  'attachments',\n  'group_id',\n  'security',\n  'shared_draft_id',\n  'ticket_duplicate_detection',\n]\n\nconst supportedFields = () =>\n  Object.fromEntries(\n    Object.entries(props.context.formValues).filter(\n      ([field]) => !unsupportedFields.includes(field),\n    ),\n  )\n\nconst sharedDraftContent = () => ({\n  ...supportedFields(),\n  formSenderType: props.context.formValues.articleSenderType, // different key\n  cc: ((props.context.formValues.cc as string[]) || []).join(', '),\n  tags: ((props.context.formValues.tags as string[]) || []).join(', '),\n  body: removeSignatureFromBody(props.context.formValues.body),\n})\n\nconst route = useRoute()\n\nconst sharedDraftTitleNodeId = computed(\n  () => `sharedDraftTitle-${route.meta.taskbarTabEntityKey}`,\n)\n\nconst createSharedDraft = async () => {\n  const sharedDraftTitleNode = getNode(sharedDraftTitleNodeId.value)\n\n  if (!sharedDraftTitleNode) return\n\n  // Trigger field validation.\n  sharedDraftTitleNode.store.set(\n    createMessage({\n      key: 'submitted',\n      value: true,\n      visible: false,\n    }),\n  )\n\n  // Check if the field passed validation.\n  if (Object.keys(sharedDraftTitleNode.context?.messages || {}).length) return\n\n  sharedDraftStartCreateMutation\n    .send({\n      name: sharedDraftTitle.value.trim(),\n      input: {\n        formId: props.context.form?.formId as string,\n        groupId: groupId.value,\n        content: sharedDraftContent(),\n      },\n    })\n    .then(() => {\n      sharedDraftTitleNode.reset()\n\n      notify({\n        id: 'shared-draft-created',\n        type: NotificationTypes.Success,\n        message: __('Shared draft has been created successfully.'),\n      })\n    })\n}\n\nconst sharedDraftStartUpdateMutation = new MutationHandler(\n  useTicketSharedDraftStartUpdateMutation(),\n)\n\nconst updateSharedDraft = () => {\n  if (!currentSharedDraftId.value) return\n\n  sharedDraftStartUpdateMutation\n    .send({\n      sharedDraftId: currentSharedDraftId.value,\n      input: {\n        formId: props.context.form?.formId as string,\n        groupId: groupId.value,\n        content: sharedDraftContent(),\n      },\n    })\n    .then(() => {\n      notify({\n        id: 'shared-draft-updated',\n        type: NotificationTypes.Success,\n        message: __('Shared draft has been updated successfully.'),\n      })\n    })\n}\n\nconst { openSharedDraftFlyout } = useTicketSharedDraft()\n\nconst openFlyout = (sharedDraftStartId: string) => {\n  openSharedDraftFlyout('start', sharedDraftStartId, props.context.form)\n}\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n  >\n    <FormKit\n      :id=\"sharedDraftTitleNodeId\"\n      v-model=\"sharedDraftTitle\"\n      type=\"text\"\n      :label=\"__('Create a shared draft')\"\n      :placeholder=\"__('Name')\"\n      validation=\"required:trim\"\n      link=\"/\"\n      link-icon=\"plus-square-fill\"\n      :link-label=\"__('Create Shared Draft')\"\n      @link-click.prevent=\"createSharedDraft\"\n      @keypress.enter.prevent=\"createSharedDraft\"\n    />\n\n    <div class=\"py-1\">\n      <div\n        v-if=\"sharedDraftStartList?.length\"\n        class=\"flex flex-col divide-y divide-solid divide-neutral-100 dark:divide-gray-900\"\n      >\n        <div\n          v-for=\"sharedDraftStart in sharedDraftStartList\"\n          :key=\"sharedDraftStart.id\"\n          class=\"flex items-center gap-1.5 py-2.5\"\n        >\n          <div class=\"flex grow flex-col\">\n            <CommonLink\n              v-tooltip=\"sharedDraftStart.name\"\n              link=\"#\"\n              class=\"line-clamp-1\"\n              :aria-label=\"$t('Preview Shared Draft')\"\n              @click.prevent=\"openFlyout(sharedDraftStart.id)\"\n              >{{ sharedDraftStart.name }}</CommonLink\n            >\n            <CommonLabel\n              class=\"line-clamp-1 text-stone-200! dark:text-neutral-500!\"\n              size=\"small\"\n            >\n              <CommonDateTime :date-time=\"sharedDraftStart.updatedAt\" />\n              <template v-if=\"sharedDraftStart.updatedBy\">\n                <span v-tooltip=\"sharedDraftStart.updatedBy.fullname\">\n                  &bull; {{ sharedDraftStart.updatedBy.fullname }}\n                </span>\n              </template>\n            </CommonLabel>\n          </div>\n          <CommonButton\n            v-if=\"currentSharedDraftId === sharedDraftStart.id\"\n            v-tooltip=\"__('Update Shared Draft')\"\n            variant=\"submit\"\n            size=\"small\"\n            icon=\"arrow-repeat\"\n            @click=\"updateSharedDraft\"\n          />\n        </div>\n      </div>\n      <CommonLabel\n        v-else\n        class=\"text-stone-200! dark:text-neutral-500!\"\n        size=\"small\"\n      >\n        {{ $t('No shared drafts yet') }}\n      </CommonLabel>\n    </div>\n  </TicketSidebarContent>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useTicketSharedDraftStart } from '#shared/entities/ticket-shared-draft-start/composables/useTicketSharedDraftStart.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport {\n  GraphQLErrorTypes,\n  type GraphQLHandlerError,\n} from '#shared/types/error.ts'\n\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  type TicketSidebarProps,\n  type TicketSidebarEmits,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../TicketSidebarWrapper.vue'\n\nimport TicketSidebarSharedDraftStartContent from './TicketSidebarSharedDraftStartContent.vue'\n\nconst props = defineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst groupId = computed(() =>\n  convertToGraphQLId('Group', Number(props.context.formValues.group_id)),\n)\n\n// Silence query error notification in the frontend in case of unknown errors.\n//   The query may raise a non-specific error if the group has inactive shared drafts.\n//   Hide the sidebar in that case.\n//   FIXME: Check if it's possible to silence the console error too.\nconst errorCallback = (error: GraphQLHandlerError) => {\n  if (error.type === GraphQLErrorTypes.UnknownError) {\n    emit('hide')\n    return false\n  }\n\n  return true\n}\n\nconst { sharedDraftStartListQuery, sharedDraftStartList } =\n  useTicketSharedDraftStart(groupId, errorCallback)\n\nsharedDraftStartListQuery.onResult(({ data }) => {\n  if (!data?.ticketSharedDraftStartList) return\n\n  emit('show')\n})\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n  >\n    <TicketSidebarSharedDraftStartContent\n      v-if=\"sharedDraftStartList\"\n      v-model=\"persistentStates\"\n      :context=\"context\"\n      :sidebar-plugin=\"sidebarPlugin\"\n      :shared-draft-start-list=\"sharedDraftStartList\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarSharedDraftStart from '../TicketSidebarSharedDraftStart/TicketSidebarSharedDraftStart.vue'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('Shared Drafts'),\n  component: TicketSidebarSharedDraftStart,\n  permissions: ['ticket.agent'],\n  screens: [TicketSidebarScreenType.TicketCreate],\n  icon: 'file-text',\n  order: 3000,\n  available: (context) => !!context.formValues.group_id,\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { type ComputedRef, inject, type InjectionKey } from 'vue'\n\nimport type {\n  TicketArticlesQuery,\n  TicketArticlesQueryVariables,\n} from '#shared/graphql/types.ts'\nimport type { QueryHandler } from '#shared/server/apollo/handler/index.ts'\n\nexport type ArticleContext = {\n  articles: ComputedRef<TicketArticlesQuery | undefined>\n  articlesQuery: QueryHandler<TicketArticlesQuery, TicketArticlesQueryVariables>\n}\n\nexport const ARTICLES_INFORMATION_KEY = Symbol(\n  'article-context-key',\n) as InjectionKey<ArticleContext>\n\nexport const useArticleContext = () => {\n  const context = inject(ARTICLES_INFORMATION_KEY) as ArticleContext\n\n  return { context }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ref } from 'vue'\n\nimport { useImageViewer } from '#shared/composables/useImageViewer.ts'\nimport type { FilePreview } from '#shared/utils/files.ts'\n\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\n\nimport type { MaybeRef } from '@vueuse/shared'\n\ninterface ImagePreview {\n  src?: string\n  title?: string\n}\n\nexport interface ViewerFile {\n  id?: string\n  name?: string\n  content?: string\n  preview?: string\n  inline?: string\n  type?: Maybe<string>\n}\n\nexport interface ViewerOptions {\n  images: ImagePreview[]\n  index: number\n  visible: boolean\n}\n\nexport const imageViewerOptions = ref<ViewerOptions>({\n  visible: false,\n  index: 0,\n  images: [],\n})\n\nexport const useFilePreviewViewer = (viewFiles: MaybeRef<ViewerFile[]>) => {\n  const { showImage } = useImageViewer(viewFiles)\n\n  const calendarPreviewFlyout = useFlyout({\n    name: 'common-calendar-preview',\n    component: () =>\n      import(\n        '#desktop/components/CommonCalendarPreviewFlyout/CommonCalendarPreviewFlyout.vue'\n      ),\n  })\n\n  const showPreview = (type: FilePreview, filePreviewfile: ViewerFile) => {\n    if (type === 'image') {\n      showImage(filePreviewfile)\n    }\n\n    if (type === 'calendar') {\n      calendarPreviewFlyout.open({\n        fileId: filePreviewfile.id,\n        fileType: filePreviewfile.type,\n        fileName: filePreviewfile.name,\n      })\n    }\n  }\n\n  return {\n    showPreview,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, toRef } from 'vue'\n\nimport CommonFilePreview from '#shared/components/CommonFilePreview/CommonFilePreview.vue'\nimport { useAttachments } from '#shared/composables/useAttachments.ts'\nimport type { Attachment } from '#shared/entities/attachment/types.ts'\nimport type { ObjectLike } from '#shared/types/utils.ts'\n\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport { useFilePreviewViewer } from '#desktop/composables/useFilePreviewViewer.ts'\nimport type { TicketSidebarContentProps } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarContent from '../TicketSidebarContent.vue'\n\ninterface Props extends TicketSidebarContentProps {\n  ticketAttachments: Attachment[]\n  loading: boolean\n}\n\nconst props = defineProps<Props>()\n\nconst persistentStates = defineModel<ObjectLike>({ required: true })\n\nconst { attachments: attachmentsWithUrls } = useAttachments({\n  attachments: toRef(props, 'ticketAttachments'),\n})\n\nconst { showPreview } = useFilePreviewViewer(\n  computed(() => attachmentsWithUrls.value),\n)\n</script>\n\n<template>\n  <TicketSidebarContent\n    v-model=\"persistentStates.scrollPosition\"\n    :title=\"sidebarPlugin.title\"\n    :icon=\"sidebarPlugin.icon\"\n  >\n    <CommonLoader :loading=\"loading\">\n      <div\n        v-if=\"ticketAttachments && ticketAttachments.length > 0\"\n        class=\"flex flex-col rounded-lg bg-blue-200 p-1 text-gray-100 dark:bg-gray-700 dark:text-neutral-400\"\n      >\n        <CommonFilePreview\n          v-for=\"attachment of attachmentsWithUrls\"\n          :key=\"attachment.internalId\"\n          :download-url=\"attachment.downloadUrl\"\n          :preview-url=\"attachment.preview\"\n          :file=\"attachment\"\n          :no-preview=\"!$c.ui_ticket_zoom_attachments_preview\"\n          no-remove\n          @preview=\"($event, type) => showPreview(type, attachment)\"\n        />\n      </div>\n      <CommonLabel v-else>\n        {{ $t('No attached files') }}\n      </CommonLabel>\n    </CommonLoader>\n  </TicketSidebarContent>\n</template>\n","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const TicketAttachmentsDocument = gql`\n    query ticketAttachments($ticketId: ID!) {\n  ticketAttachments(ticketId: $ticketId) {\n    id\n    internalId\n    name\n    size\n    type\n    preferences\n  }\n}\n    `;\nexport function useTicketAttachmentsQuery(variables: Types.TicketAttachmentsQueryVariables | VueCompositionApi.Ref<Types.TicketAttachmentsQueryVariables> | ReactiveFunction<Types.TicketAttachmentsQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>(TicketAttachmentsDocument, variables, options);\n}\nexport function useTicketAttachmentsLazyQuery(variables?: Types.TicketAttachmentsQueryVariables | VueCompositionApi.Ref<Types.TicketAttachmentsQueryVariables> | ReactiveFunction<Types.TicketAttachmentsQueryVariables>, options: VueApolloComposable.UseQueryOptions<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>(TicketAttachmentsDocument, variables, options);\n}\nexport type TicketAttachmentsQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.TicketAttachmentsQuery, Types.TicketAttachmentsQueryVariables>;","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed } from 'vue'\n\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\n\nimport { useTicketInformation } from '#desktop/pages/ticket/composables/useTicketInformation.ts'\nimport { useTicketAttachmentsQuery } from '#desktop/pages/ticket/graphql/queries/ticketAttachments.api.ts'\n\nimport type { WatchQueryFetchPolicy } from '@apollo/client/core'\n\nexport const useTicketAttachments = (fetchPolicy?: WatchQueryFetchPolicy) => {\n  const { ticketId } = useTicketInformation()\n\n  const ticketAttachmentsQuery = new QueryHandler(\n    useTicketAttachmentsQuery(\n      () => ({\n        ticketId: ticketId.value,\n      }),\n      { fetchPolicy },\n    ),\n  )\n  const result = ticketAttachmentsQuery.result()\n  const loading = ticketAttachmentsQuery.loading()\n\n  const ticketAttachments = computed(() => {\n    if (!result.value?.ticketAttachments) return []\n\n    return result.value?.ticketAttachments\n  })\n\n  return {\n    ticketAttachmentsQuery,\n    ticketAttachments,\n    loading,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, watch } from 'vue'\n\nimport { useArticleContext } from '#desktop/pages/ticket/composables/useArticleContext.ts'\nimport { usePersistentStates } from '#desktop/pages/ticket/composables/usePersistentStates.ts'\nimport {\n  type TicketSidebarProps,\n  type TicketSidebarEmits,\n  TicketSidebarButtonBadgeType,\n  type TicketSidebarButtonBadgeDetails,\n} from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarWrapper from '../TicketSidebarWrapper.vue'\n\nimport TicketSidebarAttachmentContent from './TicketSidebarAttachmentContent.vue'\nimport { useTicketAttachments } from './useTicketAttachments.ts'\n\ndefineProps<TicketSidebarProps>()\n\nconst { persistentStates } = usePersistentStates()\n\nconst emit = defineEmits<TicketSidebarEmits>()\n\nconst { ticketAttachments, ticketAttachmentsQuery, loading } =\n  useTicketAttachments()\n\nconst { context: contextArticle } = useArticleContext()\n\nwatch(contextArticle.articles, (_, oldValue) => {\n  if (oldValue === undefined) {\n    return\n  }\n\n  ticketAttachmentsQuery.refetch()\n})\n\nwatch(ticketAttachments, (newValue) => {\n  if (newValue.length === 0) {\n    emit('hide')\n    return\n  }\n  emit('show')\n})\n\nconst badge = computed<TicketSidebarButtonBadgeDetails | undefined>(() => {\n  const label = __('Attachments')\n\n  return {\n    type: TicketSidebarButtonBadgeType.Info,\n    value: ticketAttachments.value.length,\n    label,\n  }\n})\n</script>\n\n<template>\n  <TicketSidebarWrapper\n    :key=\"sidebar\"\n    :sidebar=\"sidebar\"\n    :sidebar-plugin=\"sidebarPlugin\"\n    :selected=\"selected\"\n    :badge=\"badge\"\n  >\n    <TicketSidebarAttachmentContent\n      v-model=\"persistentStates\"\n      :context=\"context\"\n      :sidebar-plugin=\"sidebarPlugin\"\n      :ticket-attachments=\"ticketAttachments\"\n      :loading=\"loading\"\n    />\n  </TicketSidebarWrapper>\n</template>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport TicketSidebarAttachment from '../TicketSidebarAttachment/TicketSidebarAttachment.vue'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nexport default <TicketSidebarPlugin>{\n  title: __('Attachments'),\n  component: TicketSidebarAttachment,\n  permissions: ['ticket.agent', 'ticket.customer'],\n  screens: [TicketSidebarScreenType.TicketDetailView],\n  icon: 'paperclip',\n  order: 7000,\n  available: () => {\n    const { config } = useApplicationStore()\n\n    return config.ui_ticket_zoom_sidebar_article_attachments\n  },\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport type { TicketSidebarScreenType } from '#desktop/pages/ticket/types/sidebar.ts'\n\nimport type { TicketSidebarPlugin } from './types.ts'\n\nconst pluginModules = import.meta.glob<TicketSidebarPlugin>(\n  ['./**/*.ts', '!./**/index.ts', '!./types.ts', '!./__tests__/**/*.ts'],\n  {\n    eager: true,\n    import: 'default',\n  },\n)\n\nexport const pluginFiles = Object.entries(pluginModules)\n  .map<[string, TicketSidebarPlugin]>(([file, plugin]) => {\n    const name = file.replace(/^.*\\/([^/]+)\\.ts$/, '$1')\n    return [name, plugin]\n  })\n  .sort(([, p1], [, p2]) => p1.order - p2.order)\n\nexport const useTicketSidebarPlugins = (screen: TicketSidebarScreenType) => {\n  const { hasPermission } = useSessionStore()\n\n  return pluginFiles\n    .filter(\n      ([, plugin]) =>\n        hasPermission(plugin.permissions) && plugin.screens.includes(screen),\n    )\n    .reduce<Record<string, TicketSidebarPlugin>>((acc, [name, plugin]) => {\n      acc[name] = plugin\n      return acc\n    }, {})\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { injectLocal, provideLocal } from '@vueuse/shared'\nimport { isEqual } from 'lodash-es'\nimport { computed, ref, type InjectionKey, type Ref } from 'vue'\n\nimport { useTicketSidebarPlugins } from '../components/TicketSidebar/plugins/index.ts'\n\nimport type { TicketSidebarPlugin } from '../components/TicketSidebar/plugins/types.ts'\nimport type {\n  TicketSidebarContext,\n  TicketSidebarInformation,\n} from '../types/sidebar.ts'\n\nexport const TICKET_SIDEBAR_SYMBOL = Symbol(\n  'ticket-sidebar',\n) as InjectionKey<TicketSidebarInformation>\n\nexport const useProvideTicketSidebar = (context: Ref<TicketSidebarContext>) => {\n  const shownSidebars = ref<Record<string, boolean>>({})\n  const switchedSidebar = ref<string>()\n\n  const showSidebar = (sidebar: string) => {\n    shownSidebars.value[sidebar] = true\n  }\n\n  const hideSidebar = (sidebar: string) => {\n    shownSidebars.value[sidebar] = false\n  }\n\n  const switchSidebar = (newSidebar: string) => {\n    switchedSidebar.value = newSidebar\n  }\n\n  const sidebarPlugins = useTicketSidebarPlugins(context.value.screenType)\n\n  const availableSidebarPlugins = computed<Record<string, TicketSidebarPlugin>>(\n    (currentAvailableSidebarPlugins) => {\n      const newCurrentSidebarPlugins = Object.fromEntries(\n        Object.entries(sidebarPlugins).filter(([, sidebarPlugin]) =>\n          typeof sidebarPlugin.available === 'function'\n            ? sidebarPlugin.available(context.value)\n            : true,\n        ),\n      )\n\n      if (\n        currentAvailableSidebarPlugins &&\n        isEqual(currentAvailableSidebarPlugins, newCurrentSidebarPlugins)\n      )\n        return currentAvailableSidebarPlugins\n\n      return newCurrentSidebarPlugins\n    },\n  )\n\n  const activeSidebar = computed<string | null>(() => {\n    if (!Object.keys(availableSidebarPlugins.value)?.length) return null\n    if (\n      switchedSidebar.value &&\n      availableSidebarPlugins.value[switchedSidebar.value] &&\n      shownSidebars.value[switchedSidebar.value]\n    )\n      return switchedSidebar.value\n\n    const sidebar = Object.entries(availableSidebarPlugins.value).filter(\n      ([sidebar]) => shownSidebars.value[sidebar],\n    )?.[0]?.[0]\n\n    return sidebar === undefined ? ' ' : sidebar // ' ' is a fallback value for a non-selectable sidebar to prevent flickering if sidebar is loading\n  })\n\n  const hasSidebar = computed(() => Boolean(activeSidebar.value))\n\n  provideLocal(TICKET_SIDEBAR_SYMBOL, {\n    shownSidebars,\n    activeSidebar,\n    availableSidebarPlugins,\n    sidebarPlugins,\n    hasSidebar,\n    showSidebar,\n    hideSidebar,\n    switchSidebar,\n  })\n}\n\nexport const useTicketSidebar = () => {\n  return injectLocal(TICKET_SIDEBAR_SYMBOL) as TicketSidebarInformation\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { useTicketSidebar } from '../composables/useTicketSidebar.ts'\n\nimport type { TicketSidebarContext } from '../types/sidebar.ts'\n\ninterface Props {\n  context: TicketSidebarContext\n  isCollapsed: boolean\n  toggleCollapse: () => void\n}\n\nconst props = defineProps<Props>()\n\nconst {\n  activeSidebar,\n  availableSidebarPlugins,\n  shownSidebars,\n  showSidebar,\n  hideSidebar,\n  switchSidebar,\n} = useTicketSidebar()\n\nconst maybeToggleAndSwitchSidebar = (newSidebar: string) => {\n  if (props.isCollapsed) props.toggleCollapse()\n  switchSidebar(newSidebar)\n}\n</script>\n\n<template>\n  <div class=\"flex h-full justify-end\">\n    <div v-show=\"!isCollapsed\" id=\"ticketSidebar\" class=\"flex grow flex-col\" />\n    <div\n      class=\"flex flex-col items-center gap-2.5 border-neutral-100 px-2.5 py-3 transition-[border] dark:border-gray-900\"\n      :class=\"{ 'border-s': !isCollapsed }\"\n    >\n      <component\n        :is=\"sidebarPlugin.component\"\n        v-for=\"(sidebarPlugin, sidebar) of availableSidebarPlugins\"\n        v-show=\"shownSidebars[sidebar]\"\n        :key=\"sidebar\"\n        :selected=\"activeSidebar === sidebar\"\n        :sidebar=\"sidebar\"\n        :sidebar-plugin=\"sidebarPlugin\"\n        :context=\"context\"\n        @click=\"maybeToggleAndSwitchSidebar\"\n        @show=\"showSidebar(sidebar as string)\"\n        @hide=\"hideSidebar(sidebar as string)\"\n      />\n    </div>\n  </div>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport CommonPopover from '#shared/components/CommonPopover/CommonPopover.vue'\nimport { usePopover } from '#shared/components/CommonPopover/usePopover.ts'\nimport { EnumTextDirection } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n/index.ts'\nimport { useLocaleStore } from '#shared/stores/locale.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport type { DropdownItem } from '#desktop/components/CommonDropdown/types.ts'\nimport CommonPopoverMenu from '#desktop/components/CommonPopoverMenu/CommonPopoverMenu.vue'\nimport CommonPopoverMenuItem from '#desktop/components/CommonPopoverMenu/CommonPopoverMenuItem.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\n\ninterface Props {\n  items: MenuItem[]\n  orientation?: 'top' | 'bottom'\n  /**\n   * Will apply on the button label if v-model is not bound\n   * */\n  actionLabel?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  orientation: 'bottom',\n})\n\nconst emit = defineEmits<{\n  'handle-action': [DropdownItem]\n}>()\n\nconst { popover, popoverTarget, isOpen, toggle } = usePopover()\n\nconst locale = useLocaleStore()\n\nconst currentPopoverPlacement = computed(() => {\n  if (locale.localeData?.dir === EnumTextDirection.Rtl) return 'start'\n  return 'end'\n})\n\n/**\n * MenuItem transformed into a radio button model\n * */\nconst modelValue = defineModel<DropdownItem>()\n\nconst dropdownLabel = computed(() =>\n  modelValue.value ? i18n.t(modelValue.value?.label) : props.actionLabel,\n)\n\nconst handleSelectRadio = (item: DropdownItem) => {\n  modelValue.value = item\n  toggle()\n}\n\nconst actionItems = computed(() =>\n  props.items.map((item) => ({\n    ...item,\n    onClick: () => emit('handle-action', item),\n  })),\n)\n</script>\n\n<template>\n  <CommonPopover\n    ref=\"popover\"\n    :owner=\"popoverTarget\"\n    :placement=\"currentPopoverPlacement\"\n    :orientation=\"orientation\"\n  >\n    <CommonPopoverMenu v-if=\"modelValue\" :popover=\"popover\" :items=\"items\">\n      <template v-for=\"item in items\" :key=\"item.key\" #[`item-${item.key}`]>\n        <div class=\"group flex grow cursor-pointer items-center\">\n          <CommonPopoverMenuItem\n            class=\"flex grow items-center gap-2 p-2.5\"\n            :label=\"item.label\"\n            :variant=\"item.variant\"\n            :link=\"item.link\"\n            :icon=\"item.icon\"\n            :label-placeholder=\"item.labelPlaceholder\"\n            role=\"checkbox\"\n            :aria-checked=\"modelValue.key === item.key\"\n            @click=\"handleSelectRadio(item)\"\n          >\n            <template #leading>\n              <CommonIcon\n                :class=\"{ 'opacity-0': modelValue.key !== item.key }\"\n                size=\"tiny\"\n                name=\"check2\"\n              />\n            </template>\n          </CommonPopoverMenuItem>\n        </div>\n      </template>\n    </CommonPopoverMenu>\n    <CommonPopoverMenu v-else :popover=\"popover\" :items=\"actionItems\" />\n  </CommonPopover>\n\n  <CommonButton\n    v-bind=\"$attrs\"\n    ref=\"popoverTarget\"\n    class=\"group\"\n    :class=\"{\n      'hover:bg-blue-600! hover:text-black dark:hover:bg-blue-900! dark:hover:text-white':\n        !isOpen,\n      'bg-blue-800! text-white! outline! outline-offset-1! outline-blue-800! hover:bg-blue-800!':\n        isOpen,\n    }\"\n    size=\"large\"\n    variant=\"secondary\"\n    @click=\"toggle\"\n  >\n    <template #label>\n      <span class=\"truncate\">\n        {{ dropdownLabel }}\n      </span>\n      <CommonIcon\n        size=\"small\"\n        decorative\n        class=\"pointer-events-none shrink-0 text-stone-200 dark:text-neutral-500 dark:group-hover:text-white\"\n        :class=\"{\n          'text-white dark:text-white': isOpen,\n          'group-hover:text-black dark:group-hover:text-white': !isOpen,\n        }\"\n        name=\"chevron-up\"\n      />\n    </template>\n  </CommonButton>\n</template>\n"],"file":"assets/CommonDropdown.vue_vue_type_script_setup_true_lang-DOCvnZ_a.js"}