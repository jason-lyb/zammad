{"version":3,"mappings":";y1BASA,MAAMA,EAAQC,EAMRC,EAASC,IAGTC,EAAkBC,EAAS,IACxBL,EAAM,kBAAoB,CAAC,sCAAsC,EAAI,EAC7E,EAEKM,EAAcD,EAAS,IACvBL,EAAM,OAAS,QAAgB,CAAC,SAAS,EAEtC,CAAC,WAAW,CACpB,4qDCpBD,MAAMO,EAAiBC,EAAU,CAC/B,KAAM,YACN,UAAW,IAAMC,EAAA,WAAO,oCAA4B,sGACrD,0YCJC,SAAAC,GAAAC,EAAAC,EAAA,QAGUC,EAAA,EAAAC,EAAA,SAAAC,GAAA,ggBCyCZ,MAAMf,EAAQC,EAQRe,EAAWX,EAAS,IACxBL,EAAM,QAAU,SAAW,QAAU,QAGjCiB,EAAwBZ,EAAS,IAC9BL,EAAM,mBAAqB,SAAW,eAAiB,EAC/D,EAEKkB,EAAeC,EAAI,EAAK,EAExB,CAAE,OAAAC,GAAWC,IAEbC,EAAe,GAAGF,CAAM,IAAIpB,EAAM,IAAI,GAEtC,CACJ,oBAAAuB,EACA,gBAAAC,EACA,gBAAAC,EACA,YAAAC,EACA,gBAAAC,EACA,cAAAC,EACA,cAAAC,EACA,kBAAAC,CACE,EAAAC,GAAqBT,EAAcU,EAAgB,GAAG,EAEpD,CAAE,UAAAC,GAAcC","names":["props","__props","locale","useLocaleStore","lastItemClasses","computed","sizeClasses","pageHelpDialog","useDialog","__vitePreload","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","_hoisted_1","maxWidth","contentAlignmentClass","noTransition","ref","userId","useSessionStore","storageKeyId","currentSidebarWidth","maxSidebarWidth","minSidebarWidth","gridColumns","collapseSidebar","expandSidebar","resizeSidebar","resetSidebarWidth","useResizeGridColumns","SidebarPosition","durations","useTransitionConfig"],"ignoreList":[],"sources":["../../../../../app/frontend/apps/desktop/components/CommonBreadcrumb/CommonBreadcrumb.vue","../../../../../app/frontend/apps/desktop/components/CommonPageHelp/CommonPageHelp.vue","../../../../../app/frontend/apps/desktop/components/layout/LayoutBottomBar.vue","../../../../../app/frontend/apps/desktop/components/layout/LayoutContent.vue"],"sourcesContent":["<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { useLocaleStore } from '#shared/stores/locale.ts'\n\nimport type { BreadcrumbItem } from './types.ts'\n\nconst props = defineProps<{\n  items: BreadcrumbItem[]\n  emphasizeLastItem?: boolean\n  size?: 'small' | 'large'\n}>()\n\nconst locale = useLocaleStore()\n// TODO: Missing handling when there is not enough space for the breadcrumb\n\nconst lastItemClasses = computed(() => {\n  return props.emphasizeLastItem ? ['last:dark:text-white last:text-black'] : []\n})\n\nconst sizeClasses = computed(() => {\n  if (props.size === 'small') return ['text-xs']\n\n  return ['text-base'] // default -> 'large'\n})\n</script>\n\n<template>\n  <nav\n    :class=\"sizeClasses\"\n    :aria-label=\"$t('Breadcrumb navigation')\"\n    class=\"max-w-full\"\n  >\n    <ol class=\"flex\">\n      <li\n        v-for=\"(item, idx) in items\"\n        :key=\"item.label as string\"\n        class=\"flex items-center\"\n        :class=\"lastItemClasses\"\n      >\n        <CommonIcon\n          v-if=\"item.icon\"\n          :name=\"item.icon\"\n          size=\"xs\"\n          class=\"shrink-0 ltr:mr-1 rtl:ml-1\"\n        />\n\n        <CommonLink\n          v-if=\"item.route\"\n          class=\"focus:outline-hidden focus-visible:outline-1 focus-visible:outline-offset-1 focus-visible:outline-blue-800\"\n          :link=\"item.route\"\n          internal\n        >\n          <CommonLabel size=\"large\" class=\"line-clamp-1 hover:underline\">{{\n            item.noOptionLabelTranslation\n              ? item.label\n              : $t(item.label as string)\n          }}</CommonLabel>\n        </CommonLink>\n\n        <h1 v-else class=\"line-clamp-1\" aria-current=\"page\">\n          {{\n            item.noOptionLabelTranslation\n              ? item.label\n              : $t(item.label as string)\n          }}\n        </h1>\n\n        <CommonBadge\n          v-if=\"item.count !== undefined\"\n          class=\"leading-snug font-bold ltr:ml-1.5 rtl:mr-1.5\"\n          size=\"xs\"\n          rounded\n        >\n          {{ item.count }}\n        </CommonBadge>\n\n        <CommonIcon\n          v-if=\"idx !== items.length - 1\"\n          :name=\"\n            locale.localeData?.dir === 'rtl' ? 'chevron-left' : 'chevron-right'\n          \"\n          size=\"xs\"\n          class=\"mx-1 inline-flex shrink-0\"\n        />\n\n        <!-- Add a slot at the end of the last item. -->\n        <slot v-if=\"idx === items.length - 1\" name=\"trailing\" />\n      </li>\n    </ol>\n  </nav>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport { useDialog } from '#desktop/components/CommonDialog/useDialog.ts'\n\nconst pageHelpDialog = useDialog({\n  name: 'page-help',\n  component: () => import('./CommonPageHelpDialog.vue'),\n})\n\ndefineSlots<{\n  default(): never // any\n}>()\n</script>\n\n<template>\n  <CommonButton\n    prefix-icon=\"question-circle\"\n    size=\"medium\"\n    @click=\"pageHelpDialog.open({ content: $slots?.default })\"\n    >{{ $t('Help') }}</CommonButton\n  >\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\"></script>\n\n<template>\n  <footer\n    class=\"sticky flex h-14 w-full flex-row place-content-end items-center gap-4 border-t border-t-neutral-100 bg-neutral-50 p-5 dark:border-t-gray-900 dark:bg-gray-500\"\n  >\n    <slot />\n  </footer>\n</template>\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\n\nimport { useTransitionConfig } from '#shared/composables/useTransitionConfig.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport CommonBreadcrumb from '#desktop/components/CommonBreadcrumb/CommonBreadcrumb.vue'\nimport type { BreadcrumbItem } from '#desktop/components/CommonBreadcrumb/types.ts'\nimport CommonHelpText from '#desktop/components/CommonPageHelp/CommonHelpText.vue'\nimport CommonPageHelp from '#desktop/components/CommonPageHelp/CommonPageHelp.vue'\nimport LayoutBottomBar from '#desktop/components/layout/LayoutBottomBar.vue'\nimport LayoutMain from '#desktop/components/layout/LayoutMain.vue'\nimport LayoutSidebar from '#desktop/components/layout/LayoutSidebar.vue'\nimport { useResizeGridColumns } from '#desktop/composables/useResizeGridColumns.ts'\n\nimport {\n  SidebarPosition,\n  type BackgroundVariant,\n  type ContentAlignment,\n  type ContentWidth,\n} from './types.ts'\n\nexport interface Props {\n  name?: string\n  breadcrumbItems?: BreadcrumbItem[]\n  width?: ContentWidth\n  backgroundVariant?: BackgroundVariant\n  contentAlignment?: ContentAlignment\n  helpText?: string[] | string\n  /**\n   * Hides `default slot` content and shows help text if provided\n   */\n  showInlineHelp?: boolean\n  showSidebar?: boolean\n  noPadding?: boolean\n  /**\n   * Removes padding from main container\n   * Applies padding to breadcrumb container\n   * ⚠️ Set manually the padding to the default slot container p-4\n   */\n  contentPadding?: boolean\n  /**\n   * Disables the vertical scroll on the main element\n   */\n  noScrollable?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  name: 'content',\n  backgroundVariant: 'tertiary',\n  width: 'full',\n  showInlineHelp: false,\n  contentAlignment: 'start',\n})\n\nconst maxWidth = computed(() =>\n  props.width === 'narrow' ? '600px' : undefined,\n)\n\nconst contentAlignmentClass = computed(() => {\n  return props.contentAlignment === 'center' ? 'items-center' : ''\n})\n\nconst noTransition = ref(false)\n\nconst { userId } = useSessionStore()\n\nconst storageKeyId = `${userId}-${props.name}`\n\nconst {\n  currentSidebarWidth,\n  maxSidebarWidth,\n  minSidebarWidth,\n  gridColumns,\n  collapseSidebar,\n  expandSidebar,\n  resizeSidebar,\n  resetSidebarWidth,\n} = useResizeGridColumns(storageKeyId, SidebarPosition.End)\n\nconst { durations } = useTransitionConfig()\n</script>\n\n<template>\n  <div class=\"flex h-full max-h-screen flex-col\">\n    <div\n      class=\"grid h-full duration-100\"\n      :class=\"{\n        'transition-none': noTransition,\n        'max-h-[calc(100%-3.5rem)]': $slots.bottomBar,\n        'max-h-screen': !$slots.bottomBar,\n      }\"\n      :style=\"$slots.sideBar && showSidebar ? gridColumns : undefined\"\n    >\n      <LayoutMain\n        ref=\"layout-main\"\n        :no-padding=\"noPadding || contentPadding\"\n        :no-scrollable=\"noScrollable\"\n        :background-variant=\"backgroundVariant\"\n      >\n        <div\n          data-test-id=\"layout-wrapper\"\n          class=\"flex h-full grow flex-col gap-3\"\n          :class=\"contentAlignmentClass\"\n          :style=\"{ maxWidth }\"\n        >\n          <div\n            v-if=\"breadcrumbItems\"\n            data-test-id=\"wrapper-breadcrumb\"\n            class=\"flex items-center justify-between\"\n            :class=\"{ 'px-4 pt-4': contentPadding }\"\n          >\n            <CommonBreadcrumb :items=\"breadcrumbItems\" />\n            <div\n              v-if=\"$slots.headerRight || helpText || $slots.helpPage\"\n              class=\"flex gap-4 ltr:text-left rtl:text-right\"\n            >\n              <CommonPageHelp\n                v-if=\"!showInlineHelp && (helpText || $slots.helpPage)\"\n              >\n                <slot name=\"helpPage\">\n                  <CommonHelpText :help-text=\"helpText\" />\n                </slot>\n              </CommonPageHelp>\n\n              <slot name=\"headerRight\" />\n            </div>\n          </div>\n\n          <Transition :duration=\"durations.normal\" name=\"fade\" mode=\"out-in\">\n            <slot v-if=\"!showInlineHelp\" />\n            <slot v-else name=\"helpPage\">\n              <CommonHelpText :help-text=\"helpText\" />\n            </slot>\n          </Transition>\n        </div>\n      </LayoutMain>\n\n      <LayoutSidebar\n        v-if=\"$slots.sideBar\"\n        v-show=\"showSidebar\"\n        id=\"content-sidebar\"\n        #default=\"{ isCollapsed, toggleCollapse }\"\n        :name=\"storageKeyId\"\n        :position=\"SidebarPosition.End\"\n        :aria-label=\"$t('Content sidebar')\"\n        collapsible\n        resizable\n        :current-width=\"currentSidebarWidth\"\n        :max-width=\"maxSidebarWidth\"\n        :min-width=\"minSidebarWidth\"\n        no-padding\n        no-scroll\n        class=\"bg-neutral-50! dark:bg-gray-500!\"\n        :class=\"{\n          'max-h-[calc(100dvh-3.5rem)]!': $slots.bottomBar,\n        }\"\n        @collapse=\"collapseSidebar\"\n        @expand=\"expandSidebar\"\n        @resize-horizontal=\"resizeSidebar\"\n        @resize-horizontal-start=\"noTransition = true\"\n        @resize-horizontal-end=\"noTransition = false\"\n        @reset-width=\"resetSidebarWidth\"\n      >\n        <slot name=\"sideBar\" v-bind=\"{ isCollapsed, toggleCollapse }\" />\n      </LayoutSidebar>\n    </div>\n\n    <LayoutBottomBar v-if=\"$slots.bottomBar\">\n      <slot name=\"bottomBar\" />\n    </LayoutBottomBar>\n  </div>\n</template>\n"],"file":"assets/LayoutContent.vue_vue_type_script_setup_true_lang-SafgfcNL.js"}