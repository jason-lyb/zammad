{"version":3,"file":"PersonalSettingLinkedAccounts-D7JMh2eK.js","sources":["../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentLinkedAccount.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingLinkedAccounts.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentRemoveLinkedAccountDocument = gql`\n    mutation userCurrentRemoveLinkedAccount($provider: EnumAuthenticationProvider!, $uid: String!) {\n  userCurrentRemoveLinkedAccount(provider: $provider, uid: $uid) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentRemoveLinkedAccountMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentRemoveLinkedAccountMutation, Types.UserCurrentRemoveLinkedAccountMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentRemoveLinkedAccountMutation, Types.UserCurrentRemoveLinkedAccountMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentRemoveLinkedAccountMutation, Types.UserCurrentRemoveLinkedAccountMutationVariables>(UserCurrentRemoveLinkedAccountDocument, options);\n}\nexport type UserCurrentRemoveLinkedAccountMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentRemoveLinkedAccountMutation, Types.UserCurrentRemoveLinkedAccountMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { storeToRefs } from 'pinia'\nimport { computed, ref } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useThirdPartyAuthentication } from '#shared/composables/authentication/useThirdPartyAuthentication.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport useFingerprint from '#shared/composables/useFingerprint.ts'\nimport {\n  type Authorization,\n  EnumAuthenticationProvider,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport { ErrorRouteType, redirectErrorRoute } from '#shared/router/error.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\nimport { ErrorStatusCodes } from '#shared/types/error.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonSimpleTable from '#desktop/components/CommonTable/CommonSimpleTable.vue'\nimport type {\n  TableSimpleHeader,\n  TableItem,\n} from '#desktop/components/CommonTable/types'\nimport CommonThirdPartyAuthenticationButton from '#desktop/components/CommonThirdPartyAuthenticationButton/CommonThirdPartyAuthenticationButton.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\nimport { useBreadcrumb } from '#desktop/pages/personal-setting/composables/useBreadcrumb.ts'\nimport { useUserCurrentRemoveLinkedAccountMutation } from '#desktop/pages/personal-setting/graphql/mutations/userCurrentLinkedAccount.api.ts'\nimport type { LinkedAccountTableItem } from '#desktop/pages/personal-setting/types/linked-accounts.ts'\n\ndefineOptions({\n  beforeRouteEnter() {\n    const { hasEnabledProviders } = useThirdPartyAuthentication()\n\n    if (!hasEnabledProviders.value)\n      return redirectErrorRoute({\n        type: ErrorRouteType.AuthenticatedError,\n        title: __('Forbidden'),\n        message: __(\n          'There are no enabled third-party authentication providers.',\n        ),\n        statusCode: ErrorStatusCodes.Forbidden,\n      })\n\n    return true\n  },\n})\n\nconst { notify } = useNotifications()\nconst { breadcrumbItems } = useBreadcrumb(__('Linked Accounts'))\n\nconst { user } = storeToRefs(useSessionStore())\n\nconst { enabledProviders } = useThirdPartyAuthentication()\nconst { fingerprint } = useFingerprint()\n\nconst providersLookup = computed(() => {\n  if (!user.value?.authorizations) return []\n\n  const { authorizations } = user.value\n\n  return enabledProviders.value.map((enabledProvider) => {\n    const configuredProvider = authorizations.find(\n      ({ provider }) => provider === enabledProvider.name,\n    )\n    return {\n      ...enabledProvider,\n      uid: configuredProvider?.uid,\n      username: configuredProvider?.username || configuredProvider?.uid,\n      authorizationId: configuredProvider?.id,\n    }\n  })\n})\n\nconst tableHeaders: TableSimpleHeader[] = [\n  {\n    key: 'application',\n    label: __('Application'),\n  },\n  {\n    key: 'username',\n    label: __('Username'),\n    truncate: true,\n  },\n]\n\nconst tableItems = computed<TableItem[]>(() =>\n  providersLookup.value.map((provider, index) => ({\n    id: `${index}-${provider.name}`,\n    application: provider.label,\n    ...provider,\n  })),\n)\n\nconst loading = ref(false)\n\nconst unlinkMutation = async (\n  authId: string,\n  authProvider: EnumAuthenticationProvider,\n  uid: string,\n) => {\n  return new MutationHandler(\n    useUserCurrentRemoveLinkedAccountMutation(() => ({\n      update(cache) {\n        if (user.value === null) return\n\n        // Evict authorization cache to align in-memory cache\n        const normalizedId = cache.identify({\n          authId,\n          __typename: 'Authorization',\n        })\n        cache.evict({ id: normalizedId })\n\n        // Identify current user cache and update authorizations field to align in-memory cache\n        cache.modify({\n          id: cache.identify(user.value),\n          fields: {\n            authorizations(existingAuthorizations, { readField }) {\n              return existingAuthorizations.filter(\n                (auth: Authorization) => readField('id', auth) !== authId,\n              )\n            },\n          },\n        })\n\n        cache.gc()\n      },\n    })),\n  ).send({\n    provider: authProvider,\n    uid,\n  })\n}\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst unlinkAccount = async (providerTableItem: LinkedAccountTableItem) => {\n  const confirmed = await waitForVariantConfirmation('delete')\n\n  if (!confirmed) return\n\n  try {\n    loading.value = true\n    const response = await unlinkMutation(\n      providerTableItem.authorizationId,\n      providerTableItem.name,\n      providerTableItem.uid,\n    )\n\n    if (!response?.userCurrentRemoveLinkedAccount) return\n\n    const { success } = response.userCurrentRemoveLinkedAccount\n\n    if (success)\n      notify({\n        id: 'linked-account-removed',\n        type: NotificationTypes.Success,\n        message: __('The account link was successfully removed!'),\n      })\n  } finally {\n    loading.value = false\n  }\n}\n\nconst tableActions = computed((): MenuItem[] => [\n  {\n    key: 'delete',\n    icon: 'trash3',\n    variant: 'danger',\n    ariaLabel: (provider) =>\n      i18n.t('Remove account link on %s', provider?.application),\n    show: (provider) => !!provider?.username,\n    onClick: (provider) => unlinkAccount(provider as LinkedAccountTableItem),\n  },\n  {\n    key: 'setup',\n    icon: 'plus-square-fill',\n    variant: 'secondary',\n    ariaLabel: (provider) =>\n      i18n.t('Link account on %s', provider?.application),\n    show: (provider) => !provider?.username,\n  },\n])\n</script>\n\n<template>\n  <LayoutContent :breadcrumb-items=\"breadcrumbItems\" width=\"narrow\">\n    <CommonSimpleTable\n      :caption=\"$t('Linked accounts')\"\n      :headers=\"tableHeaders\"\n      :items=\"tableItems\"\n      :actions=\"tableActions\"\n    >\n      <template #actions=\"{ actions, item }\">\n        <div class=\"flex items-center justify-center\">\n          <template v-for=\"action in actions\" :key=\"action.key\">\n            <CommonThirdPartyAuthenticationButton\n              v-if=\"action.key === 'setup' && action.show?.(item)\"\n              button-class=\"flex\"\n              :button-icon=\"action.icon\"\n              :disabled=\"loading\"\n              button-size=\"medium\"\n              :button-label=\"(action?.ariaLabel as Function)(item)\"\n              :url=\"`${item?.url}?fingerprint=${fingerprint}`\"\n            />\n            <CommonButton\n              v-else-if=\"action.onClick && action.show?.(item)\"\n              :icon=\"action.icon\"\n              :disabled=\"loading\"\n              :class=\"{ 'bg-transparent!': action.variant === 'danger' }\"\n              size=\"medium\"\n              :variant=\"action.variant\"\n              :aria-label=\"(action?.ariaLabel as Function)(item)\"\n              @click=\"action.onClick?.(item)\"\n            />\n          </template>\n        </div>\n      </template>\n    </CommonSimpleTable>\n  </LayoutContent>\n</template>\n"],"names":["UserCurrentRemoveLinkedAccountDocument","gql","ErrorsFragmentDoc","useUserCurrentRemoveLinkedAccountMutation","options","VueApolloComposable.useMutation","notify","useNotifications","breadcrumbItems","useBreadcrumb","user","storeToRefs","useSessionStore","enabledProviders","useThirdPartyAuthentication","fingerprint","useFingerprint","providersLookup","computed","_a","authorizations","enabledProvider","configuredProvider","provider","tableHeaders","tableItems","index","loading","ref","unlinkMutation","authId","authProvider","uid","MutationHandler","cache","normalizedId","existingAuthorizations","readField","auth","waitForVariantConfirmation","useConfirmation","unlinkAccount","providerTableItem","response","success","NotificationTypes","tableActions","i18n"],"mappings":"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"}