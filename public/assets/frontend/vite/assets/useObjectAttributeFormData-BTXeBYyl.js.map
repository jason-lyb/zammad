{"version":3,"file":"useObjectAttributeFormData-BTXeBYyl.js","sources":["../../../../../app/frontend/shared/entities/object-attributes/composables/useObjectAttributeFormData.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type {\n  FormFieldValue,\n  FormValues,\n} from '#shared/components/Form/types.ts'\nimport type { ObjectAttributeValueInput } from '#shared/graphql/types.ts'\nimport { convertToGraphQLId, isGraphQLId } from '#shared/graphql/utils.ts'\nimport { camelize, toClassName } from '#shared/utils/formatter.ts'\n\nimport type { ObjectAttribute } from '../types/store.ts'\nimport type { Primitive } from 'type-fest'\n\nexport const useObjectAttributeFormData = (\n  objectAttributes: Map<string, ObjectAttribute>,\n  values: FormValues,\n) => {\n  const internalObjectAttributeValues: Record<string, FormFieldValue> = {}\n  const additionalObjectAttributeValues: ObjectAttributeValueInput[] = []\n\n  const fullRelationId = (relation: string, value: number | string) => {\n    return convertToGraphQLId(toClassName(relation), value)\n  }\n\n  const ensureRelationId = (\n    attribute: ObjectAttribute,\n    value: FormFieldValue,\n  ) => {\n    const { relation } = attribute.dataOption || {}\n    const isInternalID =\n      typeof value === 'number' ||\n      (typeof value === 'string' && !isGraphQLId(value))\n\n    if (relation && isInternalID) {\n      return fullRelationId(relation, value)\n    }\n    return value\n  }\n\n  Object.keys(values).forEach((fieldName) => {\n    const objectAttribute = objectAttributes.get(fieldName)\n    const value = values[fieldName]\n\n    if (!objectAttribute || value === undefined) return\n\n    if (objectAttribute.isInternal) {\n      const name = camelize(fieldName)\n\n      let newValue: FormFieldValue\n      if (Array.isArray(value)) {\n        newValue = value.map((elem) => {\n          return ensureRelationId(objectAttribute, elem) as Primitive\n        })\n      }\n      // When the attribute has guess support and is a string count it as an guess (=unknown value).\n      else if (objectAttribute.dataOption?.guess && typeof value === 'string') {\n        newValue = value\n      } else {\n        newValue = ensureRelationId(objectAttribute, value)\n      }\n\n      internalObjectAttributeValues[name] = newValue\n    } else {\n      additionalObjectAttributeValues.push({\n        name: objectAttribute.name,\n        value,\n      })\n    }\n  })\n\n  return {\n    internalObjectAttributeValues,\n    additionalObjectAttributeValues,\n  }\n}\n"],"names":["useObjectAttributeFormData","objectAttributes","values","internalObjectAttributeValues","additionalObjectAttributeValues","fullRelationId","relation","value","convertToGraphQLId","toClassName","ensureRelationId","attribute","isInternalID","isGraphQLId","fieldName","objectAttribute","name","camelize","newValue","elem","_a"],"mappings":"iFAaa,MAAAA,EAA6B,CACxCC,EACAC,IACG,CACH,MAAMC,EAAgE,CAAA,EAChEC,EAA+D,CAAA,EAE/DC,EAAiB,CAACC,EAAkBC,IACjCC,EAAmBC,EAAYH,CAAQ,EAAGC,CAAK,EAGlDG,EAAmB,CACvBC,EACAJ,IACG,CACH,KAAM,CAAE,SAAAD,CAAa,EAAAK,EAAU,YAAc,CAAA,EACvCC,EACJ,OAAOL,GAAU,UAChB,OAAOA,GAAU,UAAY,CAACM,EAAYN,CAAK,EAElD,OAAID,GAAYM,EACPP,EAAeC,EAAUC,CAAK,EAEhCA,CAAA,EAGT,cAAO,KAAKL,CAAM,EAAE,QAASY,GAAc,OACnC,MAAAC,EAAkBd,EAAiB,IAAIa,CAAS,EAChDP,EAAQL,EAAOY,CAAS,EAE1B,GAAA,GAACC,GAAmBR,IAAU,QAElC,GAAIQ,EAAgB,WAAY,CACxB,MAAAC,EAAOC,EAASH,CAAS,EAE3B,IAAAI,EACA,MAAM,QAAQX,CAAK,EACVW,EAAAX,EAAM,IAAKY,GACbT,EAAiBK,EAAiBI,CAAI,CAC9C,GAGMC,EAAAL,EAAgB,aAAhB,MAAAK,EAA4B,OAAS,OAAOb,GAAU,SAClDW,EAAAX,EAEAW,EAAAR,EAAiBK,EAAiBR,CAAK,EAGpDJ,EAA8Ba,CAAI,EAAIE,CAAA,MAEtCd,EAAgC,KAAK,CACnC,KAAMW,EAAgB,KACtB,MAAAR,CAAA,CACD,CACH,CACD,EAEM,CACL,8BAAAJ,EACA,gCAAAC,CAAA,CAEJ"}