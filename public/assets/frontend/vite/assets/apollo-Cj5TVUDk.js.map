{"version":3,"file":"apollo-Cj5TVUDk.js","sources":["../../../../../app/frontend/shared/components/CommonNotifications/types.ts","../../../../../app/frontend/shared/utils/getUuid.ts","../../../../../app/frontend/shared/components/CommonNotifications/useNotifications.ts","../../../../../app/frontend/shared/composables/useApplicationLoaded.ts","../../../../../node_modules/.pnpm/@vue+apollo-composable@4.2.1_@apollo+client@3.12.11_graphql-ws@5.13.1_graphql@16.10.0___ed0c5e08cb665a73f7b630dc6948b6a3/node_modules/@vue/apollo-composable/dist/index.mjs","../../../../../app/frontend/shared/types/error.ts","../../../../../app/frontend/shared/server/apollo/handler/BaseHandler.ts","../../../../../app/frontend/shared/server/apollo/handler/QueryHandler.ts","../../../../../app/frontend/shared/errors/UserError.ts","../../../../../app/frontend/shared/server/apollo/handler/MutationHandler.ts","../../../../../app/frontend/shared/server/apollo/handler/SubscriptionHandler.ts","../../../../../app/frontend/shared/utils/log.ts","../../../../../app/frontend/shared/server/action_cable/consumer.ts","../../../../../app/frontend/shared/server/connection.ts","../../../../../app/frontend/shared/server/apollo/cache/utils/registerRelayStylePagination.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/articles.ts","../../../../../app/frontend/shared/server/apollo/cache/utils/registerIncomingMerge.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/checklistTemplates.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/mentions.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/onlineNotifications.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/publicLinks.ts","../../../../../app/frontend/shared/server/apollo/cache/utils/registerNotNormalizedObjectFieldsMerge.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/ticketChecklistItems.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/ticketOverviews.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/ticketOverviewsQuery.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/ticketsByOverviewQuery.ts","../../../../../app/frontend/shared/server/apollo/cache/initializer/userCurrentTicketOverviews.ts","../../../../../app/frontend/shared/server/apollo/cache.ts","../../../../../app/frontend/shared/server/apollo/link/connectedState.ts","../../../../../app/frontend/shared/server/apollo/utils/csrfToken.ts","../../../../../app/frontend/shared/server/apollo/link/csrf.ts","../../../../../app/frontend/shared/server/apollo/link/debug.ts","../../../../../app/frontend/shared/server/apollo/utils/getErrorContext.ts","../../../../../app/frontend/shared/utils/emitter.ts","../../../../../app/frontend/shared/server/apollo/link/error.ts","../../../../../app/frontend/shared/server/apollo/link/setAuthorization.ts","../../../../../app/frontend/shared/server/apollo/utils/getBatchContext.ts","../../../../../app/frontend/shared/server/apollo/utils/getWebsocketContext.ts","../../../../../app/frontend/shared/server/apollo/link.ts","../../../../../app/frontend/shared/server/apollo/client.ts","../../../../../app/frontend/shared/server/apollo/cache/utils/registerRedirect.ts","../../../../../app/frontend/shared/server/apollo/index.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { SetOptional } from 'type-fest'\n\nexport enum NotificationTypes {\n  Warn = 'warn',\n  Success = 'success',\n  Error = 'error',\n  Info = 'info',\n}\n\nexport type NotificationClass =\n  | NotificationTypes\n  | 'base'\n  | 'baseContainer'\n  | 'message'\nexport type NotificationClassMap = Record<NotificationClass, string>\n\nexport interface Notification {\n  id: string\n  message: string\n  /**\n   * Should notification be shown only once.\n   * Multiple invocations with same ID will remove the previous notification.\n   */\n  unique?: boolean\n  messagePlaceholder?: string[]\n  type: NotificationTypes\n  durationMS?: number\n  persistent?: boolean\n  callback?: () => void\n  /**\n   * @private\n   */\n  timeout: number\n}\n\nexport type NewNotification = SetOptional<Notification, 'id' | 'timeout'>\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { v4 as uuid } from 'uuid'\n\nconst getUuid = () => uuid()\n\nexport default getUuid\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ref } from 'vue'\n\nimport getUuid from '#shared/utils/getUuid.ts'\n\nimport { NotificationTypes } from './types.ts'\n\nimport type { NewNotification, Notification } from './types.ts'\n\nconst notifications = ref<Notification[]>([])\nconst defaultNotificationDurationMS = 3000\n\nconst removeNotification = (id: string) => {\n  notifications.value = notifications.value.filter(\n    (notification: Notification) => notification.id !== id,\n  )\n}\n\nconst clearAllNotifications = () => {\n  notifications.value = []\n}\n\nconst useNotifications = () => {\n  const notify = (notification: NewNotification): string => {\n    let { id } = notification\n    const { unique = true } = notification\n\n    if (!id) {\n      id = getUuid()\n    }\n\n    const newNotification: Notification = { id, timeout: 0, ...notification }\n\n    if (unique) {\n      notifications.value = notifications.value.filter(\n        (notification: Notification) => {\n          const isSame = notification.id === id\n          if (isSame) {\n            window.clearTimeout(notification.timeout)\n          }\n          return !isSame\n        },\n      )\n    }\n\n    notifications.value.push(newNotification)\n\n    if (!newNotification.persistent) {\n      newNotification.timeout = window.setTimeout(() => {\n        removeNotification(newNotification.id)\n      }, newNotification.durationMS || defaultNotificationDurationMS)\n    }\n\n    return newNotification.id\n  }\n\n  const hasErrors = () => {\n    return notifications.value.some((notification) => {\n      return notification.type === NotificationTypes.Error\n    })\n  }\n\n  return {\n    notify,\n    notifications,\n    removeNotification,\n    clearAllNotifications,\n    hasErrors,\n  }\n}\n\nexport { useNotifications }\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ref } from 'vue'\n\nconst loaded = ref(false)\n\nexport const useApplicationLoaded = () => {\n  return {\n    loaded,\n  }\n}\n","// src/useQuery.ts\nimport {\n  ref as ref3,\n  unref,\n  computed as computed3,\n  watch as watch2,\n  onServerPrefetch,\n  getCurrentScope as getCurrentScope2,\n  getCurrentInstance,\n  onScopeDispose as onScopeDispose2,\n  nextTick,\n  shallowRef\n} from \"vue-demi\";\nimport {throttle, debounce} from \"throttle-debounce\";\n\n// src/useApolloClient.ts\nimport {hasInjectionContext, inject} from \"vue-demi\";\nvar DefaultApolloClient = Symbol(\"default-apollo-client\");\nvar ApolloClients = Symbol(\"apollo-clients\");\nfunction resolveDefaultClient(providedApolloClients, providedApolloClient) {\n  const resolvedClient = providedApolloClients ? providedApolloClients.default : providedApolloClient != null ? providedApolloClient : void 0;\n  return resolvedClient;\n}\nfunction resolveClientWithId(providedApolloClients, clientId) {\n  return providedApolloClients == null ? void 0 : providedApolloClients[clientId];\n}\nfunction useApolloClient(clientId) {\n  let resolveImpl;\n  const savedCurrentClients = currentApolloClients;\n  if (!hasInjectionContext()) {\n    resolveImpl = (id) => {\n      if (id) {\n        return resolveClientWithId(savedCurrentClients, id);\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default);\n    };\n  } else {\n    const providedApolloClients = inject(ApolloClients, null);\n    const providedApolloClient = inject(DefaultApolloClient, null);\n    resolveImpl = (id) => {\n      if (id) {\n        const client2 = resolveClientWithId(providedApolloClients, id);\n        if (client2) {\n          return client2;\n        }\n        return resolveClientWithId(savedCurrentClients, id);\n      }\n      const client = resolveDefaultClient(providedApolloClients, providedApolloClient);\n      if (client) {\n        return client;\n      }\n      return resolveDefaultClient(savedCurrentClients, savedCurrentClients.default);\n    };\n  }\n  function resolveClient(id = clientId) {\n    const client = resolveImpl(id);\n    if (!client) {\n      throw new Error(`Apollo client with id ${id != null ? id : \"default\"} not found. Use an app.runWithContext() or provideApolloClient() if you are outside of a component setup.`);\n    }\n    return client;\n  }\n  return {\n    resolveClient,\n    get client() {\n      return resolveClient();\n    }\n  };\n}\nvar currentApolloClients = {};\nfunction provideApolloClient(client) {\n  currentApolloClients = {\n    default: client\n  };\n  return function(fn) {\n    const result = fn();\n    currentApolloClients = {};\n    return result;\n  };\n}\nfunction provideApolloClients(clients) {\n  currentApolloClients = clients;\n  return function(fn) {\n    const result = fn();\n    currentApolloClients = {};\n    return result;\n  };\n}\n\n// src/util/paramToRef.ts\nimport {isRef, computed, ref} from \"vue-demi\";\nfunction paramToRef(param) {\n  if (isRef(param)) {\n    return param;\n  } else if (typeof param === \"function\") {\n    return computed(param);\n  } else {\n    return ref(param);\n  }\n}\n\n// src/util/paramToReactive.ts\nimport {isRef as isRef2, reactive, computed as computed2} from \"vue-demi\";\nfunction paramToReactive(param) {\n  if (isRef2(param)) {\n    return param;\n  } else if (typeof param === \"function\") {\n    return computed2(param);\n  } else if (param) {\n    return reactive(param);\n  } else {\n    return param;\n  }\n}\n\n// src/util/useEventHook.ts\nfunction useEventHook() {\n  const fns = [];\n  function on(fn) {\n    fns.push(fn);\n    return {\n      off: () => off(fn)\n    };\n  }\n  function off(fn) {\n    const index = fns.indexOf(fn);\n    if (index !== -1) {\n      fns.splice(index, 1);\n    }\n  }\n  function trigger(...params) {\n    for (const fn of fns) {\n      fn(...params);\n    }\n  }\n  function getCount() {\n    return fns.length;\n  }\n  return {\n    on,\n    off,\n    trigger,\n    getCount\n  };\n}\n\n// src/util/loadingTracking.ts\nimport {watch, ref as ref2, getCurrentScope, onScopeDispose} from \"vue-demi\";\n\n// src/util/env.ts\nvar isServer = typeof window === \"undefined\";\n\n// src/util/loadingTracking.ts\nvar globalTracking = {\n  queries: ref2(0),\n  mutations: ref2(0),\n  subscriptions: ref2(0),\n  components: new Map()\n};\nfunction getCurrentTracking() {\n  const currentScope = getCurrentScope();\n  if (!currentScope) {\n    return {};\n  }\n  let tracking;\n  if (!globalTracking.components.has(currentScope)) {\n    globalTracking.components.set(currentScope, tracking = {\n      queries: ref2(0),\n      mutations: ref2(0),\n      subscriptions: ref2(0)\n    });\n    onScopeDispose(() => {\n      globalTracking.components.delete(currentScope);\n    });\n  } else {\n    tracking = globalTracking.components.get(currentScope);\n  }\n  return {\n    tracking\n  };\n}\nfunction track(loading, type) {\n  if (isServer)\n    return;\n  const {tracking} = getCurrentTracking();\n  watch(loading, (value, oldValue) => {\n    if (oldValue != null && value !== oldValue) {\n      const mod = value ? 1 : -1;\n      if (tracking)\n        tracking[type].value += mod;\n      globalTracking[type].value += mod;\n    }\n  }, {\n    immediate: true\n  });\n  onScopeDispose(() => {\n    if (loading.value) {\n      if (tracking)\n        tracking[type].value--;\n      globalTracking[type].value--;\n    }\n  });\n}\nfunction trackQuery(loading) {\n  track(loading, \"queries\");\n}\nfunction trackMutation(loading) {\n  track(loading, \"mutations\");\n}\nfunction trackSubscription(loading) {\n  track(loading, \"subscriptions\");\n}\n\n// src/util/toApolloError.ts\nimport {ApolloError, isApolloError} from \"@apollo/client/core/index.js\";\nfunction toApolloError(error) {\n  if (!(error instanceof Error)) {\n    return new ApolloError({\n      networkError: Object.assign(new Error(), {originalError: error}),\n      errorMessage: String(error)\n    });\n  }\n  if (isApolloError(error)) {\n    return error;\n  }\n  return new ApolloError({networkError: error, errorMessage: error.message});\n}\nfunction resultErrorsToApolloError(errors) {\n  return new ApolloError({\n    graphQLErrors: errors,\n    errorMessage: `GraphQL response contains errors: ${errors.map((e) => e.message).join(\" | \")}`\n  });\n}\n\n// src/useQuery.ts\nfunction useQuery(document, variables, options) {\n  return useQueryImpl(document, variables, options);\n}\nfunction useQueryImpl(document, variables, options = {}, lazy = false) {\n  var _a;\n  const currentScope = getCurrentScope2();\n  const currentInstance = getCurrentInstance();\n  const currentOptions = ref3();\n  const documentRef = paramToRef(document);\n  const variablesRef = paramToRef(variables);\n  const optionsRef = paramToReactive(options);\n  const result = shallowRef();\n  const resultEvent = useEventHook();\n  const error = shallowRef(null);\n  const errorEvent = useEventHook();\n  const loading = ref3(false);\n  currentScope && trackQuery(loading);\n  const networkStatus = ref3();\n  let firstResolve;\n  let firstResolveTriggered = false;\n  let firstReject;\n  let firstRejectError;\n  const tryFirstResolve = () => {\n    firstResolveTriggered = true;\n    if (firstResolve)\n      firstResolve();\n  };\n  const tryFirstReject = (apolloError) => {\n    firstRejectError = apolloError;\n    if (firstReject)\n      firstReject(apolloError);\n  };\n  const resetFirstResolveReject = () => {\n    firstResolve = void 0;\n    firstReject = void 0;\n    firstResolveTriggered = false;\n    firstRejectError = void 0;\n  };\n  currentInstance && ((_a = onServerPrefetch) == null ? void 0 : _a(() => {\n    var _a2;\n    if (!isEnabled.value || isServer && ((_a2 = currentOptions.value) == null ? void 0 : _a2.prefetch) === false)\n      return;\n    return new Promise((resolve, reject) => {\n      firstResolve = () => {\n        resetFirstResolveReject();\n        resolve();\n      };\n      firstReject = (apolloError) => {\n        resetFirstResolveReject();\n        reject(apolloError);\n      };\n      if (firstResolveTriggered) {\n        firstResolve();\n      } else if (firstRejectError) {\n        firstReject(firstRejectError);\n      }\n    }).finally(stop);\n  }));\n  const {resolveClient} = useApolloClient();\n  function getClient() {\n    var _a2;\n    return resolveClient((_a2 = currentOptions.value) == null ? void 0 : _a2.clientId);\n  }\n  const query = shallowRef();\n  let observer;\n  let started = false;\n  let ignoreNextResult = false;\n  let firstStart = true;\n  function start() {\n    var _a2, _b, _c, _d, _e;\n    if (started || !isEnabled.value || isServer && ((_a2 = currentOptions.value) == null ? void 0 : _a2.prefetch) === false || !currentDocument) {\n      tryFirstResolve();\n      return;\n    }\n    if (isServer) {\n      applyDocument(documentRef.value);\n      applyVariables(variablesRef.value);\n      applyOptions(unref(optionsRef));\n    }\n    started = true;\n    error.value = null;\n    loading.value = true;\n    const client = getClient();\n    query.value = client.watchQuery({\n      query: currentDocument,\n      variables: currentVariables != null ? currentVariables : {},\n      ...currentOptions.value,\n      ...isServer && ((_b = currentOptions.value) == null ? void 0 : _b.fetchPolicy) !== \"no-cache\" ? {\n        fetchPolicy: \"network-only\"\n      } : {}\n    });\n    startQuerySubscription();\n    if (!isServer && (firstStart || !((_c = currentOptions.value) == null ? void 0 : _c.keepPreviousResult)) && (((_d = currentOptions.value) == null ? void 0 : _d.fetchPolicy) !== \"no-cache\" || currentOptions.value.notifyOnNetworkStatusChange)) {\n      const currentResult = query.value.getCurrentResult(false);\n      if (!currentResult.loading || currentResult.partial || ((_e = currentOptions.value) == null ? void 0 : _e.notifyOnNetworkStatusChange)) {\n        onNextResult(currentResult);\n        ignoreNextResult = !currentResult.loading;\n      } else if (currentResult.error) {\n        onError(currentResult.error);\n        ignoreNextResult = true;\n      }\n    }\n    if (!isServer) {\n      for (const item of subscribeToMoreItems) {\n        addSubscribeToMore(item);\n      }\n    }\n    firstStart = false;\n  }\n  function startQuerySubscription() {\n    if (observer && !observer.closed)\n      return;\n    if (!query.value)\n      return;\n    ignoreNextResult = false;\n    observer = query.value.subscribe({\n      next: onNextResult,\n      error: onError\n    });\n  }\n  function getErrorPolicy() {\n    var _a2, _b, _c, _d;\n    const client = resolveClient((_a2 = currentOptions.value) == null ? void 0 : _a2.clientId);\n    return ((_b = currentOptions.value) == null ? void 0 : _b.errorPolicy) || ((_d = (_c = client.defaultOptions) == null ? void 0 : _c.watchQuery) == null ? void 0 : _d.errorPolicy);\n  }\n  function onNextResult(queryResult) {\n    var _a2;\n    if (ignoreNextResult) {\n      ignoreNextResult = false;\n      return;\n    }\n    error.value = null;\n    processNextResult(queryResult);\n    const errorPolicy = getErrorPolicy();\n    if (errorPolicy && errorPolicy === \"all\" && !queryResult.error && ((_a2 = queryResult.errors) == null ? void 0 : _a2.length)) {\n      processError(resultErrorsToApolloError(queryResult.errors));\n    }\n    tryFirstResolve();\n  }\n  function processNextResult(queryResult) {\n    var _a2, _b;\n    result.value = queryResult.data && Object.keys(queryResult.data).length === 0 ? queryResult.error && !((_a2 = currentOptions.value) == null ? void 0 : _a2.returnPartialData) && ((_b = currentOptions.value) == null ? void 0 : _b.errorPolicy) === \"none\" ? void 0 : result.value : queryResult.data;\n    loading.value = queryResult.loading;\n    networkStatus.value = queryResult.networkStatus;\n    nextTick(() => {\n      resultEvent.trigger(queryResult, {\n        client: getClient()\n      });\n    });\n  }\n  function onError(queryError) {\n    if (ignoreNextResult) {\n      ignoreNextResult = false;\n      return;\n    }\n    const apolloError = toApolloError(queryError);\n    const errorPolicy = getErrorPolicy();\n    if (errorPolicy && errorPolicy !== \"none\") {\n      processNextResult(query.value.getCurrentResult());\n    }\n    processError(apolloError);\n    tryFirstReject(apolloError);\n    resubscribeToQuery();\n  }\n  function processError(apolloError) {\n    error.value = apolloError;\n    loading.value = false;\n    networkStatus.value = 8;\n    nextTick(() => {\n      errorEvent.trigger(apolloError, {\n        client: getClient()\n      });\n    });\n  }\n  function resubscribeToQuery() {\n    if (!query.value)\n      return;\n    const lastError = query.value.getLastError();\n    const lastResult = query.value.getLastResult();\n    query.value.resetLastResults();\n    startQuerySubscription();\n    Object.assign(query.value, {lastError, lastResult});\n  }\n  let onStopHandlers = [];\n  function stop() {\n    tryFirstResolve();\n    if (!started)\n      return;\n    started = false;\n    loading.value = false;\n    onStopHandlers.forEach((handler) => handler());\n    onStopHandlers = [];\n    if (query.value) {\n      query.value.stopPolling();\n      query.value = null;\n    }\n    if (observer) {\n      observer.unsubscribe();\n      observer = void 0;\n    }\n  }\n  let restarting = false;\n  function baseRestart() {\n    if (!started || restarting)\n      return;\n    restarting = true;\n    nextTick(() => {\n      if (started) {\n        stop();\n        start();\n      }\n      restarting = false;\n    });\n  }\n  let debouncedRestart;\n  let isRestartDebounceSetup = false;\n  function updateRestartFn() {\n    var _a2, _b;\n    if (!currentOptions.value) {\n      debouncedRestart = baseRestart;\n    } else {\n      if ((_a2 = currentOptions.value) == null ? void 0 : _a2.throttle) {\n        debouncedRestart = throttle(currentOptions.value.throttle, baseRestart);\n      } else if ((_b = currentOptions.value) == null ? void 0 : _b.debounce) {\n        debouncedRestart = debounce(currentOptions.value.debounce, baseRestart);\n      } else {\n        debouncedRestart = baseRestart;\n      }\n      isRestartDebounceSetup = true;\n    }\n  }\n  function restart() {\n    if (!started || restarting)\n      return;\n    if (!isRestartDebounceSetup)\n      updateRestartFn();\n    debouncedRestart();\n  }\n  let currentDocument = documentRef.value;\n  const forceDisabled = ref3(lazy);\n  const enabledOption = computed3(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled);\n  const isEnabled = computed3(() => enabledOption.value && !forceDisabled.value && !!documentRef.value);\n  watch2(() => unref(optionsRef), applyOptions, {\n    deep: true,\n    immediate: true\n  });\n  function applyOptions(value) {\n    if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) {\n      updateRestartFn();\n    }\n    currentOptions.value = value;\n    restart();\n  }\n  watch2(documentRef, applyDocument);\n  function applyDocument(value) {\n    currentDocument = value;\n    restart();\n  }\n  let currentVariables;\n  let currentVariablesSerialized;\n  watch2(() => {\n    if (isEnabled.value) {\n      return variablesRef.value;\n    } else {\n      return void 0;\n    }\n  }, applyVariables, {\n    deep: true,\n    immediate: true\n  });\n  function applyVariables(value) {\n    const serialized = JSON.stringify([value, isEnabled.value]);\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value;\n      restart();\n    }\n    currentVariablesSerialized = serialized;\n  }\n  function refetch(variables2 = void 0) {\n    if (query.value) {\n      if (variables2) {\n        currentVariables = variables2;\n      }\n      error.value = null;\n      loading.value = true;\n      return query.value.refetch(variables2).then((refetchResult) => {\n        var _a2;\n        const currentResult = (_a2 = query.value) == null ? void 0 : _a2.getCurrentResult();\n        currentResult && processNextResult(currentResult);\n        return refetchResult;\n      });\n    }\n  }\n  function updateQuery(mapFn) {\n    if (query.value) {\n      query.value.updateQuery(mapFn);\n    }\n  }\n  function fetchMore(options2) {\n    if (query.value) {\n      error.value = null;\n      loading.value = true;\n      return query.value.fetchMore(options2).then((fetchMoreResult) => {\n        var _a2;\n        const currentResult = (_a2 = query.value) == null ? void 0 : _a2.getCurrentResult();\n        currentResult && processNextResult(currentResult);\n        return fetchMoreResult;\n      });\n    }\n  }\n  const subscribeToMoreItems = [];\n  function subscribeToMore(options2) {\n    if (isServer)\n      return;\n    const optionsRef2 = paramToRef(options2);\n    watch2(optionsRef2, (value, oldValue, onCleanup) => {\n      const index = subscribeToMoreItems.findIndex((item2) => item2.options === oldValue);\n      if (index !== -1) {\n        subscribeToMoreItems.splice(index, 1);\n      }\n      const item = {\n        options: value,\n        unsubscribeFns: []\n      };\n      subscribeToMoreItems.push(item);\n      addSubscribeToMore(item);\n      onCleanup(() => {\n        item.unsubscribeFns.forEach((fn) => fn());\n        item.unsubscribeFns = [];\n      });\n    }, {\n      immediate: true\n    });\n  }\n  function addSubscribeToMore(item) {\n    if (!started)\n      return;\n    if (!query.value) {\n      throw new Error(\"Query is not defined\");\n    }\n    const unsubscribe = query.value.subscribeToMore(item.options);\n    onStopHandlers.push(unsubscribe);\n    item.unsubscribeFns.push(unsubscribe);\n  }\n  watch2(isEnabled, (value) => {\n    if (value) {\n      nextTick(() => {\n        start();\n      });\n    } else {\n      stop();\n    }\n  });\n  if (isEnabled.value) {\n    start();\n  }\n  if (currentScope) {\n    onScopeDispose2(() => {\n      stop();\n      subscribeToMoreItems.length = 0;\n    });\n  } else {\n    console.warn(\"[Vue apollo] useQuery() is called outside of an active effect scope and the query will not be automatically stopped.\");\n  }\n  return {\n    result,\n    loading,\n    networkStatus,\n    error,\n    start,\n    stop,\n    restart,\n    forceDisabled,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    query,\n    refetch,\n    fetchMore,\n    subscribeToMore,\n    updateQuery,\n    onResult: resultEvent.on,\n    onError: errorEvent.on\n  };\n}\n\n// src/useLazyQuery.ts\nimport {isRef as isRef3} from \"vue-demi\";\nfunction useLazyQuery(document, variables, options) {\n  const query = useQueryImpl(document, variables, options, true);\n  function load(document2, variables2, options2) {\n    if (document2) {\n      query.document.value = document2;\n    }\n    if (variables2) {\n      query.variables.value = variables2;\n    }\n    if (options2) {\n      Object.assign(isRef3(query.options) ? query.options.value : query.options, options2);\n    }\n    const isFirstRun = query.forceDisabled.value;\n    if (isFirstRun) {\n      query.forceDisabled.value = false;\n      if (isServer) {\n        query.start();\n      }\n      return new Promise((resolve, reject) => {\n        const {off: offResult} = query.onResult((result) => {\n          if (!result.loading) {\n            resolve(result.data);\n            offResult();\n            offError();\n          }\n        });\n        const {off: offError} = query.onError((error) => {\n          reject(error);\n          offResult();\n          offError();\n        });\n      });\n    } else {\n      return false;\n    }\n  }\n  return {\n    ...query,\n    load\n  };\n}\n\n// src/useMutation.ts\nimport {ref as ref4, onScopeDispose as onScopeDispose3, isRef as isRef4, getCurrentScope as getCurrentScope3, shallowRef as shallowRef2, nextTick as nextTick2} from \"vue-demi\";\nfunction useMutation(document, options = {}) {\n  const currentScope = getCurrentScope3();\n  const loading = ref4(false);\n  currentScope && trackMutation(loading);\n  const error = shallowRef2(null);\n  const called = ref4(false);\n  const doneEvent = useEventHook();\n  const errorEvent = useEventHook();\n  const {resolveClient} = useApolloClient();\n  async function mutate(variables, overrideOptions = {}) {\n    let currentDocument;\n    if (typeof document === \"function\") {\n      currentDocument = document();\n    } else if (isRef4(document)) {\n      currentDocument = document.value;\n    } else {\n      currentDocument = document;\n    }\n    let currentOptions;\n    if (typeof options === \"function\") {\n      currentOptions = options();\n    } else if (isRef4(options)) {\n      currentOptions = options.value;\n    } else {\n      currentOptions = options;\n    }\n    const client = resolveClient(currentOptions.clientId);\n    error.value = null;\n    loading.value = true;\n    called.value = true;\n    try {\n      const result = await client.mutate({\n        mutation: currentDocument,\n        ...currentOptions,\n        ...overrideOptions,\n        variables: (variables != null ? variables : currentOptions.variables) ? {\n          ...currentOptions.variables,\n          ...variables\n        } : void 0\n      });\n      loading.value = false;\n      await nextTick2();\n      doneEvent.trigger(result, {\n        client\n      });\n      return result;\n    } catch (e) {\n      const apolloError = toApolloError(e);\n      error.value = apolloError;\n      loading.value = false;\n      errorEvent.trigger(apolloError, {\n        client\n      });\n      if (currentOptions.throws === \"always\" || currentOptions.throws !== \"never\" && !errorEvent.getCount()) {\n        throw apolloError;\n      }\n    }\n    return null;\n  }\n  currentScope && onScopeDispose3(() => {\n    loading.value = false;\n  });\n  return {\n    mutate,\n    loading,\n    error,\n    called,\n    onDone: doneEvent.on,\n    onError: errorEvent.on\n  };\n}\n\n// src/useSubscription.ts\nimport {\n  ref as ref5,\n  watch as watch3,\n  isRef as isRef5,\n  computed as computed4,\n  getCurrentScope as getCurrentScope4,\n  onScopeDispose as onScopeDispose4,\n  nextTick as nextTick3,\n  shallowRef as shallowRef3\n} from \"vue-demi\";\nimport {throttle as throttle2, debounce as debounce2} from \"throttle-debounce\";\nfunction useSubscription(document, variables = void 0, options = {}) {\n  const currentScope = getCurrentScope4();\n  const documentRef = paramToRef(document);\n  const variablesRef = paramToRef(variables);\n  const optionsRef = paramToReactive(options);\n  const result = shallowRef3();\n  const resultEvent = useEventHook();\n  const error = shallowRef3(null);\n  const errorEvent = useEventHook();\n  const loading = ref5(false);\n  currentScope && trackSubscription(loading);\n  const {resolveClient} = useApolloClient();\n  const subscription = ref5(null);\n  let observer = null;\n  let started = false;\n  function getClient() {\n    var _a;\n    return resolveClient((_a = currentOptions.value) == null ? void 0 : _a.clientId);\n  }\n  function start() {\n    if (started || !isEnabled.value || isServer)\n      return;\n    started = true;\n    loading.value = true;\n    const client = getClient();\n    subscription.value = client.subscribe({\n      query: currentDocument,\n      variables: currentVariables,\n      ...currentOptions.value\n    });\n    observer = subscription.value.subscribe({\n      next: onNextResult,\n      error: onError\n    });\n  }\n  function onNextResult(fetchResult) {\n    result.value = fetchResult.data;\n    loading.value = false;\n    resultEvent.trigger(fetchResult, {\n      client: getClient()\n    });\n  }\n  function onError(fetchError) {\n    const apolloError = toApolloError(fetchError);\n    error.value = apolloError;\n    loading.value = false;\n    errorEvent.trigger(apolloError, {\n      client: getClient()\n    });\n  }\n  function stop() {\n    if (!started)\n      return;\n    started = false;\n    loading.value = false;\n    if (subscription.value) {\n      subscription.value = null;\n    }\n    if (observer) {\n      observer.unsubscribe();\n      observer = null;\n    }\n  }\n  let restarting = false;\n  function baseRestart() {\n    if (!started || restarting)\n      return;\n    restarting = true;\n    nextTick3(() => {\n      if (started) {\n        stop();\n        start();\n      }\n      restarting = false;\n    });\n  }\n  let debouncedRestart;\n  function updateRestartFn() {\n    var _a, _b;\n    if ((_a = currentOptions.value) == null ? void 0 : _a.throttle) {\n      debouncedRestart = throttle2(currentOptions.value.throttle, baseRestart);\n    } else if ((_b = currentOptions.value) == null ? void 0 : _b.debounce) {\n      debouncedRestart = debounce2(currentOptions.value.debounce, baseRestart);\n    } else {\n      debouncedRestart = baseRestart;\n    }\n  }\n  function restart() {\n    if (!debouncedRestart)\n      updateRestartFn();\n    debouncedRestart();\n  }\n  const currentOptions = ref5();\n  watch3(() => isRef5(optionsRef) ? optionsRef.value : optionsRef, (value) => {\n    if (currentOptions.value && (currentOptions.value.throttle !== value.throttle || currentOptions.value.debounce !== value.debounce)) {\n      updateRestartFn();\n    }\n    currentOptions.value = value;\n    restart();\n  }, {\n    deep: true,\n    immediate: true\n  });\n  let currentDocument;\n  watch3(documentRef, (value) => {\n    currentDocument = value;\n    restart();\n  }, {\n    immediate: true\n  });\n  let currentVariables;\n  let currentVariablesSerialized;\n  watch3(variablesRef, (value, oldValue) => {\n    const serialized = JSON.stringify(value);\n    if (serialized !== currentVariablesSerialized) {\n      currentVariables = value;\n      restart();\n    }\n    currentVariablesSerialized = serialized;\n  }, {\n    deep: true,\n    immediate: true\n  });\n  const enabledOption = computed4(() => !currentOptions.value || currentOptions.value.enabled == null || currentOptions.value.enabled);\n  const isEnabled = enabledOption;\n  watch3(isEnabled, (value) => {\n    if (value) {\n      start();\n    } else {\n      stop();\n    }\n  }, {\n    immediate: true\n  });\n  if (currentScope) {\n    onScopeDispose4(stop);\n  } else {\n    console.warn(\"[Vue apollo] useSubscription() is called outside of an active effect scope and the subscription will not be automatically stopped.\");\n  }\n  return {\n    result,\n    loading,\n    error,\n    start,\n    stop,\n    restart,\n    document: documentRef,\n    variables: variablesRef,\n    options: optionsRef,\n    subscription,\n    onResult: resultEvent.on,\n    onError: errorEvent.on\n  };\n}\n\n// src/useResult.ts\nimport {computed as computed5} from \"vue-demi\";\nfunction useResult(result, defaultValue, pick) {\n  console.warn(`'useResult' is deprecated and will be removed soon. Please use 'computed' instead.\nBefore:\nconst items = useResult(result, [], data => data.someField.myItems)\nAfter:\nconst items = computed(() => result.value?.someField.myItems ?? [])`);\n  return computed5(() => {\n    const value = result.value;\n    if (value) {\n      if (pick) {\n        try {\n          return pick(value);\n        } catch (e) {\n        }\n      } else {\n        const keys = Object.keys(value);\n        if (keys.length === 1) {\n          return value[keys[0]];\n        } else {\n          return value;\n        }\n      }\n    }\n    return defaultValue;\n  });\n}\n\n// src/useLoading.ts\nimport {computed as computed6} from \"vue-demi\";\nfunction useQueryLoading() {\n  const {tracking} = getCurrentTracking();\n  if (!tracking)\n    throw new Error(\"useQueryLoading must be called inside a setup function.\");\n  return computed6(() => tracking.queries.value > 0);\n}\nfunction useMutationLoading() {\n  const {tracking} = getCurrentTracking();\n  if (!tracking)\n    throw new Error(\"useMutationLoading must be called inside a setup function.\");\n  return computed6(() => tracking.mutations.value > 0);\n}\nfunction useSubscriptionLoading() {\n  const {tracking} = getCurrentTracking();\n  if (!tracking)\n    throw new Error(\"useSubscriptionLoading must be called inside a setup function.\");\n  return computed6(() => tracking.subscriptions.value > 0);\n}\nfunction useGlobalQueryLoading() {\n  return computed6(() => globalTracking.queries.value > 0);\n}\nfunction useGlobalMutationLoading() {\n  return computed6(() => globalTracking.mutations.value > 0);\n}\nfunction useGlobalSubscriptionLoading() {\n  return computed6(() => globalTracking.subscriptions.value > 0);\n}\nexport {\n  ApolloClients,\n  DefaultApolloClient,\n  provideApolloClient,\n  provideApolloClients,\n  useApolloClient,\n  useGlobalMutationLoading,\n  useGlobalQueryLoading,\n  useGlobalSubscriptionLoading,\n  useLazyQuery,\n  useMutation,\n  useMutationLoading,\n  useQuery,\n  useQueryLoading,\n  useResult,\n  useSubscription,\n  useSubscriptionLoading\n};\n//# sourceMappingURL=index.mjs.map\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { UserError } from '#shared/graphql/types.ts'\n\nimport type { ApolloError } from '@apollo/client/core'\nimport type { Except } from 'type-fest'\n\nexport enum GraphQLErrorTypes {\n  UnknownError = 'Exceptions::UnknownError',\n  NetworkError = 'Exceptions::NetworkError',\n  Forbidden = 'Exceptions::Forbidden',\n  RecordNotFound = 'ActiveRecord::RecordNotFound',\n\n  // This exception actually means 'NotAuthenticated'\n  NotAuthorized = 'Exceptions::NotAuthorized',\n}\n\nexport type GraphQLErrorTypeKeys = keyof GraphQLErrorTypes\n\nexport interface GraphQLErrorExtensionsHandler {\n  type: GraphQLErrorTypes\n  backtrace: string\n}\n\nexport interface GraphQLHandlerError {\n  type: GraphQLErrorTypes\n  message?: string\n}\n\nexport type MutationSendError = ApolloError | UserError\n\nexport enum ErrorStatusCodes {\n  'Forbidden' = 403,\n  'NotFound' = 404,\n  'InternalError' = 500,\n}\n\nexport type UserErrors = Except<UserError, '__typename'>[]\nexport interface UserFieldError {\n  field: string\n  message: string\n}\nexport type UserFieldErrors = UserFieldError[]\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  useNotifications,\n  NotificationTypes,\n} from '#shared/components/CommonNotifications/index.ts'\nimport type { GraphQLHandlerError } from '#shared/types/error.ts'\nimport { GraphQLErrorTypes } from '#shared/types/error.ts'\nimport type {\n  BaseHandlerOptions,\n  CommonHandlerOptions,\n  CommonHandlerOptionsParameter,\n  OperationResult,\n  OperationReturn,\n} from '#shared/types/server/apollo/handler.ts'\nimport getUuid from '#shared/utils/getUuid.ts'\n\nimport type { ApolloError, OperationVariables } from '@apollo/client/core'\nimport type { GraphQLFormattedError } from 'graphql'\nimport type { Ref } from 'vue'\n\nexport default abstract class BaseHandler<\n  TResult = OperationResult,\n  TVariables extends OperationVariables = OperationVariables,\n  TOperationReturn extends OperationReturn<\n    TResult,\n    TVariables\n  > = OperationReturn<TResult, TVariables>,\n  THandlerOptions = BaseHandlerOptions,\n> {\n  public operationResult!: TOperationReturn\n\n  protected baseHandlerOptions: BaseHandlerOptions = {\n    errorShowNotification: true,\n    errorNotificationMessage: '',\n    errorNotificationType: NotificationTypes.Error,\n  }\n\n  public handlerOptions!: CommonHandlerOptions<THandlerOptions>\n\n  protected handlerId: string\n\n  constructor(\n    operationResult: TOperationReturn,\n    handlerOptions?: CommonHandlerOptionsParameter<THandlerOptions>,\n  ) {\n    this.operationResult = operationResult\n\n    this.handlerOptions = this.mergedHandlerOptions(handlerOptions)\n\n    this.handlerId = getUuid()\n\n    this.initialize()\n  }\n\n  protected initialize(): void {\n    this.operationResult.onError((error) => {\n      this.handleError(error)\n    })\n  }\n\n  public loading(): Ref<boolean> {\n    return this.operationResult.loading\n  }\n\n  public operationError(): Ref<Maybe<ApolloError>> {\n    return this.operationResult.error\n  }\n\n  public onError(callback: (error: ApolloError) => void): void {\n    this.operationResult.onError(callback)\n  }\n\n  protected handleError(error: ApolloError): void {\n    const options = this.handlerOptions\n\n    let triggerNotification = options.errorShowNotification\n\n    const { graphQLErrors, networkError } = error\n    let errorHandler: GraphQLHandlerError\n\n    if (graphQLErrors.length > 0) {\n      const { message, extensions }: GraphQLFormattedError = graphQLErrors[0]\n      let type =\n        (extensions?.type as GraphQLErrorTypes) ||\n        GraphQLErrorTypes.UnknownError\n\n      // When it's not a known type, use the unknown error type.\n      if (!Object.values(GraphQLErrorTypes).includes(type)) {\n        type = GraphQLErrorTypes.UnknownError\n      }\n\n      errorHandler = {\n        type,\n        message,\n      }\n    } else if (networkError) {\n      errorHandler = {\n        type: GraphQLErrorTypes.NetworkError,\n      }\n    } else {\n      errorHandler = {\n        type: GraphQLErrorTypes.UnknownError,\n      }\n    }\n\n    if (errorHandler.type === GraphQLErrorTypes.NotAuthorized) {\n      triggerNotification = false\n    }\n\n    if (options.errorCallback) {\n      const trigger = options.errorCallback(errorHandler)\n\n      if (typeof trigger === 'boolean') {\n        triggerNotification = trigger\n      }\n    }\n\n    if (triggerNotification) {\n      // TODO enable and fix all tests\n      // if (import.meta.env.DEV) {\n      //   console.error(error)\n      // }\n      useNotifications().notify({\n        id: this.handlerId,\n        message: this.errorNotificationMessage(\n          errorHandler.type,\n          errorHandler.message,\n        ),\n        type: options.errorNotificationType,\n      })\n    }\n  }\n\n  protected mergedHandlerOptions(\n    handlerOptions?: CommonHandlerOptionsParameter<THandlerOptions>,\n  ): CommonHandlerOptions<THandlerOptions> {\n    // The merged type is always safe as a 'CommonHandlerOptions<THandlerOptions>' type.\n    return Object.assign(\n      this.baseHandlerOptions,\n      handlerOptions,\n    ) as CommonHandlerOptions<THandlerOptions>\n  }\n\n  private errorNotificationMessage(\n    errorType: GraphQLErrorTypes,\n    errorMessage?: string,\n  ): string {\n    const defaultErrorNotificationMessage = __(\n      'An error occured during the operation.',\n    )\n\n    const fallbackErrorMessage =\n      errorType === GraphQLErrorTypes.UnknownError || !errorMessage\n        ? defaultErrorNotificationMessage\n        : errorMessage\n\n    return this.handlerOptions.errorNotificationMessage || fallbackErrorMessage\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n/* eslint-disable no-use-before-define */\n\nimport { getOperationName } from '@apollo/client/utilities'\nimport { useApolloClient } from '@vue/apollo-composable'\nimport { watch, nextTick } from 'vue'\n\nimport type {\n  OperationQueryOptionsReturn,\n  OperationQueryResult,\n  WatchResultCallback,\n} from '#shared/types/server/apollo/handler.ts'\nimport type { ReactiveFunction } from '#shared/types/utils.ts'\n\nimport BaseHandler from './BaseHandler.ts'\n\nimport type {\n  ApolloError,\n  ApolloQueryResult,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  ObservableQuery,\n  OperationVariables,\n  QueryOptions,\n  SubscribeToMoreOptions,\n} from '@apollo/client/core'\nimport type { UseQueryOptions, UseQueryReturn } from '@vue/apollo-composable'\nimport type { Ref, WatchStopHandle } from 'vue'\n\nexport default class QueryHandler<\n  TResult = OperationQueryResult,\n  TVariables extends OperationVariables = OperationVariables,\n> extends BaseHandler<\n  TResult,\n  TVariables,\n  UseQueryReturn<TResult, TVariables>\n> {\n  private lastCancel: (() => void) | null = null\n\n  public cancel() {\n    this.lastCancel?.()\n  }\n\n  /**\n   * Calls the query immidiately and returns the result in `data` property.\n   *\n   * Will throw an error, if used with \"useQuery\" instead of \"useLazyQuery\".\n   *\n   * Returns cached result, if there is one. Otherwise, will\n   * `fetch` the result from the server.\n   *\n   * If called multiple times, cancels the previous query.\n   *\n   * Respects options that were defined in `useLazyQuery`, but can be overriden.\n   *\n   * If an error was throws, `data` is `null`, and `error` is the thrown error.\n   */\n  public async query(\n    options: Omit<QueryOptions<TVariables, TResult>, 'query'> = {},\n  ) {\n    const {\n      options: defaultOptions,\n      document: { value: node },\n    } = this.operationResult\n    if (import.meta.env.DEV && !node) {\n      throw new Error(`No query document available.`)\n    }\n    if (import.meta.env.DEV && !('load' in this.operationResult)) {\n      let error = `${getOperationName(\n        node!,\n      )} is initialized with \"useQuery\" instead of \"useLazyQuery\". `\n      error += `If you need to get the value immediately with \".query()\", use \"useLazyQuery\" instead to not start extra network requests. `\n      error += `\"useQuery\" should be used inside components to dynamically react to changed data.`\n      throw new Error(error)\n    }\n    this.cancel()\n    const { client } = useApolloClient()\n    const aborter =\n      typeof AbortController !== 'undefined' ? new AbortController() : null\n    this.lastCancel = () => aborter?.abort()\n    const { fetchPolicy: defaultFetchPolicy, ...defaultOptionsValue } =\n      'value' in defaultOptions ? defaultOptions.value : defaultOptions\n    const fetchPolicy =\n      options.fetchPolicy ||\n      (defaultFetchPolicy !== 'cache-and-network'\n        ? defaultFetchPolicy\n        : undefined)\n    try {\n      return await client.query<TResult, TVariables>({\n        ...defaultOptionsValue,\n        ...options,\n        fetchPolicy,\n        query: node!,\n        context: {\n          ...defaultOptionsValue.context,\n          ...options.context,\n          fetchOptions: {\n            signal: aborter?.signal,\n          },\n        },\n      })\n    } catch (error) {\n      // TODO: do we need to handleError here also in a genric way?\n\n      return {\n        data: null,\n        error: error as ApolloError,\n      }\n    } finally {\n      this.lastCancel = null\n    }\n  }\n\n  public options(): OperationQueryOptionsReturn<TResult, TVariables> {\n    return this.operationResult.options\n  }\n\n  public result(): Ref<TResult | undefined> {\n    return this.operationResult.result\n  }\n\n  public watchQuery(): Ref<\n    ObservableQuery<TResult, TVariables> | null | undefined\n  > {\n    return this.operationResult.query\n  }\n\n  public subscribeToMore<\n    TSubscriptionVariables = TVariables,\n    TSubscriptionData = TResult,\n  >(\n    options:\n      | SubscribeToMoreOptions<\n          TResult,\n          TSubscriptionVariables,\n          TSubscriptionData\n        >\n      | ReactiveFunction<\n          SubscribeToMoreOptions<\n            TResult,\n            TSubscriptionVariables,\n            TSubscriptionData\n          >\n        >,\n  ): void {\n    return this.operationResult.subscribeToMore(options)\n  }\n\n  public fetchMore(\n    options: FetchMoreQueryOptions<TVariables, TResult> &\n      FetchMoreOptions<TResult, TVariables>,\n  ): Promise<Maybe<TResult>> {\n    return new Promise((resolve, reject) => {\n      const fetchMore = this.operationResult.fetchMore(options)\n\n      if (!fetchMore) {\n        resolve(null)\n        return\n      }\n\n      fetchMore\n        .then((result) => {\n          resolve(result.data)\n        })\n        .catch(() => {\n          reject(this.operationError().value)\n        })\n    })\n  }\n\n  public refetch(\n    variables?: Partial<TVariables>,\n  ): Promise<{ data: Maybe<TResult>; error?: unknown }> {\n    return new Promise((resolve, reject) => {\n      const refetch = this.operationResult.refetch(variables as TVariables)\n\n      if (!refetch) {\n        resolve({ data: null })\n        return\n      }\n\n      refetch\n        .then((result) => {\n          resolve({ data: result.data })\n        })\n        .catch(() => {\n          reject(this.operationError().value)\n        })\n    })\n  }\n\n  public load(\n    variables?: TVariables,\n    options?: UseQueryOptions<TResult, TVariables>,\n  ): void {\n    const operation = this.operationResult as unknown as {\n      load?: (\n        document?: unknown,\n        variables?: TVariables,\n        options?: UseQueryOptions<TResult, TVariables>,\n      ) => false | Promise<TResult>\n    }\n\n    if (typeof operation.load !== 'function') {\n      return\n    }\n\n    const result = operation.load(undefined, variables, options)\n    if (result instanceof Promise) {\n      // error is handled in BaseHandler\n      result.catch(() => {})\n    }\n  }\n\n  public isFirstRun(): boolean {\n    return this.operationResult.forceDisabled.value\n  }\n\n  public start(): void {\n    this.operationResult.start()\n  }\n\n  public stop(): void {\n    this.operationResult.stop()\n  }\n\n  public abort() {\n    this.operationResult.stop()\n    this.operationResult.start()\n  }\n\n  public watchOnceOnResult(callback: WatchResultCallback<TResult>) {\n    let watchStopHandle: WatchStopHandle | null = null\n\n    watchStopHandle = watch(\n      this.result(),\n      (result) => {\n        if (!watchStopHandle || !result) {\n          return\n        }\n\n        callback(result)\n        watchStopHandle()\n      },\n      {\n        // Needed for when the component is mounted after the first mount, in this case\n        // result will already contain the data and the watch will otherwise not be triggered.\n        immediate: true,\n      },\n    )\n  }\n\n  public watchOnResult(\n    callback: WatchResultCallback<TResult>,\n  ): WatchStopHandle {\n    return watch(\n      this.result(),\n      (result) => {\n        if (!result) {\n          return\n        }\n        callback(result)\n      },\n      {\n        // Needed for when the component is mounted after the first mount, in this case\n        // result will already contain the data and the watch will otherwise not be triggered.\n        immediate: true,\n      },\n    )\n  }\n\n  public onResult(\n    callback: (result: ApolloQueryResult<TResult | undefined>) => void,\n    ignoreFirstResult?: boolean,\n  ): void {\n    if (ignoreFirstResult) {\n      this.watchOnceOnResult(() => {\n        nextTick(() => {\n          this.operationResult.onResult(callback)\n        })\n      })\n\n      return\n    }\n\n    this.operationResult.onResult(callback)\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { EnumUserErrorException } from '#shared/graphql/types.ts'\nimport type { UserErrors, UserFieldError } from '#shared/types/error.ts'\nimport getUuid from '#shared/utils/getUuid.ts'\n\nexport default class UserError extends Error {\n  public userErrorId: string\n\n  public errors: UserErrors\n\n  public generalErrors: ReadonlyArray<string>\n\n  public fieldErrors: ReadonlyArray<UserFieldError>\n\n  constructor(errors: UserErrors, userErrorId?: string) {\n    super()\n\n    this.userErrorId = userErrorId || getUuid()\n    this.errors = errors\n    this.generalErrors = errors\n      .filter((error) => !error.field)\n      .map((error) => error.message)\n    this.fieldErrors = errors.filter(\n      (error) => error.field,\n    ) as ReadonlyArray<UserFieldError>\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n\n  public getFirstErrorMessage(): string {\n    return this.errors[0].message\n  }\n\n  public getFirstErrorException(): EnumUserErrorException | undefined | null {\n    return this.errors[0].exception\n  }\n\n  public getFieldErrorList(): Record<string, string> {\n    return this.fieldErrors.reduce(\n      (fieldErrorList: Record<string, string>, fieldError) => {\n        fieldErrorList[fieldError.field] = fieldError.message\n\n        return fieldErrorList\n      },\n      {},\n    )\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport UserError from '#shared/errors/UserError.ts'\nimport type { UserErrors } from '#shared/types/error.ts'\nimport type { OperationMutationResult } from '#shared/types/server/apollo/handler.ts'\n\nimport BaseHandler from './BaseHandler.ts'\n\nimport type { OperationVariables } from '@apollo/client/core'\nimport type { UseMutationReturn } from '@vue/apollo-composable'\nimport type { Ref } from 'vue'\n\nexport default class MutationHandler<\n  TResult = OperationMutationResult,\n  TVariables extends OperationVariables = OperationVariables,\n> extends BaseHandler<\n  TResult,\n  TVariables,\n  UseMutationReturn<TResult, TVariables>\n> {\n  public async send(variables?: TVariables): Promise<Maybe<TResult>> {\n    return new Promise((resolve, reject) => {\n      this.operationResult.mutate(variables).then((result) => {\n        if (!result) {\n          return reject(this.operationError().value)\n        }\n\n        if (result.data) {\n          const { errors } = Object.values(result.data)[0] as {\n            errors: UserErrors\n          }\n\n          if (errors) {\n            const userErrors = new UserError(errors, this.handlerId)\n\n            return reject(userErrors)\n          }\n        }\n\n        return resolve(result.data || null)\n      })\n    })\n  }\n\n  public called(): Ref<boolean> {\n    return this.operationResult.called\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { watch } from 'vue'\n\nimport type {\n  OperationSubscriptionOptionsReturn,\n  OperationSubscriptionsResult,\n  WatchResultCallback,\n} from '#shared/types/server/apollo/handler.ts'\n\nimport BaseHandler from './BaseHandler.ts'\n\nimport type { FetchResult, OperationVariables } from '@apollo/client/core'\nimport type { UseSubscriptionReturn } from '@vue/apollo-composable'\nimport type { Ref, WatchStopHandle } from 'vue'\n\nexport default class SubscriptionHandler<\n  TResult = OperationSubscriptionsResult,\n  TVariables extends OperationVariables = OperationVariables,\n> extends BaseHandler<\n  TResult,\n  TVariables,\n  UseSubscriptionReturn<TResult, TVariables>\n> {\n  public subscribed = false\n\n  public options(): OperationSubscriptionOptionsReturn<TResult, TVariables> {\n    return this.operationResult.options\n  }\n\n  public start(): void {\n    this.operationResult.start()\n  }\n\n  public stop(): void {\n    this.operationResult.stop()\n  }\n\n  public result(): Ref<Maybe<TResult> | undefined> {\n    return this.operationResult.result\n  }\n\n  public onResult(\n    callback: (\n      result: FetchResult<\n        TResult,\n        Record<string, unknown>,\n        Record<string, unknown>\n      >,\n    ) => void,\n  ) {\n    this.operationResult.onResult(callback)\n  }\n\n  public async onSubscribed(): Promise<Maybe<TResult> | undefined> {\n    return new Promise((resolve, reject) => {\n      let errorUnsubscribe!: () => void\n      let resultUnsubscribe!: () => void\n\n      const onFirstResultLoaded = () => {\n        resultUnsubscribe()\n        errorUnsubscribe()\n      }\n\n      resultUnsubscribe = watch(this.result(), (result) => {\n        this.subscribed = true\n\n        // Remove the watchers again after the promise was resolved.\n        onFirstResultLoaded()\n        return resolve(result || null)\n      })\n\n      errorUnsubscribe = watch(this.operationError(), (error) => {\n        onFirstResultLoaded()\n        return reject(error)\n      })\n    })\n  }\n\n  public watchOnResult(\n    callback: WatchResultCallback<TResult>,\n  ): WatchStopHandle {\n    return watch(\n      this.result(),\n      (result) => {\n        if (!result) {\n          return\n        }\n        callback(result)\n      },\n      {\n        // Needed for when the component is mounted after the first mount, in this case\n        // result will already contain the data and the watch will otherwise not be triggered.\n        immediate: true,\n      },\n    )\n  }\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport log from 'loglevel'\n\n// Use INFO as default log level rather than WARN.\nlog.setDefaultLevel(log.levels.INFO)\n\n// Register window.setLogLevel to allow for manual changing for debugging.\nwindow.setLogLevel = (level: LogLevel, persistent = true): void => {\n  return log.setLevel(level, persistent)\n}\n\n// Usage:\n\n// // Logging in code:\n// import log from '#shared/util/log.ts'\n// log.error('error message', ...)\n// log.warn('warn message', ...)\n// log.info('info message', ...)\n// log.debug('debug message', ...)\n// log.trace('trace message', ...)\n\n// // Manual changing of log level via JS console for debugging purposes:\n// setLogLevel(log.levels.TRACE, false) // temporary\n// setLogLevel(log.levels.TRACE)        // persistent via local storage\n\nexport default log\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport * as ActionCable from '@rails/actioncable'\n\nimport log from '#shared/utils/log.ts'\n\nActionCable.adapters.logger = log as unknown as Console\nActionCable.logger.enabled = true\n\nexport const consumer = ActionCable.createConsumer()\n\nexport const reopenWebSocketConnection = () => {\n  consumer.connection.reopen()\n  return new Promise<void>((resolve, reject) => {\n    const startTime = Date.now()\n\n    const checkConnection = () => {\n      if (consumer.connection.isOpen()) {\n        resolve()\n      }\n      // to avoid infinite loop\n      else if (Date.now() - startTime > 10_000) {\n        reject(new Error('failed to reconnect'))\n      } else {\n        setTimeout(checkConnection, 100)\n      }\n    }\n\n    checkConnection()\n  })\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { computed, ref, watch } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useApplicationLoaded } from '#shared/composables/useApplicationLoaded.ts'\nimport {\n  consumer,\n  reopenWebSocketConnection,\n} from '#shared/server/action_cable/consumer.ts'\nimport log from '#shared/utils/log.ts'\n\nconst wsConnectionState = ref(true)\nconst wsReopening = ref(false)\nconst { loaded } = useApplicationLoaded()\n\nconst isConnectionOpen = () => !loaded.value || consumer.connection.isOpen()\n\nconst INTERVAL_CHECK_CONNECTION = 1000\nconst TIMEOUT_CONFIRM_FAIL = 2000\n\nlet faledTimeout: number | null = null\nlet checkInterval: number | null = null\n\nconst clearFailedTimeout = () => {\n  if (faledTimeout) window.clearTimeout(faledTimeout)\n  faledTimeout = null\n}\n\nconst clearCheckInterval = () => {\n  if (checkInterval) window.clearInterval(checkInterval)\n  checkInterval = null\n}\n\nconst checkStatus = () => {\n  clearCheckInterval()\n\n  checkInterval = window.setInterval(() => {\n    const hasConnection = isConnectionOpen()\n\n    if (hasConnection) {\n      wsConnectionState.value = true\n      return\n    }\n\n    // if there is no connection, let's wait a few seconds and check again\n    // pause interval while we wait\n\n    clearCheckInterval()\n    clearFailedTimeout()\n    faledTimeout = window.setTimeout(() => {\n      wsConnectionState.value = isConnectionOpen()\n      checkStatus()\n    }, TIMEOUT_CONFIRM_FAIL)\n  }, INTERVAL_CHECK_CONNECTION)\n}\n\ncheckStatus()\n\nlet connectionNotificationId: string\nconst networkConnectionState = ref(true)\nconst connected = computed(() => {\n  return (\n    (wsReopening.value || wsConnectionState.value) &&\n    networkConnectionState.value\n  )\n})\n\nconst notifications = useNotifications()\n\nwatch(\n  () => connected.value,\n  (connected) => {\n    if (connected) {\n      if (!connectionNotificationId) return\n      log.debug('Application connection just came up.')\n      notifications.removeNotification(connectionNotificationId)\n    } else {\n      log.debug('Application connection just went down.')\n      connectionNotificationId = notifications.notify({\n        id: 'connection-lost',\n        message: __('The connection to the server was lost.'),\n        type: NotificationTypes.Error,\n        persistent: true,\n      })\n    }\n  },\n)\n\nexport const recordCommunicationSuccess = (): void => {\n  networkConnectionState.value = true\n}\n\nexport const recordCommunicationFailure = (): void => {\n  networkConnectionState.value = false\n}\n\nexport const triggerWebSocketReconnect = (): void => {\n  wsReopening.value = true\n  reopenWebSocketConnection()\n    .then(() => {\n      // Set this before setting wsReopening, otherwise it would be set later by the interval,\n      //  causing false positives.\n      wsConnectionState.value = true\n    })\n    .finally(() => {\n      wsReopening.value = false\n    })\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { relayStylePagination } from '@apollo/client/utilities'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function registerRelayStylePagination(\n  config: InMemoryCacheConfig,\n  queryName: string,\n  fields: string[],\n): InMemoryCacheConfig {\n  config.typePolicies ||= {}\n  config.typePolicies.Query ||= {}\n  config.typePolicies.Query.fields ||= {}\n  config.typePolicies.Query.fields[queryName] = relayStylePagination(fields)\n\n  return config\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerRelayStylePagination from '#shared/server/apollo/cache/utils/registerRelayStylePagination.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(\n  config: InMemoryCacheConfig,\n): InMemoryCacheConfig {\n  return registerRelayStylePagination(config, 'ticketArticles', [\n    'ticket',\n    'first',\n  ])\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function registerIncomingMerge(\n  config: InMemoryCacheConfig,\n  queryName: string,\n  fields?: string[],\n): InMemoryCacheConfig {\n  config.typePolicies ||= {}\n  config.typePolicies.Query ||= {}\n  config.typePolicies.Query.fields ||= {}\n  config.typePolicies.Query.fields[queryName] = {\n    keyArgs: fields,\n    merge(_, incoming) {\n      return incoming\n    },\n  }\n\n  return config\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerIncomingMerge from '#shared/server/apollo/cache/utils/registerIncomingMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(config: InMemoryCacheConfig) {\n  return registerIncomingMerge(config, 'checklistTemplates')\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerRelayStylePagination from '#shared/server/apollo/cache/utils/registerRelayStylePagination.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(config: InMemoryCacheConfig) {\n  return registerRelayStylePagination(config, 'mentions', ['first'])\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerIncomingMerge from '#shared/server/apollo/cache/utils/registerIncomingMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(config: InMemoryCacheConfig) {\n  return registerIncomingMerge(config, 'onlineNotifications', [\n    'onlineNotifications',\n  ])\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerIncomingMerge from '#shared/server/apollo/cache/utils/registerIncomingMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(config: InMemoryCacheConfig) {\n  return registerIncomingMerge(config, 'publicLinks')\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { TypePolicy } from '@apollo/client/cache'\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\n// You can use a merge function to intelligently combine nested objects that\n// are not normalized in your cache, assuming those objects are nested within the same normalized parent.\nexport default function registerNotNormalizedObjectFieldsMerge(\n  config: InMemoryCacheConfig,\n  type: string,\n  fields: string[],\n): InMemoryCacheConfig {\n  const notNormalizedFields: Record<string, TypePolicy> = {}\n\n  fields.forEach((field) => {\n    notNormalizedFields[field] = {\n      merge: (_, incoming) => incoming,\n    }\n  })\n\n  config.typePolicies ||= {}\n  config.typePolicies[type] ||= {}\n  config.typePolicies[type].fields = notNormalizedFields\n\n  return config\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerNotNormalizedObjectFieldsMerge from '#shared/server/apollo/cache/utils/registerNotNormalizedObjectFieldsMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(config: InMemoryCacheConfig) {\n  return registerNotNormalizedObjectFieldsMerge(config, 'Checklist', ['items'])\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerNotNormalizedObjectFieldsMerge from '#shared/server/apollo/cache/utils/registerNotNormalizedObjectFieldsMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(config: InMemoryCacheConfig) {\n  return registerNotNormalizedObjectFieldsMerge(config, 'Overview', [\n    'viewColumns',\n    'orderColumns',\n  ])\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerIncomingMerge from '#shared/server/apollo/cache/utils/registerIncomingMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(\n  config: InMemoryCacheConfig,\n): InMemoryCacheConfig {\n  return registerIncomingMerge(config, 'ticketOverviews')\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerRelayStylePagination from '#shared/server/apollo/cache/utils/registerRelayStylePagination.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(\n  config: InMemoryCacheConfig,\n): InMemoryCacheConfig {\n  return registerRelayStylePagination(config, 'ticketsByOverview', [\n    'overviewId',\n    'orderBy',\n    'orderDirection',\n  ])\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport registerIncomingMerge from '#shared/server/apollo/cache/utils/registerIncomingMerge.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nexport default function register(\n  config: InMemoryCacheConfig,\n): InMemoryCacheConfig {\n  return registerIncomingMerge(config, 'userCurrentTicketOverviews')\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { InMemoryCache } from '@apollo/client/core'\n\nimport type {\n  CacheInitializerModules,\n  RegisterInMemoryCacheConfig,\n} from '#shared/types/server/apollo/client.ts'\nimport type { ImportGlobEagerDefault } from '#shared/types/utils.ts'\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\nlet cacheConfig: InMemoryCacheConfig = {}\n\nconst cacheInitializerModules: CacheInitializerModules = import.meta.glob(\n  './cache/initializer/*.ts',\n  { eager: true },\n)\n\nconst registerInitializeModules = (\n  additionalCacheInitializerModules: CacheInitializerModules = {},\n) => {\n  const allCacheInitializerModules = Object.assign(\n    cacheInitializerModules,\n    additionalCacheInitializerModules,\n  )\n\n  Object.values(allCacheInitializerModules).forEach(\n    (module: ImportGlobEagerDefault<RegisterInMemoryCacheConfig>) => {\n      const register = module.default\n\n      cacheConfig = register(cacheConfig)\n    },\n  )\n}\n\nconst createCache = (\n  additionalCacheInitializerModules: CacheInitializerModules = {},\n): InMemoryCache => {\n  registerInitializeModules(additionalCacheInitializerModules)\n  return new InMemoryCache(cacheConfig)\n}\n\nexport default createCache\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ApolloLink } from '@apollo/client/core'\n\nimport { recordCommunicationSuccess } from '#shared/server/connection.ts'\n\n// This link is only there to look for received responses and set\n//  the applicationConnected state accordingly.\nconst connectedStateLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map((response) => {\n    // A response in this chain means there was no network error.\n    recordCommunicationSuccess()\n    return response\n  })\n})\n\nexport default connectedStateLink\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nconst csrfTokenMetaElement: Maybe<HTMLMetaElement> = document.querySelector(\n  'meta[name=\"csrf-token\"]',\n)\n\nconst initialCsrfToken = csrfTokenMetaElement\n  ? csrfTokenMetaElement.getAttribute('content')\n  : null\nlet csrfToken: Maybe<string> = null\n\nexport const setCSRFToken = (newCSRFToken: string) => {\n  csrfToken = newCSRFToken\n}\n\nexport const getCSRFToken = (): Maybe<string> => {\n  return csrfToken || initialCsrfToken\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ApolloLink } from '@apollo/client/core'\n\nimport { setCSRFToken } from '../utils/csrfToken.ts'\n\nconst csrfLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map((response) => {\n    const context = operation.getContext()\n\n    if (context.response) {\n      const csrfToken = context.response.headers.get('CSRF-Token')\n\n      if (csrfToken) {\n        setCSRFToken(csrfToken)\n      }\n    }\n    return response\n  })\n})\n\nexport default csrfLink\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ApolloLink } from '@apollo/client/core'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { print } from 'graphql/language/printer'\nimport { capitalize, cloneDeep, isEmpty } from 'lodash-es'\n\nimport type {\n  DebugLinkRequestOutput,\n  DebugLinkResponseOutput,\n} from '#shared/types/server/apollo/client.ts'\nimport log from '#shared/utils/log.ts'\n\nconst debugLink = new ApolloLink((operation, forward) => {\n  if (log.getLevel() < log.levels.DEBUG) return forward(operation)\n\n  const requestContext = operation.getContext()\n\n  const definition = getMainDefinition(operation.query)\n  const operationType =\n    definition.kind === 'OperationDefinition'\n      ? capitalize(definition.operation)\n      : null\n\n  const requestOutput: DebugLinkRequestOutput = {\n    printedDocument: print(operation.query),\n    document: operation.query,\n  }\n\n  if (!isEmpty(operation.variables)) {\n    requestOutput.variables = operation.variables\n  }\n\n  if (!isEmpty(requestContext.headers)) {\n    requestOutput.requestHeaders = requestContext.headers\n  }\n\n  // Called before operation is sent to server\n  operation.setContext({ start: new Date() })\n\n  log.debug(\n    `[GraphQL - Request] - ${operationType} - ${operation.operationName}:`,\n    requestOutput,\n  )\n\n  return forward(operation).map((data) => {\n    const context = operation.getContext()\n    const end = new Date()\n\n    const responseHeaders: Record<string, string> = {}\n    if (context?.response?.headers) {\n      context.response.headers.forEach((value: string, key: string) => {\n        responseHeaders[key] = value\n      })\n    }\n\n    const duration = end.getTime() - context.start.getTime()\n\n    const responseOutput: DebugLinkResponseOutput = {\n      data,\n    }\n\n    if (!isEmpty(responseHeaders)) {\n      responseOutput.responseHeaders = responseHeaders\n    }\n\n    log.debug(\n      `[GraphQL - Response] - ${operationType} - ${operation.operationName} (took ${duration}ms):`,\n      cloneDeep(responseOutput),\n    )\n    return data\n  })\n})\n\nexport default debugLink\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { ClientErrorContext } from '#shared/types/server/apollo/client.ts'\n\nimport type { Operation } from '@apollo/client/core'\n\nexport default function getErrorContext(\n  operation: Operation,\n): ClientErrorContext {\n  const defaultErrorContext: ClientErrorContext = {\n    logLevel: 'error',\n  }\n  const context = operation.getContext()\n  const error: Partial<ClientErrorContext> = context.error || {}\n\n  return Object.assign(defaultErrorContext, error)\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport mitt, { type Emitter } from 'mitt'\n\ntype Events = {\n  sessionInvalid: void\n  'expand-collapsed-content': string\n  'focus-quick-search-field': void\n  'reset-quick-search-field': void\n}\n\nconst emitter: Emitter<Events> = mitt<Events>()\n\nexport default emitter\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { onError } from '@apollo/client/link/error'\n\nimport getErrorContext from '#shared/server/apollo/utils/getErrorContext.ts'\nimport { recordCommunicationFailure } from '#shared/server/connection.ts'\nimport type { GraphQLErrorExtensionsHandler } from '#shared/types/error.ts'\nimport { GraphQLErrorTypes } from '#shared/types/error.ts'\nimport emitter from '#shared/utils/emitter.ts'\nimport log from '#shared/utils/log.ts'\n\nconst errorLink = onError(\n  ({ graphQLErrors, networkError, operation, forward }) => {\n    const errorContext = getErrorContext(operation)\n\n    const errorMessages: Array<string> = []\n\n    // If the error is an AbortError, ignore it and forward the operation to avoid communication failure\n    if (networkError?.name === 'AbortError') return forward(operation)\n\n    if (graphQLErrors) {\n      graphQLErrors.forEach(({ message, extensions, path }) => {\n        const { type, backtrace }: GraphQLErrorExtensionsHandler = {\n          type:\n            (extensions?.type as GraphQLErrorTypes) ||\n            GraphQLErrorTypes.NetworkError,\n          backtrace: extensions?.backtrace as string,\n        }\n\n        errorMessages.push(\n          `[GraphQL error - ${type}]: ${message}, Path: ${path}`,\n          backtrace,\n        )\n\n        if (\n          operation.operationName !== 'session' &&\n          type === GraphQLErrorTypes.NotAuthorized\n        ) {\n          // Reset authenticated state after an unathenticated error type.\n          emitter.emit('sessionInvalid')\n\n          log.warn('Session invalid, trigger logout and show login page.')\n        }\n      })\n    }\n\n    if (networkError) {\n      // Suppress error message in Capybara test context, as it can happen if the\n      //  test session is reset to 'about:blank' while requests are still running.\n      if (!VITE_TEST_MODE)\n        errorMessages.push(`[Network error]: ${networkError}`)\n      // Network error implies application connection problems.\n      // TODO: what's missing here is a detection of web socket disconnects.\n      recordCommunicationFailure()\n    }\n\n    if (errorContext.logLevel === 'silent') return\n\n    log[errorContext.logLevel](...errorMessages)\n  },\n)\n\nexport default errorLink\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { setContext } from '@apollo/client/link/context'\n\nimport { getCSRFToken } from '../utils/csrfToken.ts'\n\nconst setAuthorizationLink = setContext((request, { headers }) => ({\n  headers: {\n    ...headers,\n\n    // Fetch CSRF from head via html embed from Rails.\n    'X-CSRF-Token': getCSRFToken(),\n  },\n}))\n\nexport default setAuthorizationLink\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { ClientBatchContext } from '#shared/types/server/apollo/client.ts'\n\nimport type { Operation } from '@apollo/client/core'\n\nexport default function getBatchContext(\n  operation: Operation,\n): ClientBatchContext {\n  const defaultBatchContext: ClientBatchContext = {\n    active: true,\n  }\n  const context = operation.getContext()\n  const batch: Partial<ClientBatchContext> = context.batch || {}\n\n  return Object.assign(defaultBatchContext, batch)\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { ClientWebsocketContext } from '#shared/types/server/apollo/client.ts'\n\nimport type { Operation } from '@apollo/client/core'\n\nexport default function getBatchContext(\n  operation: Operation,\n): ClientWebsocketContext {\n  const defaultWebsocketContext: ClientWebsocketContext = {\n    active: false,\n  }\n  const context = operation.getContext()\n  const websocket: Partial<ClientWebsocketContext> = context.websocket || {}\n\n  return Object.assign(defaultWebsocketContext, websocket)\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ApolloLink, createHttpLink, from } from '@apollo/client/core'\nimport { BatchHttpLink } from '@apollo/client/link/batch-http'\nimport { removeTypenameFromVariables } from '@apollo/client/link/remove-typename'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport ActionCableLink from 'graphql-ruby-client/subscriptions/ActionCableLink'\n\nimport { consumer } from '#shared/server/action_cable/consumer.ts'\n\nimport connectedStateLink from './link/connectedState.ts'\nimport csrfLink from './link/csrf.ts'\nimport debugLink from './link/debug.ts'\nimport errorLink from './link/error.ts'\nimport setAuthorizationLink from './link/setAuthorization.ts'\nimport testFlagsLink from './link/testFlags.ts'\nimport getBatchContext from './utils/getBatchContext.ts'\nimport getWebsocketContext from './utils/getWebsocketContext.ts'\n\nimport type { Operation } from '@apollo/client/core'\nimport type { FragmentDefinitionNode, OperationDefinitionNode } from 'graphql'\n\n// Should subsequent HTTP calls be batched together?\nconst enableBatchLink = true\n\n// Should queries and mutations be sent over ActionCable?\nconst enableQueriesOverWebsocket = false\n\nconst connectionSettings = {\n  uri: '/graphql',\n  credentials: 'same-origin', // Must have for CSRF validation via Rails.\n}\n\nconst noBatchLink = createHttpLink(connectionSettings)\n\nconst batchLink = new BatchHttpLink({\n  ...connectionSettings,\n  batchMax: 5,\n  batchInterval: 20,\n})\n\nconst operationIsLoginLogout = (\n  definition: OperationDefinitionNode | FragmentDefinitionNode,\n) => {\n  return !!(\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'mutation' &&\n    definition.name?.value &&\n    ['login', 'logout'].includes(definition.name?.value)\n  )\n}\n\nconst requiresBatchLink = (op: Operation) => {\n  if (!enableBatchLink) return false\n\n  const definition = getMainDefinition(op.query)\n\n  if (\n    definition.kind === 'OperationDefinition' &&\n    definition.operation === 'mutation'\n  ) {\n    return false\n  }\n\n  const batchContext = getBatchContext(op)\n\n  return batchContext.active\n}\n\nconst httpLink = ApolloLink.split(requiresBatchLink, batchLink, noBatchLink)\n\nconst requiresHttpLink = (op: Operation) => {\n  const definition = getMainDefinition(op.query)\n\n  const websocketContext = getWebsocketContext(op)\n\n  if (!enableQueriesOverWebsocket) {\n    // Only subscriptions over websocket.\n    return (\n      !(\n        definition.kind === 'OperationDefinition' &&\n        definition.operation === 'subscription'\n      ) && !websocketContext.active\n    )\n  }\n\n  // Everything over websocket except login/logout as that changes cookies.\n  return operationIsLoginLogout(definition)\n}\n\nconst actionCableLink = new ActionCableLink({ cable: consumer })\n\nconst splitLink = ApolloLink.split(requiresHttpLink, httpLink, actionCableLink)\n\nconst link = from([\n  ...(VITE_TEST_MODE ? [testFlagsLink] : []),\n  csrfLink,\n  errorLink,\n  setAuthorizationLink,\n  debugLink,\n  connectedStateLink,\n  removeTypenameFromVariables(),\n  splitLink,\n])\n\nexport default link\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { ApolloClient } from '@apollo/client/core'\n\nimport type { CacheInitializerModules } from '#shared/types/server/apollo/client.ts'\n\nimport createCache from './cache.ts'\nimport link from './link.ts'\n\nimport type { NormalizedCacheObject } from '@apollo/client/core'\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>\n\nexport const createApolloClient = (\n  cacheInitializerModules: CacheInitializerModules = {},\n) => {\n  const cache = createCache(cacheInitializerModules)\n\n  apolloClient = new ApolloClient({\n    connectToDevTools: process.env.NODE_ENV !== 'production',\n    link,\n    cache,\n    queryDeduplication: true,\n    defaultOptions: {\n      // always refresh query results from the server\n      // https://www.apollographql.com/docs/react/data/queries/#setting-a-fetch-policy\n      watchQuery: {\n        fetchPolicy: 'cache-and-network',\n        nextFetchPolicy(currentFetchPolicy) {\n          return currentFetchPolicy\n        },\n      },\n    },\n  })\n\n  return apolloClient\n}\n\nexport const getApolloClient = () => {\n  return apolloClient\n}\n\nexport const clearApolloClientStore = async () => {\n  await apolloClient.clearStore()\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport type { InMemoryCacheConfig } from '@apollo/client/cache/inmemory/types'\n\n// If a new array is returned and length differs, cache doesn't like it,\n// and we need to tell apollo that it needs to just replace current state altogether\n// this should be used only, if you are not using pagination.\nexport default function registerIncomingMerge(\n  config: InMemoryCacheConfig,\n  fieldName: string,\n  referenceTypename: string,\n): InMemoryCacheConfig {\n  config.typePolicies ||= {}\n  config.typePolicies.Query ||= {}\n  config.typePolicies.Query.fields ||= {}\n  config.typePolicies.Query.fields[fieldName] = {\n    read(_, { args, toReference }) {\n      if (!args) return undefined\n\n      let { id } = args\n      if (!('id' in args)) {\n        id = args[fieldName][`${fieldName}Id`]\n      }\n\n      if (!id) return undefined\n\n      return toReference({\n        __typename: referenceTypename,\n        id,\n      })\n    },\n  }\n\n  return config\n}\n","// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport {\n  DefaultApolloClient,\n  provideApolloClient,\n} from '@vue/apollo-composable'\n\nimport type { CacheInitializerModules } from '#shared/types/server/apollo/client.ts'\n\nimport { createApolloClient } from './client.ts'\n\nimport type { App } from 'vue'\n\nconst initializeApolloClient = (\n  app: App,\n  cacheInitializerModules: CacheInitializerModules = {},\n) => {\n  const apolloClient = createApolloClient(cacheInitializerModules)\n\n  app.provide(DefaultApolloClient, apolloClient)\n\n  provideApolloClient(apolloClient)\n}\n\nexport default initializeApolloClient\n"],"names":["NotificationTypes","getUuid","uuid","notifications","ref","defaultNotificationDurationMS","removeNotification","id","notification","clearAllNotifications","useNotifications","unique","newNotification","isSame","loaded","useApplicationLoaded","DefaultApolloClient","ApolloClients","resolveDefaultClient","providedApolloClients","providedApolloClient","resolveClientWithId","clientId","useApolloClient","resolveImpl","savedCurrentClients","currentApolloClients","hasInjectionContext","inject","client2","client","resolveClient","provideApolloClient","fn","result","paramToRef","param","isRef","computed","paramToReactive","isRef2","computed2","reactive","useEventHook","fns","on","off","index","trigger","params","getCount","isServer","globalTracking","ref2","getCurrentTracking","currentScope","getCurrentScope","tracking","onScopeDispose","track","loading","type","watch","value","oldValue","mod","trackQuery","trackMutation","trackSubscription","toApolloError","error","isApolloError","ApolloError","resultErrorsToApolloError","errors","e","useQuery","document","variables","options","useQueryImpl","lazy","_a","getCurrentScope2","currentInstance","getCurrentInstance","currentOptions","ref3","documentRef","variablesRef","optionsRef","shallowRef","resultEvent","errorEvent","networkStatus","firstResolve","firstResolveTriggered","firstReject","firstRejectError","tryFirstResolve","tryFirstReject","apolloError","resetFirstResolveReject","onServerPrefetch","_a2","isEnabled","resolve","reject","stop","getClient","query","observer","started","ignoreNextResult","firstStart","start","_b","_c","_d","_e","currentDocument","applyDocument","applyVariables","applyOptions","unref","currentVariables","startQuerySubscription","currentResult","onNextResult","onError","item","subscribeToMoreItems","addSubscribeToMore","getErrorPolicy","queryResult","processNextResult","errorPolicy","processError","nextTick","queryError","resubscribeToQuery","lastError","lastResult","onStopHandlers","handler","restarting","baseRestart","debouncedRestart","isRestartDebounceSetup","updateRestartFn","throttle","debounce","restart","forceDisabled","enabledOption","computed3","watch2","currentVariablesSerialized","serialized","refetch","variables2","refetchResult","updateQuery","mapFn","fetchMore","options2","fetchMoreResult","subscribeToMore","optionsRef2","onCleanup","item2","unsubscribe","onScopeDispose2","useLazyQuery","load","document2","isRef3","offResult","offError","useMutation","getCurrentScope3","ref4","shallowRef2","called","doneEvent","mutate","overrideOptions","isRef4","nextTick2","onScopeDispose3","useSubscription","getCurrentScope4","shallowRef3","ref5","subscription","fetchResult","fetchError","nextTick3","throttle2","debounce2","watch3","isRef5","computed4","onScopeDispose4","GraphQLErrorTypes","ErrorStatusCodes","BaseHandler","operationResult","handlerOptions","callback","triggerNotification","graphQLErrors","networkError","errorHandler","message","extensions","errorType","errorMessage","defaultErrorNotificationMessage","fallbackErrorMessage","QueryHandler","defaultOptions","node","aborter","defaultFetchPolicy","defaultOptionsValue","fetchPolicy","operation","watchStopHandle","ignoreFirstResult","UserError","userErrorId","fieldErrorList","fieldError","MutationHandler","userErrors","SubscriptionHandler","errorUnsubscribe","resultUnsubscribe","onFirstResultLoaded","log","level","persistent","ActionCable.adapters","ActionCable.logger","consumer","ActionCable.createConsumer","reopenWebSocketConnection","startTime","checkConnection","wsConnectionState","wsReopening","isConnectionOpen","INTERVAL_CHECK_CONNECTION","TIMEOUT_CONFIRM_FAIL","faledTimeout","checkInterval","clearFailedTimeout","clearCheckInterval","checkStatus","connectionNotificationId","networkConnectionState","connected","recordCommunicationSuccess","recordCommunicationFailure","triggerWebSocketReconnect","registerRelayStylePagination","config","queryName","fields","relayStylePagination","register","registerIncomingMerge","_","incoming","registerNotNormalizedObjectFieldsMerge","notNormalizedFields","field","cacheConfig","cacheInitializerModules","__vite_glob_0_0","__vite_glob_0_1","__vite_glob_0_2","__vite_glob_0_3","__vite_glob_0_4","__vite_glob_0_5","__vite_glob_0_6","__vite_glob_0_7","__vite_glob_0_8","__vite_glob_0_9","registerInitializeModules","additionalCacheInitializerModules","allCacheInitializerModules","module","createCache","InMemoryCache","connectedStateLink","ApolloLink","forward","response","csrfTokenMetaElement","initialCsrfToken","csrfToken","setCSRFToken","newCSRFToken","getCSRFToken","csrfLink","context","debugLink","requestContext","definition","getMainDefinition","operationType","capitalize","requestOutput","print","isEmpty","data","end","responseHeaders","key","duration","responseOutput","cloneDeep","getErrorContext","defaultErrorContext","emitter","mitt","errorLink","errorContext","errorMessages","path","backtrace","setAuthorizationLink","setContext","request","headers","getBatchContext","defaultBatchContext","batch","defaultWebsocketContext","websocket","connectionSettings","noBatchLink","createHttpLink","batchLink","BatchHttpLink","requiresBatchLink","op","httpLink","requiresHttpLink","websocketContext","getWebsocketContext","actionCableLink","ActionCableLink","splitLink","link","from","removeTypenameFromVariables","apolloClient","createApolloClient","cache","ApolloClient","currentFetchPolicy","getApolloClient","clearApolloClientStore","fieldName","referenceTypename","args","toReference","initializeApolloClient","app"],"mappings":"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","x_google_ignoreList":[4]}