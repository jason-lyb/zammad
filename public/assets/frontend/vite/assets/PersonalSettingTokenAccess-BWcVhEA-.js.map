{"version":3,"mappings":";ioBAQO,MAAMA,EAAuCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAS9CC,CAAiB,GACP,SAAAC,GAAwCC,EAA+S,GAAI,CAClW,OAAAC,EAAiIL,EAAsCI,CAAO,CACvL,CCjBO,MAAME,EAA6BL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MCK7BM,GAAqCN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM5CK,CAA0B,GAChB,SAAAE,GAAmCJ,EAAya,GAAI,CAC9d,OAAOK,EAAoHF,GAAoC,GAAIH,CAAO,CAC5K,CCTO,MAAMM,GAAwCT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ/CK,CAA0B,uUCuChC,KAAM,CAAE,gBAAAK,CAAgB,EAAIC,EAAc,GAAG,cAAc,CAAC,EAEtDC,EAAuBC,EAAU,CACrC,KAAM,mBACN,UAAW,UACT,OAAO,mDAAuD,2HACjE,EAEKC,EAAuB,IAAIC,EAC/BR,GAAmC,GAG/BS,EAA6BF,EAAqB,SAClDG,EAAyBH,EAAqB,UAEpDA,EAAqB,gBAGnB,CACA,SAAUL,GACV,YAAa,CAACS,EAAM,CAAE,iBAAAC,KAAuB,OAC3C,OAAKC,EAAAD,EAAiB,OAAjB,MAAAC,EAAuB,8BAA8B,OAInD,CACL,2BACED,EAAiB,KAAK,8BAA8B,QAL/C,IAOX,EACD,EAED,MAAME,EAAoC,CACxC,CACE,IAAK,OACL,MAAO,GAAG,MAAM,EAChB,SAAU,EACZ,EACA,CACE,IAAK,cACL,MAAO,GAAG,aAAa,EACvB,SAAU,EACZ,EACA,CACE,IAAK,YACL,MAAO,GAAG,SAAS,EACnB,KAAM,WACR,EACA,CACE,IAAK,YACL,MAAO,GAAG,SAAS,EACnB,KAAM,WACR,EACA,CACE,IAAK,aACL,MAAO,GAAG,WAAW,EACrB,KAAM,WACR,GAGI,CAAE,OAAAC,GAAWC,IAEb,CAAE,2BAAAC,GAA+BC,IAEjCC,EAAgBC,GAAuB,CACT,IAAIC,EACpC1B,GAAwC,KAAO,CAC7C,UAAW,CACT,QAASyB,EAAY,EACvB,EACA,OAAOE,EAAO,CACZA,EAAM,MAAM,CAAE,GAAIA,EAAM,SAASF,CAAW,EAAG,EAC/CE,EAAM,GAAG,CACX,GACA,EACF,CACE,yBAA0B,GACxB,iDACF,CACF,GAGwB,OAAO,KAAK,IAAM,CACnCP,EAAA,CACL,GAAI,gCACJ,KAAMQ,EAAkB,QACxB,QAAS,GAAG,yCAAyC,EACtD,EACF,GAGGC,EAAsB,MAAOJ,GAAuB,CACtC,MAAMH,EAA2B,QAAQ,KAE/BG,CAAW,GAGnCK,EAA2B,CAC/B,CACE,IAAK,SACL,MAAO,GAAG,0BAA0B,EACpC,KAAM,SACN,QAAS,SACT,QAAUC,GAAS,CACjBF,EAAoBE,CAAa,CACnC,CACF,GAGIC,EAAsBC,EAAsB,IAAM,OACtD,SACEf,EAAAJ,EAA2B,QAA3B,YAAAI,EAAkC,6BAA8B,IAChE,IAAKO,GAAgB,SACd,OACL,GAAGA,EACH,cAAaS,GAAAhB,EAAAO,EAAY,cAAZ,YAAAP,EAAyB,aAAzB,YAAAgB,EAAqC,KAAK,QAAS,GAClE,CACD,EACF,EAEKC,EAA4BF,EAChC,IAAMD,EAAoB,MAAM,OAAS,GAGrCI,EAAWH,EAAS,IAAM,CAC9BI,EAAK,EACH,4GACF,EACAA,EAAK,EAAE,qEAAqE,EAC7E","names":["UserCurrentAccessTokenDeleteDocument","gql","ErrorsFragmentDoc","useUserCurrentAccessTokenDeleteMutation","options","VueApolloComposable.useMutation","TokenAttributesFragmentDoc","UserCurrentAccessTokenListDocument","useUserCurrentAccessTokenListQuery","VueApolloComposable.useQuery","UserCurrentAccessTokenUpdatesDocument","breadcrumbItems","useBreadcrumb","newAccessTokenFlyout","useFlyout","accessTokenListQuery","QueryHandler","accessTokenListQueryResult","accessTokenListLoading","prev","subscriptionData","_a","tableHeaders","notify","useNotifications","waitForVariantConfirmation","useConfirmation","deleteDevice","accessToken","MutationHandler","cache","NotificationTypes","confirmDeleteDevice","tableActions","data","currentAccessTokens","computed","_b","currentAccessTokenPresent","helpText","i18n"],"ignoreList":[],"sources":["../../../../../app/frontend/shared/entities/user/current/graphql/mutations/userCurrentAccessTokenDelete.api.ts","../../../../../app/frontend/shared/entities/user/current/graphql/fragments/tokenAttributes.api.ts","../../../../../app/frontend/shared/entities/user/current/graphql/queries/userCurrentAcessTokenList.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/subscriptions/userCurrentAccessTokenUpdates.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingTokenAccess.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAccessTokenDeleteDocument = gql`\n    mutation userCurrentAccessTokenDelete($tokenId: ID!) {\n  userCurrentAccessTokenDelete(tokenId: $tokenId) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentAccessTokenDeleteMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentAccessTokenDeleteMutation, Types.UserCurrentAccessTokenDeleteMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentAccessTokenDeleteMutation, Types.UserCurrentAccessTokenDeleteMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentAccessTokenDeleteMutation, Types.UserCurrentAccessTokenDeleteMutationVariables>(UserCurrentAccessTokenDeleteDocument, options);\n}\nexport type UserCurrentAccessTokenDeleteMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentAccessTokenDeleteMutation, Types.UserCurrentAccessTokenDeleteMutationVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nexport const TokenAttributesFragmentDoc = gql`\n    fragment tokenAttributes on Token {\n  id\n  user {\n    id\n  }\n  name\n  preferences\n  expiresAt\n  lastUsedAt\n  createdAt\n}\n    `;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TokenAttributesFragmentDoc } from '../fragments/tokenAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAccessTokenListDocument = gql`\n    query userCurrentAccessTokenList {\n  userCurrentAccessTokenList {\n    ...tokenAttributes\n  }\n}\n    ${TokenAttributesFragmentDoc}`;\nexport function useUserCurrentAccessTokenListQuery(options: VueApolloComposable.UseQueryOptions<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>(UserCurrentAccessTokenListDocument, {}, options);\n}\nexport function useUserCurrentAccessTokenListLazyQuery(options: VueApolloComposable.UseQueryOptions<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>(UserCurrentAccessTokenListDocument, {}, options);\n}\nexport type UserCurrentAccessTokenListQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.UserCurrentAccessTokenListQuery, Types.UserCurrentAccessTokenListQueryVariables>;","import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { TokenAttributesFragmentDoc } from '../../../../../../shared/entities/user/current/graphql/fragments/tokenAttributes.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentAccessTokenUpdatesDocument = gql`\n    subscription userCurrentAccessTokenUpdates {\n  userCurrentAccessTokenUpdates {\n    tokens {\n      ...tokenAttributes\n    }\n  }\n}\n    ${TokenAttributesFragmentDoc}`;\nexport function useUserCurrentAccessTokenUpdatesSubscription(options: VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentAccessTokenUpdatesSubscription, Types.UserCurrentAccessTokenUpdatesSubscriptionVariables> | VueCompositionApi.Ref<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentAccessTokenUpdatesSubscription, Types.UserCurrentAccessTokenUpdatesSubscriptionVariables>> | ReactiveFunction<VueApolloComposable.UseSubscriptionOptions<Types.UserCurrentAccessTokenUpdatesSubscription, Types.UserCurrentAccessTokenUpdatesSubscriptionVariables>> = {}) {\n  return VueApolloComposable.useSubscription<Types.UserCurrentAccessTokenUpdatesSubscription, Types.UserCurrentAccessTokenUpdatesSubscriptionVariables>(UserCurrentAccessTokenUpdatesDocument, {}, options);\n}\nexport type UserCurrentAccessTokenUpdatesSubscriptionCompositionFunctionResult = VueApolloComposable.UseSubscriptionReturn<Types.UserCurrentAccessTokenUpdatesSubscription, Types.UserCurrentAccessTokenUpdatesSubscriptionVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\n\nimport { NotificationTypes } from '#shared/components/CommonNotifications/types.ts'\nimport { useNotifications } from '#shared/components/CommonNotifications/useNotifications.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useUserCurrentAccessTokenDeleteMutation } from '#shared/entities/user/current/graphql/mutations/userCurrentAccessTokenDelete.api.ts'\nimport { useUserCurrentAccessTokenListQuery } from '#shared/entities/user/current/graphql/queries/userCurrentAcessTokenList.api.ts'\nimport type {\n  Token,\n  UserCurrentAccessTokenUpdatesSubscription,\n  UserCurrentAccessTokenUpdatesSubscriptionVariables,\n  UserCurrentAccessTokenListQuery,\n} from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n/index.ts'\nimport { ErrorRouteType, redirectErrorRoute } from '#shared/router/error.ts'\nimport MutationHandler from '#shared/server/apollo/handler/MutationHandler.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\nimport { ErrorStatusCodes } from '#shared/types/error.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport { useFlyout } from '#desktop/components/CommonFlyout/useFlyout.ts'\nimport CommonLoader from '#desktop/components/CommonLoader/CommonLoader.vue'\nimport type { MenuItem } from '#desktop/components/CommonPopoverMenu/types.ts'\nimport CommonSimpleTable from '#desktop/components/CommonTable/CommonSimpleTable.vue'\nimport type {\n  TableSimpleHeader,\n  TableItem,\n} from '#desktop/components/CommonTable/types.ts'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\n\nimport { useCheckTokenAccess } from '../composables/permission/useCheckTokenAccess.ts'\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\nimport { UserCurrentAccessTokenUpdatesDocument } from '../graphql/subscriptions/userCurrentAccessTokenUpdates.api.ts'\n\ndefineOptions({\n  beforeRouteEnter() {\n    const { canUseAccessToken } = useCheckTokenAccess()\n\n    if (!canUseAccessToken.value)\n      return redirectErrorRoute({\n        type: ErrorRouteType.AuthenticatedError,\n        title: __('Forbidden'),\n        message: __(\n          'Token-based API access has been disabled by the administrator.',\n        ),\n        statusCode: ErrorStatusCodes.Forbidden,\n      })\n\n    return true\n  },\n})\n\nconst { breadcrumbItems } = useBreadcrumb(__('Token Access'))\n\nconst newAccessTokenFlyout = useFlyout({\n  name: 'new-access-token',\n  component: () =>\n    import('../components/PersonalSettingNewAccessTokenFlyout.vue'),\n})\n\nconst accessTokenListQuery = new QueryHandler(\n  useUserCurrentAccessTokenListQuery(),\n)\n\nconst accessTokenListQueryResult = accessTokenListQuery.result()\nconst accessTokenListLoading = accessTokenListQuery.loading()\n\naccessTokenListQuery.subscribeToMore<\n  UserCurrentAccessTokenUpdatesSubscriptionVariables,\n  UserCurrentAccessTokenUpdatesSubscription\n>({\n  document: UserCurrentAccessTokenUpdatesDocument,\n  updateQuery: (prev, { subscriptionData }) => {\n    if (!subscriptionData.data?.userCurrentAccessTokenUpdates.tokens) {\n      return null as unknown as UserCurrentAccessTokenListQuery\n    }\n\n    return {\n      userCurrentAccessTokenList:\n        subscriptionData.data.userCurrentAccessTokenUpdates.tokens,\n    }\n  },\n})\n\nconst tableHeaders: TableSimpleHeader[] = [\n  {\n    key: 'name',\n    label: __('Name'),\n    truncate: true,\n  },\n  {\n    key: 'permissions',\n    label: __('Permissions'),\n    truncate: true,\n  },\n  {\n    key: 'createdAt',\n    label: __('Created'),\n    type: 'timestamp',\n  },\n  {\n    key: 'expiresAt',\n    label: __('Expires'),\n    type: 'timestamp',\n  },\n  {\n    key: 'lastUsedAt',\n    label: __('Last Used'),\n    type: 'timestamp',\n  },\n]\n\nconst { notify } = useNotifications()\n\nconst { waitForVariantConfirmation } = useConfirmation()\n\nconst deleteDevice = (accessToken: Token) => {\n  const accessTokenDeleteMutation = new MutationHandler(\n    useUserCurrentAccessTokenDeleteMutation(() => ({\n      variables: {\n        tokenId: accessToken.id,\n      },\n      update(cache) {\n        cache.evict({ id: cache.identify(accessToken) })\n        cache.gc()\n      },\n    })),\n    {\n      errorNotificationMessage: __(\n        'The personal access token could not be deleted.',\n      ),\n    },\n  )\n\n  accessTokenDeleteMutation.send().then(() => {\n    notify({\n      id: 'personal-access-token-removed',\n      type: NotificationTypes.Success,\n      message: __('Personal access token has been deleted.'),\n    })\n  })\n}\n\nconst confirmDeleteDevice = async (accessToken: Token) => {\n  const confirmed = await waitForVariantConfirmation('delete')\n\n  if (confirmed) deleteDevice(accessToken)\n}\n\nconst tableActions: MenuItem[] = [\n  {\n    key: 'delete',\n    label: __('Delete this access token'),\n    icon: 'trash3',\n    variant: 'danger',\n    onClick: (data) => {\n      confirmDeleteDevice(data as Token)\n    },\n  },\n]\n\nconst currentAccessTokens = computed<TableItem[]>(() => {\n  return (\n    accessTokenListQueryResult.value?.userCurrentAccessTokenList || []\n  ).map((accessToken) => {\n    return {\n      ...accessToken,\n      permissions: accessToken.preferences?.permission?.join(', ') || '',\n    }\n  })\n})\n\nconst currentAccessTokenPresent = computed(\n  () => currentAccessTokens.value.length > 0,\n)\n\nconst helpText = computed(() => [\n  i18n.t(\n    'You can generate a personal access token for each application you use that needs access to the Zammad API.',\n  ),\n  i18n.t(\"Pick a name for the application, and we'll give you a unique token.\"),\n])\n</script>\n\n<template>\n  <LayoutContent\n    :help-text=\"helpText\"\n    :show-inline-help=\"!currentAccessTokenPresent && !accessTokenListLoading\"\n    :breadcrumb-items=\"breadcrumbItems\"\n    width=\"narrow\"\n  >\n    <template #headerRight>\n      <div class=\"flex flex-row gap-2\">\n        <CommonButton\n          prefix-icon=\"key\"\n          variant=\"primary\"\n          size=\"medium\"\n          @click=\"newAccessTokenFlyout.open()\"\n        >\n          {{ $t('New Personal Access Token') }}\n        </CommonButton>\n      </div>\n    </template>\n\n    <CommonLoader :loading=\"accessTokenListLoading\">\n      <div class=\"mb-4\">\n        <CommonSimpleTable\n          :headers=\"tableHeaders\"\n          :items=\"currentAccessTokens\"\n          :actions=\"tableActions\"\n          :caption=\"$t('Personal Access Tokens')\"\n          class=\"min-w-150\"\n        >\n          <template #item-suffix-name=\"{ item }\">\n            <CommonBadge\n              v-if=\"item.current\"\n              size=\"medium\"\n              variant=\"info\"\n              class=\"ltr:ml-2 rtl:mr-2\"\n              >{{ $t('This device') }}\n            </CommonBadge>\n          </template>\n        </CommonSimpleTable>\n      </div>\n    </CommonLoader>\n  </LayoutContent>\n</template>\n"],"file":"assets/PersonalSettingTokenAccess-BWcVhEA-.js"}