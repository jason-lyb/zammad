{"version":3,"file":"add.api-CxwFhgGn.js","sources":["../../../../../app/frontend/shared/entities/user/graphql/mutations/add.api.ts"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { UserAttributesFragmentDoc } from '../../../../graphql/fragments/userAttributes.api';\nimport { ErrorsFragmentDoc } from '../../../../graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserAddDocument = gql`\n    mutation userAdd($input: UserInput!, $sendInvite: Boolean) {\n  userAdd(input: $input, sendInvite: $sendInvite) {\n    user {\n      ...userAttributes\n    }\n    errors {\n      ...errors\n    }\n  }\n}\n    ${UserAttributesFragmentDoc}\n${ErrorsFragmentDoc}`;\nexport function useUserAddMutation(options: VueApolloComposable.UseMutationOptions<Types.UserAddMutation, Types.UserAddMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserAddMutation, Types.UserAddMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserAddMutation, Types.UserAddMutationVariables>(UserAddDocument, options);\n}\nexport type UserAddMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserAddMutation, Types.UserAddMutationVariables>;"],"names":["UserAddDocument","gql","UserAttributesFragmentDoc","ErrorsFragmentDoc","useUserAddMutation","options","VueApolloComposable.useMutation"],"mappings":"oLASO,MAAMA,EAAkBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWzBC,CAAyB;AAAA,EAC7BC,CAAiB,GACH,SAAAC,EAAmBC,EAA2N,GAAI,CACzP,OAAAC,EAAuFN,EAAiBK,CAAO,CACxH"}