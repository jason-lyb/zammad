{"version":3,"file":"GuidedSetupImportSourceStatus-CD60cO8G.js","sources":["../../../../../app/frontend/apps/desktop/pages/guided-setup/graphql/queries/systemImportState.api.ts","../../../../../app/frontend/apps/desktop/pages/guided-setup/views/GuidedSetupImport/GuidedSetupImportSource/GuidedSetupImportSourceStatus.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const SystemImportStateDocument = gql`\n    query systemImportState {\n  systemImportState {\n    name\n    result\n    startedAt\n    finishedAt\n  }\n}\n    `;\nexport function useSystemImportStateQuery(options: VueApolloComposable.UseQueryOptions<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>> = {}) {\n  return VueApolloComposable.useQuery<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>(SystemImportStateDocument, {}, options);\n}\nexport function useSystemImportStateLazyQuery(options: VueApolloComposable.UseQueryOptions<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables> | VueCompositionApi.Ref<VueApolloComposable.UseQueryOptions<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>> | ReactiveFunction<VueApolloComposable.UseQueryOptions<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>> = {}) {\n  return VueApolloComposable.useLazyQuery<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>(SystemImportStateDocument, {}, options);\n}\nexport type SystemImportStateQueryCompositionFunctionResult = VueApolloComposable.UseQueryReturn<Types.SystemImportStateQuery, Types.SystemImportStateQueryVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { useTimeoutFn } from '@vueuse/shared'\nimport { computed, ref, watch, watchEffect } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport { EnumSystemImportSource } from '#shared/graphql/types.ts'\nimport { i18n } from '#shared/i18n.ts'\nimport QueryHandler from '#shared/server/apollo/handler/QueryHandler.ts'\nimport { useApplicationStore } from '#shared/stores/application.ts'\n\nimport CommonProgressBar from '#desktop/components/CommonProgressBar/CommonProgressBar.vue'\n\nimport GuidedSetupActionFooter from '../../../components/GuidedSetupActionFooter.vue'\nimport { guidedSetupImportSourcePluginLookup } from '../../../components/GuidedSetupImport/GuidedSetupImportSource/plugins/index.ts'\nimport GuidedSetupStatusMessage from '../../../components/GuidedSetupStatusMessage.vue'\nimport { useSystemSetup } from '../../../composables/useSystemSetup.ts'\nimport { useSystemImportStateQuery } from '../../../graphql/queries/systemImportState.api.ts'\n\nimport type { ImportSourceStatusProgressItem } from '../../../types/setup-import.ts'\n\ndefineOptions({\n  // The import source status page is only available when \"import_mode\" is set.\n  beforeRouteEnter(to, from) {\n    const application = useApplicationStore()\n\n    if (from.name === 'GuidedSetupImportSourceStart') {\n      return true\n    }\n\n    if (!application.config.import_mode) {\n      return {\n        path: `/guided-setup/import/${to.params.source}`,\n        replace: true,\n      }\n    }\n  },\n})\n\ninterface Props {\n  source: EnumSystemImportSource\n}\n\nconst props = defineProps<Props>()\n\nconst { setTitle } = useSystemSetup()\n\nconst sourcePlugin = guidedSetupImportSourcePluginLookup[props.source]\n\nsetTitle(i18n.t('%s Import Status', sourcePlugin.label))\n\nconst systemSetupImportStatusQuery = new QueryHandler(\n  useSystemImportStateQuery({\n    pollInterval: 5000,\n  }),\n)\n\nconst systemSetupImportStatusQueryResult = systemSetupImportStatusQuery.result()\n\nconst importIsStarted = computed(() => {\n  return Boolean(\n    systemSetupImportStatusQueryResult.value?.systemImportState?.startedAt,\n  )\n})\n\nconst importJobIsFinished = computed(() => {\n  return Boolean(\n    systemSetupImportStatusQueryResult.value?.systemImportState?.finishedAt,\n  )\n})\n\nconst importJobErrorMessage = computed(() => {\n  const jobResult =\n    systemSetupImportStatusQueryResult.value?.systemImportState?.result\n\n  if (!jobResult || !jobResult.error) return\n\n  return jobResult.error as string\n})\n\nconst currentSystemSetupImportProgressItems = computed(() => {\n  if (!importIsStarted.value) return []\n\n  const stats =\n    systemSetupImportStatusQueryResult.value?.systemImportState?.result\n\n  if (!stats) return []\n\n  const progressStats: ImportSourceStatusProgressItem[] = []\n\n  Object.entries(sourcePlugin.importEntities).forEach(([entity, label]) => {\n    progressStats.push({\n      entity,\n      entityLabel: label,\n      processed:\n        stats[entity] && stats[entity].sum\n          ? String(stats[entity].sum)\n          : undefined,\n      total:\n        stats[entity] && stats[entity].total\n          ? String(stats[entity].total)\n          : undefined,\n      isFinished: false,\n    })\n  })\n\n  progressStats.forEach((item) => {\n    if (\n      item.processed &&\n      item.total &&\n      Number(item.processed) > Number(item.total)\n    ) {\n      item.processed = item.total\n    }\n\n    if (\n      item.processed !== undefined &&\n      item.total !== undefined &&\n      item.processed === item.total\n    )\n      item.isFinished = true\n  })\n\n  return progressStats\n})\n\nconst importJobStartError = ref(false)\n\nconst importJobErrorPresent = computed(() => {\n  return Boolean(importJobStartError.value || importJobErrorMessage.value)\n})\n\nconst checkImportJobStartError = useTimeoutFn(\n  () => {\n    importJobStartError.value = true\n    systemSetupImportStatusQuery.stop()\n  },\n  90000,\n  { immediate: false },\n)\nwatch(importIsStarted, (newValue) => {\n  if (newValue === true) {\n    checkImportJobStartError.stop()\n  }\n})\n\n// Check if a message was received from the server.\n// If this is the case start timeout that will stop the polling after 90 seconds.\nwatch(importJobErrorMessage, (errorMessage) => {\n  if (errorMessage) {\n    checkImportJobStartError.start()\n  } else {\n    checkImportJobStartError.stop()\n  }\n})\n\nwatch(importJobIsFinished, (newValue) => {\n  if (newValue === true) {\n    systemSetupImportStatusQuery.stop()\n  }\n})\n\nconst systemInitSettingsUpdated = ref(false)\nconst application = useApplicationStore()\n\nwatchEffect(() => {\n  if (\n    application.config.system_init_done &&\n    application.config.import_mode === false\n  ) {\n    systemInitSettingsUpdated.value = true\n  }\n})\n\n// Start the timeout to check if the import job has started if needed.\nif (!importIsStarted.value) {\n  checkImportJobStartError.start()\n}\n\nconst systemInitDone = computed(() => {\n  return (\n    systemInitSettingsUpdated.value &&\n    importJobIsFinished.value &&\n    !importJobErrorMessage.value\n  )\n})\n\nconst router = useRouter()\nconst goToLogin = () => {\n  router.push('/login')\n}\n</script>\n\n<template>\n  <CommonAlert v-if=\"importJobErrorPresent\" variant=\"danger\">\n    {{\n      $t(\n        importJobErrorMessage\n          ? importJobErrorMessage\n          : 'Background process did not start or has not finished! Please contact your support.',\n      )\n    }}\n  </CommonAlert>\n\n  <GuidedSetupStatusMessage\n    v-if=\"\n      !importJobErrorPresent &&\n      (!importIsStarted || currentSystemSetupImportProgressItems.length === 0)\n    \"\n    :message=\"__('Starting importâ€¦')\"\n  />\n\n  <div v-if=\"importIsStarted\" class=\"mb-5 flex flex-col gap-3\">\n    <CommonAlert v-if=\"systemInitDone\" variant=\"success\">\n      {{ $t('Import finished successfully!') }}\n    </CommonAlert>\n\n    <div\n      v-for=\"item in currentSystemSetupImportProgressItems\"\n      :key=\"item.entity\"\n      class=\"flex items-end gap-2\"\n    >\n      <div class=\"mb-1 flex grow flex-col gap-1\">\n        <div class=\"flex justify-between gap-2\">\n          <CommonLabel :id=\"`progress-${item.entity}`\">\n            {{ $t(item.entityLabel) }}\n          </CommonLabel>\n\n          <CommonLabel\n            v-if=\"item.processed !== undefined && item.total !== undefined\"\n            class=\"text-stone-200 dark:text-neutral-500\"\n          >\n            {{ $t('%s of %s', item.processed, item.total) }}\n          </CommonLabel>\n        </div>\n\n        <CommonProgressBar\n          :aria-labelledby=\"`progress-${item.entity}`\"\n          :value=\"item.processed\"\n          :max=\"item.total\"\n        />\n      </div>\n\n      <CommonIcon\n        class=\"shrink-0 fill-green-500\"\n        :class=\"!item.isFinished ? 'invisible' : undefined\"\n        name=\"check2\"\n        size=\"tiny\"\n        decorative\n      />\n    </div>\n  </div>\n\n  <GuidedSetupActionFooter\n    v-if=\"systemInitDone\"\n    submit-button-variant=\"primary\"\n    submit-button-type=\"button\"\n    :submit-button-text=\"__('Go to Login')\"\n    @submit=\"goToLogin\"\n  />\n</template>\n"],"names":["SystemImportStateDocument","gql","useSystemImportStateQuery","options","VueApolloComposable.useQuery","props","__props","setTitle","useSystemSetup","sourcePlugin","guidedSetupImportSourcePluginLookup","i18n","systemSetupImportStatusQuery","QueryHandler","systemSetupImportStatusQueryResult","importIsStarted","computed","_b","_a","importJobIsFinished","importJobErrorMessage","jobResult","currentSystemSetupImportProgressItems","stats","progressStats","entity","label","item","importJobStartError","ref","importJobErrorPresent","checkImportJobStartError","useTimeoutFn","watch","newValue","errorMessage","systemInitSettingsUpdated","application","useApplicationStore","watchEffect","systemInitDone","router","useRouter","goToLogin"],"mappings":"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"}