{"version":3,"file":"useMultiStepForm-CbTGEQR9.js","sources":["../../../../../app/frontend/shared/components/Form/useMultiStepForm.ts"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { createMessage, getNode } from '@formkit/core'\nimport { computed, toRef, ref, reactive, watch } from 'vue'\n\nimport type { FormStep } from './types.ts'\nimport type { FormKitNode } from '@formkit/core'\nimport type { ComputedRef, Ref } from 'vue'\n\ninterface InternalMultiFormSteps {\n  label: string\n  order: number\n  valid: Ref<boolean>\n  blockingCount: number\n  errorCount: number\n}\n\nexport const useMultiStepForm = (\n  formNode: ComputedRef<FormKitNode | undefined>,\n) => {\n  const activeStep = ref('')\n  const internalSteps = reactive<Record<string, InternalMultiFormSteps>>({})\n  const visitedSteps = ref<string[]>([])\n  const stepNames = computed(() => Object.keys(internalSteps))\n\n  const lastStepName = computed(\n    () => stepNames.value[stepNames.value.length - 1],\n  )\n\n  // Watch the active steps to track the visited steps.\n  watch(activeStep, (newStep, oldStep) => {\n    if (oldStep && !visitedSteps.value.includes(oldStep)) {\n      visitedSteps.value.push(oldStep)\n    }\n\n    // Trigger showing validation on fields within all visited steps, otherwise it would only visible\n    // after clicking on the \"real\" submit button.\n    visitedSteps.value.forEach((step) => {\n      const node = getNode(step)\n\n      if (!node) return\n\n      node.walk((fieldNode) => {\n        fieldNode.store.set(\n          createMessage({\n            key: 'submitted',\n            value: true,\n            visible: false,\n          }),\n        )\n      })\n    })\n\n    formNode.value?.emit('autofocus')\n  })\n\n  const setMultiStep = (step?: string) => {\n    // Go to next step, when no specific step is given.\n    if (!step) {\n      const currentIndex = stepNames.value.indexOf(activeStep.value)\n      activeStep.value = stepNames.value[currentIndex + 1]\n    } else {\n      activeStep.value = step\n    }\n  }\n\n  const multiStepPlugin = (node: FormKitNode) => {\n    if (node.props.type === 'group') {\n      internalSteps[node.name] = internalSteps[node.name] || {}\n\n      node.on('created', () => {\n        if (!node.context) return\n\n        internalSteps[node.name].valid = toRef(node.context.state, 'valid')\n        internalSteps[node.name].label =\n          Object.keys(internalSteps).length.toString()\n        internalSteps[node.name].order = Object.keys(internalSteps).length\n      })\n\n      // Listen for changes in error count, which a normally errors from the backend after submitting.\n      node.on('count:errors', ({ payload: count }) => {\n        internalSteps[node.name].errorCount = count\n      })\n\n      // Listen for changes in count of blocking validations messages.\n      node.on('count:blocking', ({ payload: count }) => {\n        internalSteps[node.name].blockingCount = count\n      })\n\n      // The first step should be the default one.\n      if (activeStep.value === '') {\n        activeStep.value = node.name\n      }\n    }\n\n    return false\n  }\n\n  const allSteps = computed<Record<string, FormStep>>(() => {\n    const mappedSteps: Record<string, FormStep> = {}\n\n    stepNames.value.forEach((stepName) => {\n      const alreadyVisited = visitedSteps.value.includes(stepName)\n\n      mappedSteps[stepName] = {\n        label: internalSteps[stepName].label,\n        order: internalSteps[stepName].order,\n        errorCount:\n          internalSteps[stepName].blockingCount +\n          internalSteps[stepName].errorCount,\n        valid:\n          internalSteps[stepName].valid &&\n          internalSteps[stepName].errorCount === 0,\n        disabled: !alreadyVisited || activeStep.value === stepName,\n        completed: alreadyVisited,\n      }\n    })\n\n    return mappedSteps\n  })\n\n  return {\n    multiStepPlugin,\n    setMultiStep,\n    allSteps,\n    stepNames,\n    lastStepName,\n    activeStep,\n    visitedSteps,\n  }\n}\n"],"names":["useMultiStepForm","formNode","activeStep","ref","internalSteps","reactive","visitedSteps","stepNames","computed","lastStepName","watch","newStep","oldStep","step","node","getNode","fieldNode","createMessage","_a","setMultiStep","currentIndex","multiStepPlugin","toRef","count","allSteps","mappedSteps","stepName","alreadyVisited"],"mappings":"mHAiBa,MAAAA,EACXC,GACG,CACG,MAAAC,EAAaC,EAAI,EAAE,EACnBC,EAAgBC,EAAiD,CAAA,CAAE,EACnEC,EAAeH,EAAc,CAAA,CAAE,EAC/BI,EAAYC,EAAS,IAAM,OAAO,KAAKJ,CAAa,CAAC,EAErDK,EAAeD,EACnB,IAAMD,EAAU,MAAMA,EAAU,MAAM,OAAS,CAAC,CAAA,EAI5CG,EAAAR,EAAY,CAACS,EAASC,IAAY,OAClCA,GAAW,CAACN,EAAa,MAAM,SAASM,CAAO,GACpCN,EAAA,MAAM,KAAKM,CAAO,EAKpBN,EAAA,MAAM,QAASO,GAAS,CAC7B,MAAAC,EAAOC,EAAQF,CAAI,EAEpBC,GAEAA,EAAA,KAAME,GAAc,CACvBA,EAAU,MAAM,IACdC,EAAc,CACZ,IAAK,YACL,MAAO,GACP,QAAS,EAAA,CACV,CAAA,CACH,CACD,CAAA,CACF,GAEQC,EAAAjB,EAAA,QAAA,MAAAiB,EAAO,KAAK,YAAW,CACjC,EAEK,MAAAC,EAAgBN,GAAkB,CAEtC,GAAKA,EAIHX,EAAW,MAAQW,MAJV,CACT,MAAMO,EAAeb,EAAU,MAAM,QAAQL,EAAW,KAAK,EAC7DA,EAAW,MAAQK,EAAU,MAAMa,EAAe,CAAC,CAAA,CAGrD,EAGIC,EAAmBP,IACnBA,EAAK,MAAM,OAAS,UACtBV,EAAcU,EAAK,IAAI,EAAIV,EAAcU,EAAK,IAAI,GAAK,GAElDA,EAAA,GAAG,UAAW,IAAM,CAClBA,EAAK,UAEIV,EAAAU,EAAK,IAAI,EAAE,MAAQQ,EAAMR,EAAK,QAAQ,MAAO,OAAO,EACpDV,EAAAU,EAAK,IAAI,EAAE,MACvB,OAAO,KAAKV,CAAa,EAAE,OAAO,WACpCA,EAAcU,EAAK,IAAI,EAAE,MAAQ,OAAO,KAAKV,CAAa,EAAE,OAAA,CAC7D,EAGDU,EAAK,GAAG,eAAgB,CAAC,CAAE,QAASS,KAAY,CAChCnB,EAAAU,EAAK,IAAI,EAAE,WAAaS,CAAA,CACvC,EAGDT,EAAK,GAAG,iBAAkB,CAAC,CAAE,QAASS,KAAY,CAClCnB,EAAAU,EAAK,IAAI,EAAE,cAAgBS,CAAA,CAC1C,EAGGrB,EAAW,QAAU,KACvBA,EAAW,MAAQY,EAAK,OAIrB,IAGHU,EAAWhB,EAAmC,IAAM,CACxD,MAAMiB,EAAwC,CAAA,EAEpC,OAAAlB,EAAA,MAAM,QAASmB,GAAa,CACpC,MAAMC,EAAiBrB,EAAa,MAAM,SAASoB,CAAQ,EAE3DD,EAAYC,CAAQ,EAAI,CACtB,MAAOtB,EAAcsB,CAAQ,EAAE,MAC/B,MAAOtB,EAAcsB,CAAQ,EAAE,MAC/B,WACEtB,EAAcsB,CAAQ,EAAE,cACxBtB,EAAcsB,CAAQ,EAAE,WAC1B,MACEtB,EAAcsB,CAAQ,EAAE,OACxBtB,EAAcsB,CAAQ,EAAE,aAAe,EACzC,SAAU,CAACC,GAAkBzB,EAAW,QAAUwB,EAClD,UAAWC,CAAA,CACb,CACD,EAEMF,CAAA,CACR,EAEM,MAAA,CACL,gBAAAJ,EACA,aAAAF,EACA,SAAAK,EACA,UAAAjB,EACA,aAAAE,EACA,WAAAP,EACA,aAAAI,CAAA,CAEJ"}