{"version":3,"mappings":"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","names":["useTicketsMerge","sourceTicket","onSuccess","autocompleteRef","ref","ticketsSearchDialog","useDialog","__vitePreload","mergeHandler","MutationHandler","useTicketMergeMutation","notify","useNotifications","router","useRouter","localOptions","waitForConfirmation","useConfirmation","mergeTickets","context","_a","targetTicketId","targetTicketOption","NotificationTypes","targetTicket","errors","UserError","mergeAndCloseModals","AutocompleteSearchTicketDocument","markRaw","TicketMergeStatus","options","keyBy","props","__props","route","useRoute","ticketReactive","toRef","isTicketAgent","isTicketEditable","useTicketView","gqlQuery","openMergeTicketsDialog","closeDialog","isSubscribed","isSubscriptionLoading","canManageSubscription","toggleSubscribe","useTicketSubscribe","topButtons","computed","informationRoute","truthy","changeCustomerDialog","showChangeCustomer"],"ignoreList":[],"sources":["../../../../../app/frontend/apps/mobile/pages/ticket/composable/useTicketsMerge.ts","../../../../../app/frontend/apps/mobile/pages/ticket/components/TicketDetailView/TicketActionsDialog.vue"],"sourcesContent":["// Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/\n\nimport { keyBy } from 'lodash-es'\nimport { ref, markRaw } from 'vue'\nimport { useRouter } from 'vue-router'\n\nimport {\n  useNotifications,\n  NotificationTypes,\n} from '#shared/components/CommonNotifications/index.ts'\nimport { useConfirmation } from '#shared/composables/useConfirmation.ts'\nimport { useTicketMergeMutation } from '#shared/entities/ticket/graphql/mutations/merge.api.ts'\nimport { AutocompleteSearchTicketDocument } from '#shared/entities/ticket/graphql/queries/autocompleteSearchTicket.api.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport UserError from '#shared/errors/UserError.ts'\nimport type { AutocompleteSearchTicketEntry } from '#shared/graphql/types.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\n\nimport { useDialog } from '#mobile/composables/useDialog.ts'\n\nimport TicketMergeStatus from '../components/TicketDetailView/TicketMergeStatus.vue'\n\nimport type { FormKitNode } from '@formkit/core'\nimport type { Ref } from 'vue'\n\nexport const useTicketsMerge = (\n  sourceTicket: Ref<TicketById>,\n  onSuccess?: () => void,\n) => {\n  const autocompleteRef = ref<{ node: FormKitNode }>()\n  const ticketsSearchDialog = useDialog({\n    name: 'tickets-search',\n    prefetch: true,\n    component: () =>\n      import(\n        '#mobile/components/Form/fields/FieldAutoComplete/FieldAutoCompleteInputDialog.vue'\n      ),\n  })\n\n  const mergeHandler = new MutationHandler(useTicketMergeMutation({}))\n\n  const { notify } = useNotifications()\n  const router = useRouter()\n\n  let localOptions: Record<string, AutocompleteSearchTicketEntry> = {}\n\n  const { waitForConfirmation } = useConfirmation()\n\n  const mergeTickets = async () => {\n    const context = autocompleteRef.value?.node.context\n    if (!context || mergeHandler.loading().value) return false\n\n    const targetTicketId = context._value\n    const targetTicketOption = localOptions[targetTicketId]\n\n    if (!targetTicketId || !targetTicketOption) {\n      notify({\n        id: 'merge-ticket-error',\n        type: NotificationTypes.Error,\n        message: __('Please select a ticket to merge into.'),\n      })\n      return false\n    }\n    const targetTicket = targetTicketOption.ticket\n\n    const confirmed = await waitForConfirmation(\n      __('Are you sure you want to merge this ticket (#%s) into #%s?'),\n      {\n        textPlaceholder: [sourceTicket.value.number, targetTicket.number],\n      },\n    )\n\n    if (!confirmed) return false\n\n    try {\n      const result = await mergeHandler.send({\n        sourceTicketId: sourceTicket.value.id,\n        targetTicketId,\n      })\n      if (!result) {\n        return false\n      }\n      context.node.input(undefined)\n      router.push(`/tickets/${targetTicket.internalId}`)\n      return true\n    } catch (errors) {\n      if (errors instanceof UserError) {\n        notify({\n          id: 'merge-ticket-error',\n          message: errors.generalErrors[0],\n          type: NotificationTypes.Error,\n        })\n      }\n    }\n    return false\n  }\n\n  const mergeAndCloseModals = async () => {\n    const isMerged = await mergeTickets()\n    if (isMerged) {\n      ticketsSearchDialog.close()\n      onSuccess?.()\n    }\n  }\n\n  const openMergeTicketsDialog = () => {\n    const context = autocompleteRef.value?.node.context\n\n    if (!context) return\n\n    Object.assign(context, {\n      onActionClick: mergeAndCloseModals,\n    })\n\n    ticketsSearchDialog.open({\n      context,\n      name: 'tickets-search',\n      options: [],\n      optionIconComponent: markRaw(TicketMergeStatus),\n      noCloseOnSelect: true,\n      onUpdateOptions(options: AutocompleteSearchTicketEntry[]) {\n        localOptions = keyBy(options, 'value')\n      },\n      onAction() {\n        mergeAndCloseModals()\n      },\n    })\n  }\n\n  return {\n    gqlQuery: AutocompleteSearchTicketDocument,\n    autocompleteRef,\n    openMergeTicketsDialog,\n  }\n}\n","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { computed, toRef } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\n\nimport CommonUserAvatar from '#shared/components/CommonUserAvatar/CommonUserAvatar.vue'\nimport { useTicketSubscribe } from '#shared/entities/ticket/composables/useTicketSubscribe.ts'\nimport { useTicketView } from '#shared/entities/ticket/composables/useTicketView.ts'\nimport type { TicketById } from '#shared/entities/ticket/types.ts'\nimport { truthy } from '#shared/utils/helpers.ts'\n\nimport CommonButtonGroup from '#mobile/components/CommonButtonGroup/CommonButtonGroup.vue'\nimport CommonDialog from '#mobile/components/CommonDialog/CommonDialog.vue'\nimport CommonSectionMenu from '#mobile/components/CommonSectionMenu/CommonSectionMenu.vue'\nimport CommonSectionMenuLink from '#mobile/components/CommonSectionMenu/CommonSectionMenuLink.vue'\nimport { useDialog, closeDialog } from '#mobile/composables/useDialog.ts'\n\nimport { useTicketsMerge } from '../../composable/useTicketsMerge.ts'\n\n// TODO I think the complete dialog should not be available for none agent user (and maybe also for agents without write permission?)\n\ninterface Props {\n  name: string\n  ticket: TicketById\n}\n\nconst props = defineProps<Props>()\n\nconst route = useRoute()\nconst router = useRouter()\n\nconst ticketReactive = toRef(props, 'ticket')\nconst { isTicketAgent, isTicketEditable } = useTicketView(ticketReactive)\n\nconst { autocompleteRef, gqlQuery, openMergeTicketsDialog } = useTicketsMerge(\n  ticketReactive,\n  () => closeDialog(props.name),\n)\n\nconst {\n  isSubscribed,\n  isSubscriptionLoading,\n  canManageSubscription,\n  toggleSubscribe,\n} = useTicketSubscribe(ticketReactive)\n\nconst topButtons = computed(() =>\n  [\n    {\n      label: __('Merge tickets'),\n      icon: 'merge',\n      hidden: !isTicketEditable.value || !isTicketAgent.value,\n      onAction: openMergeTicketsDialog,\n    },\n    {\n      label: isSubscribed.value ? __('Unsubscribe') : __('Subscribe'),\n      icon: isSubscribed.value\n        ? 'notification-unsubscribed'\n        : 'notification-subscribed',\n      value: 'subscribe',\n      hidden: !canManageSubscription.value,\n      selected: isSubscribed.value,\n      disabled: isSubscriptionLoading.value,\n      onAction: toggleSubscribe,\n    },\n    {\n      label: __('Ticket info'),\n      icon: 'info',\n      onAction() {\n        const informationRoute = {\n          name: 'TicketInformationDetails',\n          params: {\n            internalId: props.ticket.internalId,\n          },\n        }\n        closeDialog(props.name)\n        if (route.name !== informationRoute.name) {\n          router.push(informationRoute)\n        }\n      },\n    },\n  ].filter(truthy),\n)\n\nconst changeCustomerDialog = useDialog({\n  name: 'ticket-change-customer',\n  component: () =>\n    import(\n      '#mobile/pages/ticket/components/TicketDetailView/TicketAction/TicketActionChangeCustomerDialog.vue'\n    ),\n})\n\nconst showChangeCustomer = () => {\n  if (!props.ticket) return\n\n  changeCustomerDialog.open({\n    name: changeCustomerDialog.name,\n    ticket: ticketReactive,\n  })\n}\n</script>\n\n<template>\n  <CommonDialog :name=\"name\" :label=\"__('Ticket actions')\">\n    <div class=\"w-full px-3\">\n      <CommonButtonGroup class=\"py-6\" mode=\"full\" :options=\"topButtons\" />\n      <FormKit\n        ref=\"autocompleteRef\"\n        type=\"autocomplete\"\n        outer-class=\"hidden\"\n        :label=\"__('Find a ticket')\"\n        :gql-query=\"gqlQuery\"\n        :action-label=\"__('Confirm merge')\"\n        :additional-query-params=\"{ exceptTicketInternalId: ticket.internalId }\"\n        :label-empty=\"__('Start typing to find the ticket to merge into.')\"\n        action-icon=\"merge\"\n      />\n      <!-- Postponed\n      <CommonSectionMenu>\n        <CommonSectionMenuLink\n          :label=\"__('Execute configured macros')\"\n          icon=\"macros\"\n          icon-bg=\"bg-green\"\n        />\n      </CommonSectionMenu> -->\n      <!-- Postponed\n      <CommonSectionMenu>\n        <CommonSectionMenuLink\n          :label=\"__('History')\"\n          icon=\"history\"\n          icon-bg=\"bg-gray\"\n        />\n      </CommonSectionMenu> -->\n      <CommonSectionMenu v-if=\"isTicketEditable && isTicketAgent\">\n        <CommonSectionMenuLink\n          :label=\"__('Change customer')\"\n          @click=\"showChangeCustomer\"\n        >\n          <template #icon>\n            <CommonUserAvatar :entity=\"ticket.customer\" size=\"small\" />\n          </template>\n        </CommonSectionMenuLink>\n      </CommonSectionMenu>\n    </div>\n  </CommonDialog>\n</template>\n"],"file":"assets/TicketActionsDialog-N0IjNELq.js"}