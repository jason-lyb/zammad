{"version":3,"file":"PersonalSettingOutOfOffice-Be8bTGiD.js","sources":["../../../../../app/frontend/apps/desktop/pages/personal-setting/graphql/mutations/userCurrentOutOfOffice.api.ts","../../../../../app/frontend/apps/desktop/pages/personal-setting/views/PersonalSettingOutOfOffice.vue"],"sourcesContent":["import * as Types from '#shared/graphql/types.ts';\n\nimport gql from 'graphql-tag';\nimport { ErrorsFragmentDoc } from '../../../../../../shared/graphql/fragments/errors.api';\nimport * as VueApolloComposable from '@vue/apollo-composable';\nimport * as VueCompositionApi from 'vue';\nexport type ReactiveFunction<TParam> = () => TParam;\n\nexport const UserCurrentOutOfOfficeDocument = gql`\n    mutation userCurrentOutOfOffice($input: OutOfOfficeInput!) {\n  userCurrentOutOfOffice(input: $input) {\n    success\n    errors {\n      ...errors\n    }\n  }\n}\n    ${ErrorsFragmentDoc}`;\nexport function useUserCurrentOutOfOfficeMutation(options: VueApolloComposable.UseMutationOptions<Types.UserCurrentOutOfOfficeMutation, Types.UserCurrentOutOfOfficeMutationVariables> | ReactiveFunction<VueApolloComposable.UseMutationOptions<Types.UserCurrentOutOfOfficeMutation, Types.UserCurrentOutOfOfficeMutationVariables>> = {}) {\n  return VueApolloComposable.useMutation<Types.UserCurrentOutOfOfficeMutation, Types.UserCurrentOutOfOfficeMutationVariables>(UserCurrentOutOfOfficeDocument, options);\n}\nexport type UserCurrentOutOfOfficeMutationCompositionFunctionResult = VueApolloComposable.UseMutationReturn<Types.UserCurrentOutOfOfficeMutation, Types.UserCurrentOutOfOfficeMutationVariables>;","<!-- Copyright (C) 2012-2025 Zammad Foundation, https://zammad-foundation.org/ -->\n\n<script setup lang=\"ts\">\nimport { isEqual } from 'lodash-es'\nimport { storeToRefs } from 'pinia'\nimport { reactive, computed, watch } from 'vue'\n\nimport {\n  NotificationTypes,\n  useNotifications,\n} from '#shared/components/CommonNotifications/index.ts'\nimport Form from '#shared/components/Form/Form.vue'\nimport type {\n  FormSubmitData,\n  FormSchemaField,\n  FormFieldValue,\n} from '#shared/components/Form/types.ts'\nimport { useForm } from '#shared/components/Form/useForm.ts'\nimport { defineFormSchema } from '#shared/form/defineFormSchema.ts'\nimport type { OutOfOfficeInput } from '#shared/graphql/types.ts'\nimport { convertToGraphQLId } from '#shared/graphql/utils.ts'\nimport { MutationHandler } from '#shared/server/apollo/handler/index.ts'\nimport { useSessionStore } from '#shared/stores/session.ts'\n\nimport CommonButton from '#desktop/components/CommonButton/CommonButton.vue'\nimport LayoutContent from '#desktop/components/layout/LayoutContent.vue'\n\nimport { useBreadcrumb } from '../composables/useBreadcrumb.ts'\nimport { useUserCurrentOutOfOfficeMutation } from '../graphql/mutations/userCurrentOutOfOffice.api.ts'\n\nimport type { OutOfOfficeFormData } from '../types/out-of-office.ts'\n\nconst { user } = storeToRefs(useSessionStore())\n\nconst { form, isDisabled, onChangedField, formReset, values, isDirty } =\n  useForm()\n\nconst schema = defineFormSchema([\n  {\n    isLayout: true,\n    component: 'FormGroup',\n    children: [\n      {\n        type: 'text',\n        name: 'text',\n        label: __('Reason for absence'),\n        placeholder: __('e.g. Easter holiday'),\n      },\n      {\n        type: 'date',\n        name: 'date_range',\n        label: __('Start and end date'),\n        props: {\n          clearable: true,\n          range: true,\n        },\n      },\n      {\n        type: 'agent',\n        name: 'replacement_id',\n        label: __('Replacement agent'),\n        props: {\n          clearable: true,\n          belongsToObjectField: 'outOfOfficeReplacement',\n          exceptUserInternalId: user.value?.internalId,\n        },\n      },\n      {\n        type: 'toggle',\n        name: 'enabled',\n        label: __('Active'),\n        props: {\n          variants: {\n            true: __('Active'),\n            false: __('Inactive'),\n          },\n        },\n      },\n    ],\n  },\n])\n\nconst initialFormValues = computed<OutOfOfficeFormData>((oldValues) => {\n  const values: OutOfOfficeFormData = {\n    text: user.value?.preferences?.out_of_office_text,\n    replacement_id: user.value?.outOfOfficeReplacement?.internalId,\n    enabled: !!user.value?.outOfOffice,\n  }\n\n  if (user.value?.outOfOfficeStartAt && user.value?.outOfOfficeEndAt) {\n    values.date_range = [\n      user.value?.outOfOfficeStartAt,\n      user.value?.outOfOfficeEndAt,\n    ]\n  }\n\n  if (oldValues && isEqual(values, oldValues)) {\n    return oldValues\n  }\n\n  return values\n})\n\nwatch(initialFormValues, (newValues) => {\n  // No reset needed when the form has already the correct state.\n  if (isEqual(values.value, newValues) && !isDirty.value) return\n\n  formReset({ values: newValues, object: user.value! })\n})\n\nconst buildFormChangesHash = (enabled: boolean) => {\n  return {\n    replacement_id: { required: enabled },\n    date_range: { required: enabled },\n  }\n}\n\nconst formChangeFields = reactive<Record<string, Partial<FormSchemaField>>>(\n  buildFormChangesHash(initialFormValues.value.enabled),\n)\n\nonChangedField('enabled', (newValue: FormFieldValue) => {\n  Object.assign(formChangeFields, buildFormChangesHash(!!newValue))\n})\n\nconst { breadcrumbItems } = useBreadcrumb(__('Out of Office'))\n\nconst formDataToInput = (\n  formData: FormSubmitData<OutOfOfficeFormData>,\n): OutOfOfficeInput => {\n  const replacementId = formData.replacement_id\n    ? convertToGraphQLId('User', formData.replacement_id)\n    : undefined\n\n  return {\n    enabled: formData.enabled,\n    text: formData.text,\n    startAt: formData.date_range?.at(0),\n    endAt: formData.date_range?.at(1),\n    replacementId,\n  }\n}\n\nconst { notify } = useNotifications()\n\nconst showSuccessNotification = () => {\n  notify({\n    id: 'out-of-office-saved',\n    type: NotificationTypes.Success,\n    message: __('Out of Office settings have been saved successfully'),\n  })\n}\n\nconst outOfOfficeMutation = new MutationHandler(\n  useUserCurrentOutOfOfficeMutation(),\n  {\n    errorNotificationMessage: __('Out of Office settings could not be saved.'),\n  },\n)\n\nconst submitForm = async (formData: FormSubmitData<OutOfOfficeFormData>) => {\n  return outOfOfficeMutation\n    .send({ input: formDataToInput(formData) })\n    .then(() => showSuccessNotification)\n}\n</script>\n\n<template>\n  <LayoutContent :breadcrumb-items=\"breadcrumbItems\" width=\"narrow\">\n    <div class=\"mb-4\">\n      <Form\n        ref=\"form\"\n        :initial-values=\"initialFormValues\"\n        :initial-entity-object=\"user!\"\n        :schema=\"schema\"\n        :change-fields=\"formChangeFields\"\n        @submit=\"submitForm($event as FormSubmitData<OutOfOfficeFormData>)\"\n      >\n        <template #after-fields>\n          <div class=\"mt-5 flex items-center justify-end gap-2\">\n            <CommonButton\n              variant=\"submit\"\n              type=\"submit\"\n              size=\"medium\"\n              :disabled=\"isDisabled\"\n            >\n              {{ $t('Save Out of Office') }}\n            </CommonButton>\n          </div>\n        </template>\n      </Form>\n    </div>\n  </LayoutContent>\n</template>\n"],"names":["UserCurrentOutOfOfficeDocument","gql","ErrorsFragmentDoc","useUserCurrentOutOfOfficeMutation","options","VueApolloComposable.useMutation","user","storeToRefs","useSessionStore","form","isDisabled","onChangedField","formReset","values","isDirty","useForm","schema","defineFormSchema","_a","initialFormValues","computed","oldValues","_b","_d","_c","_e","_f","_g","_h","_i","isEqual","watch","newValues","buildFormChangesHash","enabled","formChangeFields","reactive","newValue","breadcrumbItems","useBreadcrumb","formDataToInput","formData","replacementId","convertToGraphQLId","notify","useNotifications","showSuccessNotification","NotificationTypes","outOfOfficeMutation","MutationHandler","submitForm"],"mappings":"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"}