class Kakao extends App.ControllerIntegrationBase
  featureIntegration: 'kakao_integration'
  featureName: __('카카오톡 상담톡')
  featureConfig: 'kakao_config'
  description: [
    [__('카카오톡 상담톡 API 서버와 연동하여 실시간 상담 채팅을 제공합니다.')]
  ]
  events:
    'click .js-test-connection': 'testConnection'
    'submit .js-form-inner': 'update'

  render: =>
    super
    @renderForm()
    setTimeout(@loadSettings, 100)

  renderForm: =>
    @$('.js-form').html '''
      <fieldset>
        <div class="well">
          <h2>카카오톡 상담톡 연동 설정</h2>
          <p>상담톡 API 서버와 연동하여 실시간 채팅 상담을 제공합니다.</p>
        </div>

        <form role="form" class="js-form-inner">
          <div class="form-group">
            <label class="control-label">상담톡 연동 사용</label>
            <div class="u-positionOrigin">
              <div class="checkbox-replacement checkbox-replacement--inline">
                <label class="checkbox-replacement-label">
                  <input name="integration" type="checkbox" value="true" class="js-switch"/>
                  <span class="checkbox-replacement-item"></span>
                  카카오톡 상담톡 연동 활성화
                </label>
              </div>
            </div>
          </div>

          <div class="form-group">
            <label class="control-label" for="api_endpoint">상담톡 API 서버 URL</label>
            <input type="url" id="api_endpoint" name="api_endpoint" class="form-control" placeholder="https://your-api-server.com/api" value=""/>
            <p class="help-text">상담톡 API 서버의 기본 URL을 입력하세요.</p>
          </div>

          <div class="form-group">
            <label class="control-label" for="api_token">API 인증 토큰</label>
            <input type="password" id="api_token" name="api_token" class="form-control" placeholder="your-api-token" value=""/>
            <p class="help-text">상담톡 API 서버 인증용 토큰입니다.</p>
          </div>

          <div class="form-group">
            <button type="button" class="btn js-test-connection">연결 테스트</button>
            <button type="submit" class="btn btn--primary">설정 저장</button>
          </div>
        </form>
      </fieldset>
    '''

  loadSettings: =>
    # Get individual settings with safe defaults
    try
      integration_enabled = App.Setting.get('kakao_integration') || false
    catch
      integration_enabled = false
    
    try
      api_endpoint = App.Setting.get('kakao_api_endpoint') || ''
    catch
      api_endpoint = ''
    
    try
      api_token = App.Setting.get('kakao_api_token') || ''
    catch
      api_token = ''
    
    # Set form values
    @$('input[name="integration"]').prop('checked', !!integration_enabled)
    @$('input[name="api_endpoint"]').val(api_endpoint)
    @$('input[name="api_token"]').val(api_token)

  testConnection: (e) =>
    e.preventDefault()
    @notify(
      type: 'success'
      msg: __('연결 테스트 성공! (데모)')
    )

  update: (e) =>
    e.preventDefault()
    
    # Get form data
    params = @getFormData()
    
    # Update individual settings
    App.Setting.set('kakao_api_endpoint', params.api_endpoint, notify: true)
    App.Setting.set('kakao_api_token', params.api_token, notify: true)
    
    # Update integration toggle setting
    integration_enabled = !!params.integration
    App.Setting.set('kakao_integration', integration_enabled, notify: true)
    
    # Trigger navigation update
    @triggerNavigationUpdate()
    
    # Show success message
    @notify(
      type: 'success'
      msg: __('카카오톡 상담톡 설정이 저장되었습니다.')
    )

  triggerNavigationUpdate: =>
    # 네비게이션 바 새로고침
    setTimeout(=>
      App.Event.trigger('navigation:rebuild')
      App.Event.trigger('ui:rerender')
    , 100)

  getFormData: =>
    data = {}
    @$('.js-form-inner').find('input, select, textarea').each( ->
      $element = $(@)
      name = $element.attr('name')
      if $element.attr('type') is 'checkbox'
        value = $element.is(':checked')
      else
        value = $element.val()
      data[name] = value
    )
    data

class State
  @current: ->
    try
      return App.Setting.get('kakao_integration') || false
    catch
      return false

App.Config.set(
  'IntegrationKakao'
  
    name: __('카카오톡 상담톡')
    target: '#system/integration/kakao'
    description: __('카카오톡 상담톡 API 서버와 연동하여 실시간 채팅 상담을 제공합니다.')
    controller: Kakao
    state: State
    permission: ['admin.integration.kakao']
  
  'NavBarIntegrations'
)

# 네비게이션 바에 메뉴 추가/제거 (조건부)
checkAndUpdateNavigation = ->
  # 기존 메뉴 제거
  App.Config.delete('KakaoChat', 'NavBar')
  
  # 활성화된 경우에만 메뉴 추가
  try
    if App.Setting.get('kakao_integration')
      App.Config.set('KakaoChat', {
        prio: 1400,
        name: __('카카오톡 상담'),
        target: '#kakao_chat',
        controller: App.KakaoChat,
        permission: ['admin'],
        icon: 'message-circle'
      }, 'NavBar')
  catch error
    console.log('카카오 설정 오류:', error)

# 초기 네비게이션 설정
setTimeout(checkAndUpdateNavigation, 2000)

# 설정 변경 시 네비게이션 업데이트
App.Event.bind 'setting:changed', (setting) ->
  if setting and setting.name is 'kakao_integration'
    checkAndUpdateNavigation()
    # 네비게이션 재구성
    setTimeout(->
      App.Event.trigger('navigation:rebuild')
    , 100)